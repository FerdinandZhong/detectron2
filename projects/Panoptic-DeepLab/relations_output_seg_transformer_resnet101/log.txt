[10/09 20:57:26] detectron2 INFO: Rank of current process: 0. World size: 2
[10/09 20:57:27] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.3
detectron2              0.6 @/root/Projects/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.1
detectron2 arch flags   8.6
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.12.0+cu113 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 Tesla V100S-PCIE-32GB (arch=7.0)
Driver version          470.82.00
CUDA_HOME               /usr/local/cuda
Pillow                  9.1.1
torchvision             0.13.0+cu113 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[10/09 20:57:27] detectron2 INFO: Command line arguments: Namespace(config_file='configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv_custom.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/09 20:57:27] detectron2 INFO: Contents of args.config_file=configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv_custom.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m../Cityscapes-PanopticSegmentation/Base-PanopticDeepLab-OS16.yaml
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdetectron2://DeepLab/R-103.pkl[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;242m# WEIGHTS: "./relations_output_seg_transformer_resnet50/model_best.pth"[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m123.675[39m,[38;5;15m [39m[38;5;15m116.280[39m,[38;5;15m [39m[38;5;15m103.530[39m]
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m58.395[39m,[38;5;15m [39m[38;5;15m57.120[39m,[38;5;15m [39m[38;5;15m57.375[39m]
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbuild_resnet_deeplab_backbone[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m,[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m,[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m]
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m1[39m,[38;5;15m [39m[38;5;15m2[39m,[38;5;15m [39m[38;5;15m4[39m]
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdeeplab[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mFalse
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mLOSS_TOP_K[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mSTUFF_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m41
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mPREDICT_INSTANCES[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m  [39m[38;5;197mPSG_RELATION_NET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENCODER_DEPTH[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mTOTAL_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39m56
[38;5;15m    [39m[38;5;197mTOTAL_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m[38;5;15m [39m("psg_train",)
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m[38;5;15m [39m("psg_val",)
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m5e-4
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mRGB[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mGAUSSIAN_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;81m!!python/object/apply:eval[39m[38;5;15m [39m[[38;5;186m"[39m[38;5;186m[int(x[39m[38;5;15m [39m[38;5;186m*[39m[38;5;15m [39m[38;5;186m0.1[39m[38;5;15m [39m[38;5;186m*[39m[38;5;15m [39m[38;5;186m640)[39m[38;5;15m [39m[38;5;186mfor[39m[38;5;15m [39m[38;5;186mx[39m[38;5;15m [39m[38;5;186min[39m[38;5;15m [39m[38;5;186mrange(5,[39m[38;5;15m [39m[38;5;186m16)][39m[38;5;186m"[39m]
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mchoice[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mabsolute[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m(640, 1024)
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m./relations_output_seg_transformer_resnet101[39m[38;5;186m"[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m

[10/09 20:57:27] detectron2 INFO: Running with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m10
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39mTrainingSampler
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mpsg_val
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mpsg_train
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSINGLE_CATEGORY_MAX_AREA[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m640
[38;5;15m    [39m-[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39mabsolute
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39mRGB
[38;5;15m  [39m[38;5;197mGAUSSIAN_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mIGNORE_CROWD_IN_SEMANTIC[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mIGNORE_STUFF_IN_OFFSET[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39mpolygon
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m320
[38;5;15m  [39m-[38;5;15m [39m384
[38;5;15m  [39m-[38;5;15m [39m448
[38;5;15m  [39m-[38;5;15m [39m512
[38;5;15m  [39m-[38;5;15m [39m576
[38;5;15m  [39m-[38;5;15m [39m640
[38;5;15m  [39m-[38;5;15m [39m704
[38;5;15m  [39m-[38;5;15m [39m768
[38;5;15m  [39m-[38;5;15m [39m832
[38;5;15m  [39m-[38;5;15m [39m896
[38;5;15m  [39m-[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39mchoice
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39mhorizontal
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m3
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m-90
[38;5;15m      [39m-[38;5;15m [39m0
[38;5;15m      [39m-[38;5;15m [39m90
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m0.5
[38;5;15m      [39m-[38;5;15m [39m1.0
[38;5;15m      [39m-[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mDefaultAnchorGenerator
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m32
[38;5;15m      [39m-[38;5;15m [39m64
[38;5;15m      [39m-[38;5;15m [39m128
[38;5;15m      [39m-[38;5;15m [39m256
[38;5;15m      [39m-[38;5;15m [39m512
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mbuild_resnet_deeplab_backbone
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39mcuda
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39msum
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m  [39m[38;5;197mINS_EMBED_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m6
[38;5;15m    [39m-[38;5;15m [39m12
[38;5;15m    [39m-[38;5;15m [39m18
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mCENTER_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m200.0
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLabInsEmbedHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mSyncBN
[38;5;15m    [39m[38;5;197mOFFSET_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLab
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBENCHMARK_NETWORK_SPEED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCENTER_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m41
[38;5;15m    [39m[38;5;197mPREDICT_INSTANCES[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mSTUFF_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mTOP_K_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m123.675
[38;5;15m  [39m-[38;5;15m [39m116.28
[38;5;15m  [39m-[38;5;15m [39m103.53
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m58.395
[38;5;15m  [39m-[38;5;15m [39m57.12
[38;5;15m  [39m-[38;5;15m [39m57.375
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRPN
[38;5;15m  [39m[38;5;197mPSG_RELATION_NET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mENCODER_DEPTH[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mFEATURE_NAME_LIST[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPSGRelationNet
[38;5;15m    [39m[38;5;197mTOTAL_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mTOTAL_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39m56
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mFrozenBN
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mRES4_DILATION[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m-[38;5;15m [39m2
[38;5;15m    [39m-[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39mdeeplab
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m-[38;5;15m [39mp6
[38;5;15m    [39m-[38;5;15m [39mp7
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.4
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m-[38;5;15m [39m0.6
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m50
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRes5ROIHeads
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mKRCNNConvDeconvUpsampleHead
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m17
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mMaskRCNNConvUpsampleHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39mStandardRPNHead
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.3
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m6000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m12000
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m6
[38;5;15m    [39m-[38;5;15m [39m12
[38;5;15m    [39m-[38;5;15m [39m18
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m255
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mLOSS_TOP_K[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mLOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39mhard_pixel_mining
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLabSemSegHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mSyncBN
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39mdetectron2://DeepLab/R-103.pkl
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m./relations_output_seg_transformer_resnet101
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m0.0005
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39mvalue
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39mWarmupPolyLR
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mNUM_DECAYS[39m[38;5;15m:[39m[38;5;15m [39m3
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39mADAM
[38;5;15m  [39m[38;5;197mPOLY_LR_CONSTANT_ENDING[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mPOLY_LR_POWER[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m  [39m[38;5;197mRESCALE_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m30000
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m0.001
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39mlinear
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m4000
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m400
[38;5;15m    [39m-[38;5;15m [39m500
[38;5;15m    [39m-[38;5;15m [39m600
[38;5;15m    [39m-[38;5;15m [39m700
[38;5;15m    [39m-[38;5;15m [39m800
[38;5;15m    [39m-[38;5;15m [39m900
[38;5;15m    [39m-[38;5;15m [39m1000
[38;5;15m    [39m-[38;5;15m [39m1100
[38;5;15m    [39m-[38;5;15m [39m1200
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m100
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m0

[10/09 20:57:27] detectron2 INFO: Full config saved to ./relations_output_seg_transformer_resnet101/config.yaml
[10/09 20:57:27] d2.utils.env INFO: Using a generated random seed 27477693
[10/09 20:57:31] d2.engine.defaults INFO: Model:
PanopticDeepLab(
  (backbone): ResNet(
    (stem): DeepLabStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
      )
      (conv3): Conv2d(
        64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv1): Conv2d(
          128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): SyncBatchNorm(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): SyncBatchNorm(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 64), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 133, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): SyncBatchNorm(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): SyncBatchNorm(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 64), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
  (psg_relation_net): PSGRelationNet(
    (map_dict): ModuleDict(
      (res3): Linear(in_features=512, out_features=256, bias=True)
      (res5): Linear(in_features=2048, out_features=256, bias=True)
    )
    (tf_encoder): Transformer(
      (blocks): ModuleList(
        (0): Block(
          (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=256, out_features=768, bias=False)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=768, bias=True)
            (act): GELU(approximate=none)
            (fc2): Linear(in_features=768, out_features=256, bias=True)
            (drop): Dropout(p=0.0, inplace=False)
          )
        )
      )
      (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (pos_drop): Dropout(p=0.0, inplace=False)
    )
    (tf_decoder): Attention(
      (qkv): Linear(in_features=256, out_features=512, bias=True)
      (attn_drop): Dropout(p=0.0, inplace=False)
      (proj_cls): Linear(in_features=256, out_features=256, bias=True)
      (proj_rel): Linear(in_features=256, out_features=256, bias=True)
      (proj_drop): Dropout(p=0.0, inplace=False)
    )
    (cls_fc): Linear(in_features=256, out_features=1, bias=True)
    (rel_fc): Linear(in_features=256, out_features=1, bias=True)
  )
)
[10/09 20:57:31] d2.projects.panoptic_deeplab.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960), max_size=960, sample_style='choice'), RandomCrop(crop_type='absolute', crop_size=[640, 1024]), RandomFlip()]
[10/09 20:57:32] d2.data.build INFO: Removed 0 images with no usable annotations. 4500 images left.
[10/09 20:57:32] d2.data.build INFO: Distribution of instances among all 133 categories:
[36m|   category    | #instances   |   category    | #instances   |   category    | #instances   |
|:-------------:|:-------------|:-------------:|:-------------|:-------------:|:-------------|
|    person     | 25660        |    bicycle    | 913          |      car      | 3591         |
|  motorcycle   | 866          |   airplane    | 89           |      bus      | 433          |
|     train     | 179          |     truck     | 537          |     boat      | 269          |
| traffic light | 883          | fire hydrant  | 59           |   stop sign   | 70           |
| parking meter | 75           |     bench     | 805          |     bird      | 420          |
|      cat      | 65           |      dog      | 267          |     horse     | 478          |
|     sheep     | 415          |      cow      | 448          |   elephant    | 219          |
|     bear      | 29           |     zebra     | 137          |    giraffe    | 140          |
|   backpack    | 1070         |   umbrella    | 1038         |    handbag    | 1651         |
|      tie      | 447          |   suitcase    | 359          |    frisbee    | 218          |
|     skis      | 220          |   snowboard   | 98           |  sports ball  | 805          |
|     kite      | 544          | baseball bat  | 512          | baseball gl.. | 621          |
|  skateboard   | 442          |   surfboard   | 257          | tennis racket | 490          |
|    bottle     | 691          |  wine glass   | 257          |      cup      | 573          |
|     fork      | 105          |     knife     | 188          |     spoon     | 90           |
|     bowl      | 229          |    banana     | 157          |     apple     | 73           |
|   sandwich    | 42           |    orange     | 71           |   broccoli    | 9            |
|    carrot     | 52           |    hot dog    | 55           |     pizza     | 130          |
|     donut     | 104          |     cake      | 134          |     chair     | 2464         |
|     couch     | 169          | potted plant  | 313          |      bed      | 52           |
| dining table  | 444          |    toilet     | 24           |      tv       | 151          |
|    laptop     | 201          |     mouse     | 34           |    remote     | 239          |
|   keyboard    | 26           |  cell phone   | 501          |   microwave   | 14           |
|     oven      | 28           |    toaster    | 0            |     sink      | 23           |
| refrigerator  | 30           |     book      | 431          |     clock     | 168          |
|     vase      | 54           |   scissors    | 17           |  teddy bear   | 88           |
|  hair drier   | 5            |  toothbrush   | 28           |    banner     | 431          |
|    blanket    | 49           |    bridge     | 84           |   cardboard   | 115          |
|    counter    | 56           |    curtain    | 121          |  door-stuff   | 283          |
|  floor-wood   | 148          |    flower     | 118          |     fruit     | 29           |
|    gravel     | 112          |     house     | 349          |     light     | 481          |
| mirror-stuff  | 66           |      net      | 140          |    pillow     | 46           |
|   platform    | 132          | playingfield  | 699          |   railroad    | 128          |
|     river     | 66           |     road      | 1178         |     roof      | 286          |
|     sand      | 295          |      sea      | 228          |     shelf     | 91           |
|     snow      | 146          |    stairs     | 237          |     tent      | 149          |
|     towel     | 53           |  wall-brick   | 281          |  wall-stone   | 90           |
|   wall-tile   | 88           |   wall-wood   | 181          |  water-other  | 67           |
| window-blind  | 66           | window-other  | 565          |  tree-merged  | 2047         |
| fence-merged  | 1051         | ceiling-mer.. | 409          | sky-other-m.. | 1874         |
| cabinet-mer.. | 105          | table-merged  | 321          | floor-other.. | 474          |
| pavement-me.. | 1437         | mountain-me.. | 287          | grass-merged  | 1186         |
|  dirt-merged  | 638          | paper-merged  | 283          | food-other-.. | 118          |
| building-ot.. | 1578         |  rock-merged  | 155          | wall-other-.. | 1685         |
|  rug-merged   | 203          |               |              |               |              |
|     total     | 75788        |               |              |               |              |[0m
[10/09 20:57:32] d2.data.build INFO: Using training sampler TrainingSampler
[10/09 20:57:32] d2.data.common INFO: Serializing 4500 elements to byte tensors and concatenating them all ...
[10/09 20:57:32] d2.data.common INFO: Serialized dataset takes 8.84 MiB
[10/09 20:57:32] fvcore.common.checkpoint INFO: [Checkpointer] Loading from detectron2://DeepLab/R-103.pkl ...
[10/09 20:57:32] fvcore.common.checkpoint INFO: Reading a file from 'torchvision'
[10/09 20:57:32] d2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                               | Shapes                                          |
|:------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,128,1,1)            |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,128,1,1)       |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4.10.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4.10.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4.10.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4.11.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4.11.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4.11.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4.12.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4.12.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4.12.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4.13.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4.13.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4.13.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4.14.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4.14.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4.14.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4.15.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4.15.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4.15.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4.16.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4.16.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4.16.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4.17.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4.17.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4.17.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4.18.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4.18.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4.18.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4.19.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4.19.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4.19.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4.20.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4.20.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4.20.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4.21.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4.21.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4.21.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4.22.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4.22.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4.22.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4.6.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4.6.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4.6.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4.7.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4.7.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4.7.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4.8.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4.8.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4.8.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4.9.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4.9.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4.9.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,3,3)              |
| stem.conv2.*      | stem.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| stem.conv3.*      | stem.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (128,) (128,) (128,) (128,) (128,64,3,3)        |
[10/09 20:57:32] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mins_embed_head.center_head.0.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.center_head.0.weight[0m
[34mins_embed_head.center_head.1.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.center_head.1.weight[0m
[34mins_embed_head.center_predictor.{bias, weight}[0m
[34mins_embed_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res2.fuse_conv.depthwise.weight[0m
[34mins_embed_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res2.fuse_conv.pointwise.weight[0m
[34mins_embed_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res2.project_conv.weight[0m
[34mins_embed_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res3.fuse_conv.depthwise.weight[0m
[34mins_embed_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res3.fuse_conv.pointwise.weight[0m
[34mins_embed_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res3.project_conv.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.0.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.1.depthwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.1.pointwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.2.depthwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.2.pointwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.3.depthwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.3.pointwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.4.1.{bias, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.project.weight[0m
[34mins_embed_head.offset_head.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.offset_head.depthwise.weight[0m
[34mins_embed_head.offset_head.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.offset_head.pointwise.weight[0m
[34mins_embed_head.offset_predictor.{bias, weight}[0m
[34mpsg_relation_net.cls_fc.{bias, weight}[0m
[34mpsg_relation_net.map_dict.res3.{bias, weight}[0m
[34mpsg_relation_net.map_dict.res5.{bias, weight}[0m
[34mpsg_relation_net.rel_fc.{bias, weight}[0m
[34mpsg_relation_net.tf_decoder.proj_cls.{bias, weight}[0m
[34mpsg_relation_net.tf_decoder.proj_rel.{bias, weight}[0m
[34mpsg_relation_net.tf_decoder.qkv.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.attn.proj.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.attn.qkv.weight[0m
[34mpsg_relation_net.tf_encoder.blocks.0.mlp.fc1.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.mlp.fc2.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.norm1.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.norm2.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.norm.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.pos_embed[0m
[34mpsg_relation_net.{Q_cls, Q_rel}[0m
[34msem_seg_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res2.fuse_conv.depthwise.weight[0m
[34msem_seg_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res2.fuse_conv.pointwise.weight[0m
[34msem_seg_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res2.project_conv.weight[0m
[34msem_seg_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res3.fuse_conv.depthwise.weight[0m
[34msem_seg_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res3.fuse_conv.pointwise.weight[0m
[34msem_seg_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res3.project_conv.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.0.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.1.depthwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.1.pointwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.2.depthwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.2.pointwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.3.depthwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.3.pointwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.4.1.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.project.weight[0m
[34msem_seg_head.head.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.head.depthwise.weight[0m
[34msem_seg_head.head.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.head.pointwise.weight[0m
[34msem_seg_head.predictor.{bias, weight}[0m
[10/09 20:57:32] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mres2.0.conv1.norm.num_batches_tracked[0m
  [35mres2.0.conv2.norm.num_batches_tracked[0m
  [35mres2.0.conv3.norm.num_batches_tracked[0m
  [35mres2.0.shortcut.norm.num_batches_tracked[0m
  [35mres2.1.conv1.norm.num_batches_tracked[0m
  [35mres2.1.conv2.norm.num_batches_tracked[0m
  [35mres2.1.conv3.norm.num_batches_tracked[0m
  [35mres2.2.conv1.norm.num_batches_tracked[0m
  [35mres2.2.conv2.norm.num_batches_tracked[0m
  [35mres2.2.conv3.norm.num_batches_tracked[0m
  [35mres3.0.conv1.norm.num_batches_tracked[0m
  [35mres3.0.conv2.norm.num_batches_tracked[0m
  [35mres3.0.conv3.norm.num_batches_tracked[0m
  [35mres3.0.shortcut.norm.num_batches_tracked[0m
  [35mres3.1.conv1.norm.num_batches_tracked[0m
  [35mres3.1.conv2.norm.num_batches_tracked[0m
  [35mres3.1.conv3.norm.num_batches_tracked[0m
  [35mres3.2.conv1.norm.num_batches_tracked[0m
  [35mres3.2.conv2.norm.num_batches_tracked[0m
  [35mres3.2.conv3.norm.num_batches_tracked[0m
  [35mres3.3.conv1.norm.num_batches_tracked[0m
  [35mres3.3.conv2.norm.num_batches_tracked[0m
  [35mres3.3.conv3.norm.num_batches_tracked[0m
  [35mres4.0.conv1.norm.num_batches_tracked[0m
  [35mres4.0.conv2.norm.num_batches_tracked[0m
  [35mres4.0.conv3.norm.num_batches_tracked[0m
  [35mres4.0.shortcut.norm.num_batches_tracked[0m
  [35mres4.1.conv1.norm.num_batches_tracked[0m
  [35mres4.1.conv2.norm.num_batches_tracked[0m
  [35mres4.1.conv3.norm.num_batches_tracked[0m
  [35mres4.10.conv1.norm.num_batches_tracked[0m
  [35mres4.10.conv2.norm.num_batches_tracked[0m
  [35mres4.10.conv3.norm.num_batches_tracked[0m
  [35mres4.11.conv1.norm.num_batches_tracked[0m
  [35mres4.11.conv2.norm.num_batches_tracked[0m
  [35mres4.11.conv3.norm.num_batches_tracked[0m
  [35mres4.12.conv1.norm.num_batches_tracked[0m
  [35mres4.12.conv2.norm.num_batches_tracked[0m
  [35mres4.12.conv3.norm.num_batches_tracked[0m
  [35mres4.13.conv1.norm.num_batches_tracked[0m
  [35mres4.13.conv2.norm.num_batches_tracked[0m
  [35mres4.13.conv3.norm.num_batches_tracked[0m
  [35mres4.14.conv1.norm.num_batches_tracked[0m
  [35mres4.14.conv2.norm.num_batches_tracked[0m
  [35mres4.14.conv3.norm.num_batches_tracked[0m
  [35mres4.15.conv1.norm.num_batches_tracked[0m
  [35mres4.15.conv2.norm.num_batches_tracked[0m
  [35mres4.15.conv3.norm.num_batches_tracked[0m
  [35mres4.16.conv1.norm.num_batches_tracked[0m
  [35mres4.16.conv2.norm.num_batches_tracked[0m
  [35mres4.16.conv3.norm.num_batches_tracked[0m
  [35mres4.17.conv1.norm.num_batches_tracked[0m
  [35mres4.17.conv2.norm.num_batches_tracked[0m
  [35mres4.17.conv3.norm.num_batches_tracked[0m
  [35mres4.18.conv1.norm.num_batches_tracked[0m
  [35mres4.18.conv2.norm.num_batches_tracked[0m
  [35mres4.18.conv3.norm.num_batches_tracked[0m
  [35mres4.19.conv1.norm.num_batches_tracked[0m
  [35mres4.19.conv2.norm.num_batches_tracked[0m
  [35mres4.19.conv3.norm.num_batches_tracked[0m
  [35mres4.2.conv1.norm.num_batches_tracked[0m
  [35mres4.2.conv2.norm.num_batches_tracked[0m
  [35mres4.2.conv3.norm.num_batches_tracked[0m
  [35mres4.20.conv1.norm.num_batches_tracked[0m
  [35mres4.20.conv2.norm.num_batches_tracked[0m
  [35mres4.20.conv3.norm.num_batches_tracked[0m
  [35mres4.21.conv1.norm.num_batches_tracked[0m
  [35mres4.21.conv2.norm.num_batches_tracked[0m
  [35mres4.21.conv3.norm.num_batches_tracked[0m
  [35mres4.22.conv1.norm.num_batches_tracked[0m
  [35mres4.22.conv2.norm.num_batches_tracked[0m
  [35mres4.22.conv3.norm.num_batches_tracked[0m
  [35mres4.3.conv1.norm.num_batches_tracked[0m
  [35mres4.3.conv2.norm.num_batches_tracked[0m
  [35mres4.3.conv3.norm.num_batches_tracked[0m
  [35mres4.4.conv1.norm.num_batches_tracked[0m
  [35mres4.4.conv2.norm.num_batches_tracked[0m
  [35mres4.4.conv3.norm.num_batches_tracked[0m
  [35mres4.5.conv1.norm.num_batches_tracked[0m
  [35mres4.5.conv2.norm.num_batches_tracked[0m
  [35mres4.5.conv3.norm.num_batches_tracked[0m
  [35mres4.6.conv1.norm.num_batches_tracked[0m
  [35mres4.6.conv2.norm.num_batches_tracked[0m
  [35mres4.6.conv3.norm.num_batches_tracked[0m
  [35mres4.7.conv1.norm.num_batches_tracked[0m
  [35mres4.7.conv2.norm.num_batches_tracked[0m
  [35mres4.7.conv3.norm.num_batches_tracked[0m
  [35mres4.8.conv1.norm.num_batches_tracked[0m
  [35mres4.8.conv2.norm.num_batches_tracked[0m
  [35mres4.8.conv3.norm.num_batches_tracked[0m
  [35mres4.9.conv1.norm.num_batches_tracked[0m
  [35mres4.9.conv2.norm.num_batches_tracked[0m
  [35mres4.9.conv3.norm.num_batches_tracked[0m
  [35mres5.0.conv1.norm.num_batches_tracked[0m
  [35mres5.0.conv2.norm.num_batches_tracked[0m
  [35mres5.0.conv3.norm.num_batches_tracked[0m
  [35mres5.0.shortcut.norm.num_batches_tracked[0m
  [35mres5.1.conv1.norm.num_batches_tracked[0m
  [35mres5.1.conv2.norm.num_batches_tracked[0m
  [35mres5.1.conv3.norm.num_batches_tracked[0m
  [35mres5.2.conv1.norm.num_batches_tracked[0m
  [35mres5.2.conv2.norm.num_batches_tracked[0m
  [35mres5.2.conv3.norm.num_batches_tracked[0m
  [35mstem.conv1.norm.num_batches_tracked[0m
  [35mstem.conv2.norm.num_batches_tracked[0m
  [35mstem.conv3.norm.num_batches_tracked[0m
  [35mstem.fc.{bias, weight}[0m
[10/09 20:57:32] d2.engine.train_loop INFO: Starting training from iteration 0
[10/09 20:57:47] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/root/Projects/detectron2/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/root/Projects/detectron2/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/root/Projects/detectron2/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/root/miniconda3/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1008, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 969, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/root/miniconda3/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/Projects/detectron2/projects/Panoptic-DeepLab/panoptic_deeplab/panoptic_seg.py", line 146, in forward
    sem_seg_results, sem_seg_losses = self.sem_seg_head(features, targets, weights)
  File "/root/miniconda3/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/Projects/detectron2/projects/Panoptic-DeepLab/panoptic_deeplab/panoptic_seg.py", line 422, in forward
    y = self.layers(features)
  File "/root/Projects/detectron2/projects/Panoptic-DeepLab/panoptic_deeplab/panoptic_seg.py", line 433, in layers
    y = super().layers(features)
  File "/root/Projects/detectron2/projects/DeepLab/deeplab/semantic_seg.py", line 241, in layers
    proj_x = self.decoder[f]["project_conv"](x)
  File "/root/miniconda3/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/Projects/detectron2/detectron2/layers/aspp.py", line 133, in forward
    raise ValueError(
ValueError: `pool_kernel_size` must be divisible by the shape of inputs. Input size: torch.Size([40, 80]) `pool_kernel_size`: (40, 64)
[10/09 20:57:47] d2.engine.hooks INFO: Total training time: 0:00:15 (0:00:00 on hooks)
[10/09 20:57:47] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 10782M
[10/09 21:01:09] detectron2 INFO: Rank of current process: 0. World size: 2
[10/09 21:01:10] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.3
detectron2              0.6 @/root/Projects/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.1
detectron2 arch flags   8.6
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.12.0+cu113 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 Tesla V100S-PCIE-32GB (arch=7.0)
Driver version          470.82.00
CUDA_HOME               /usr/local/cuda
Pillow                  9.1.1
torchvision             0.13.0+cu113 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[10/09 21:01:10] detectron2 INFO: Command line arguments: Namespace(config_file='configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv_custom.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/09 21:01:10] detectron2 INFO: Contents of args.config_file=configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv_custom.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m../Cityscapes-PanopticSegmentation/Base-PanopticDeepLab-OS16.yaml
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdetectron2://DeepLab/R-103.pkl[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;242m# WEIGHTS: "./relations_output_seg_transformer_resnet50/model_best.pth"[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m123.675[39m,[38;5;15m [39m[38;5;15m116.280[39m,[38;5;15m [39m[38;5;15m103.530[39m]
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m58.395[39m,[38;5;15m [39m[38;5;15m57.120[39m,[38;5;15m [39m[38;5;15m57.375[39m]
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbuild_resnet_deeplab_backbone[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m,[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m,[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m]
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m1[39m,[38;5;15m [39m[38;5;15m2[39m,[38;5;15m [39m[38;5;15m4[39m]
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdeeplab[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mFalse
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mLOSS_TOP_K[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mSTUFF_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m41
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mPREDICT_INSTANCES[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m  [39m[38;5;197mPSG_RELATION_NET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENCODER_DEPTH[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mTOTAL_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39m56
[38;5;15m    [39m[38;5;197mTOTAL_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m[38;5;15m [39m("psg_train",)
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m[38;5;15m [39m("psg_val",)
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m5e-4
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mRGB[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mGAUSSIAN_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;81m!!python/object/apply:eval[39m[38;5;15m [39m[[38;5;186m"[39m[38;5;186m[int(x[39m[38;5;15m [39m[38;5;186m*[39m[38;5;15m [39m[38;5;186m0.1[39m[38;5;15m [39m[38;5;186m*[39m[38;5;15m [39m[38;5;186m640)[39m[38;5;15m [39m[38;5;186mfor[39m[38;5;15m [39m[38;5;186mx[39m[38;5;15m [39m[38;5;186min[39m[38;5;15m [39m[38;5;186mrange(5,[39m[38;5;15m [39m[38;5;186m16)][39m[38;5;186m"[39m]
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mchoice[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mabsolute[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m(640, 1280)
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m./relations_output_seg_transformer_resnet101[39m[38;5;186m"[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m

[10/09 21:01:10] detectron2 INFO: Running with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m10
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39mTrainingSampler
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mpsg_val
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mpsg_train
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSINGLE_CATEGORY_MAX_AREA[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m640
[38;5;15m    [39m-[38;5;15m [39m1280
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39mabsolute
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39mRGB
[38;5;15m  [39m[38;5;197mGAUSSIAN_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mIGNORE_CROWD_IN_SEMANTIC[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mIGNORE_STUFF_IN_OFFSET[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39mpolygon
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m320
[38;5;15m  [39m-[38;5;15m [39m384
[38;5;15m  [39m-[38;5;15m [39m448
[38;5;15m  [39m-[38;5;15m [39m512
[38;5;15m  [39m-[38;5;15m [39m576
[38;5;15m  [39m-[38;5;15m [39m640
[38;5;15m  [39m-[38;5;15m [39m704
[38;5;15m  [39m-[38;5;15m [39m768
[38;5;15m  [39m-[38;5;15m [39m832
[38;5;15m  [39m-[38;5;15m [39m896
[38;5;15m  [39m-[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39mchoice
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39mhorizontal
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m3
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m-90
[38;5;15m      [39m-[38;5;15m [39m0
[38;5;15m      [39m-[38;5;15m [39m90
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m0.5
[38;5;15m      [39m-[38;5;15m [39m1.0
[38;5;15m      [39m-[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mDefaultAnchorGenerator
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m32
[38;5;15m      [39m-[38;5;15m [39m64
[38;5;15m      [39m-[38;5;15m [39m128
[38;5;15m      [39m-[38;5;15m [39m256
[38;5;15m      [39m-[38;5;15m [39m512
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mbuild_resnet_deeplab_backbone
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39mcuda
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39msum
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m  [39m[38;5;197mINS_EMBED_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m6
[38;5;15m    [39m-[38;5;15m [39m12
[38;5;15m    [39m-[38;5;15m [39m18
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mCENTER_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m200.0
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLabInsEmbedHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mSyncBN
[38;5;15m    [39m[38;5;197mOFFSET_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLab
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBENCHMARK_NETWORK_SPEED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCENTER_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m41
[38;5;15m    [39m[38;5;197mPREDICT_INSTANCES[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mSTUFF_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mTOP_K_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m123.675
[38;5;15m  [39m-[38;5;15m [39m116.28
[38;5;15m  [39m-[38;5;15m [39m103.53
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m58.395
[38;5;15m  [39m-[38;5;15m [39m57.12
[38;5;15m  [39m-[38;5;15m [39m57.375
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRPN
[38;5;15m  [39m[38;5;197mPSG_RELATION_NET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mENCODER_DEPTH[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mFEATURE_NAME_LIST[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPSGRelationNet
[38;5;15m    [39m[38;5;197mTOTAL_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mTOTAL_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39m56
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mFrozenBN
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mRES4_DILATION[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m-[38;5;15m [39m2
[38;5;15m    [39m-[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39mdeeplab
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m-[38;5;15m [39mp6
[38;5;15m    [39m-[38;5;15m [39mp7
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.4
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m-[38;5;15m [39m0.6
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m50
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRes5ROIHeads
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mKRCNNConvDeconvUpsampleHead
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m17
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mMaskRCNNConvUpsampleHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39mStandardRPNHead
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.3
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m6000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m12000
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m6
[38;5;15m    [39m-[38;5;15m [39m12
[38;5;15m    [39m-[38;5;15m [39m18
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m255
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mLOSS_TOP_K[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mLOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39mhard_pixel_mining
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLabSemSegHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mSyncBN
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39mdetectron2://DeepLab/R-103.pkl
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m./relations_output_seg_transformer_resnet101
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m0.0005
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39mvalue
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39mWarmupPolyLR
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mNUM_DECAYS[39m[38;5;15m:[39m[38;5;15m [39m3
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39mADAM
[38;5;15m  [39m[38;5;197mPOLY_LR_CONSTANT_ENDING[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mPOLY_LR_POWER[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m  [39m[38;5;197mRESCALE_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m30000
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m0.001
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39mlinear
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m4000
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m400
[38;5;15m    [39m-[38;5;15m [39m500
[38;5;15m    [39m-[38;5;15m [39m600
[38;5;15m    [39m-[38;5;15m [39m700
[38;5;15m    [39m-[38;5;15m [39m800
[38;5;15m    [39m-[38;5;15m [39m900
[38;5;15m    [39m-[38;5;15m [39m1000
[38;5;15m    [39m-[38;5;15m [39m1100
[38;5;15m    [39m-[38;5;15m [39m1200
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m100
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m0

[10/09 21:01:10] detectron2 INFO: Full config saved to ./relations_output_seg_transformer_resnet101/config.yaml
[10/09 21:01:10] d2.utils.env INFO: Using a generated random seed 11008664
[10/09 21:01:14] d2.engine.defaults INFO: Model:
PanopticDeepLab(
  (backbone): ResNet(
    (stem): DeepLabStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
      )
      (conv3): Conv2d(
        64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv1): Conv2d(
          128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): SyncBatchNorm(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): SyncBatchNorm(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 80), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 133, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): SyncBatchNorm(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): SyncBatchNorm(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 80), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
  (psg_relation_net): PSGRelationNet(
    (map_dict): ModuleDict(
      (res3): Linear(in_features=512, out_features=256, bias=True)
      (res5): Linear(in_features=2048, out_features=256, bias=True)
    )
    (tf_encoder): Transformer(
      (blocks): ModuleList(
        (0): Block(
          (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=256, out_features=768, bias=False)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=768, bias=True)
            (act): GELU(approximate=none)
            (fc2): Linear(in_features=768, out_features=256, bias=True)
            (drop): Dropout(p=0.0, inplace=False)
          )
        )
      )
      (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (pos_drop): Dropout(p=0.0, inplace=False)
    )
    (tf_decoder): Attention(
      (qkv): Linear(in_features=256, out_features=512, bias=True)
      (attn_drop): Dropout(p=0.0, inplace=False)
      (proj_cls): Linear(in_features=256, out_features=256, bias=True)
      (proj_rel): Linear(in_features=256, out_features=256, bias=True)
      (proj_drop): Dropout(p=0.0, inplace=False)
    )
    (cls_fc): Linear(in_features=256, out_features=1, bias=True)
    (rel_fc): Linear(in_features=256, out_features=1, bias=True)
  )
)
[10/09 21:01:14] d2.projects.panoptic_deeplab.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960), max_size=960, sample_style='choice'), RandomCrop(crop_type='absolute', crop_size=[640, 1280]), RandomFlip()]
[10/09 21:01:15] d2.data.build INFO: Removed 0 images with no usable annotations. 4500 images left.
[10/09 21:01:15] d2.data.build INFO: Distribution of instances among all 133 categories:
[36m|   category    | #instances   |   category    | #instances   |   category    | #instances   |
|:-------------:|:-------------|:-------------:|:-------------|:-------------:|:-------------|
|    person     | 25660        |    bicycle    | 913          |      car      | 3591         |
|  motorcycle   | 866          |   airplane    | 89           |      bus      | 433          |
|     train     | 179          |     truck     | 537          |     boat      | 269          |
| traffic light | 883          | fire hydrant  | 59           |   stop sign   | 70           |
| parking meter | 75           |     bench     | 805          |     bird      | 420          |
|      cat      | 65           |      dog      | 267          |     horse     | 478          |
|     sheep     | 415          |      cow      | 448          |   elephant    | 219          |
|     bear      | 29           |     zebra     | 137          |    giraffe    | 140          |
|   backpack    | 1070         |   umbrella    | 1038         |    handbag    | 1651         |
|      tie      | 447          |   suitcase    | 359          |    frisbee    | 218          |
|     skis      | 220          |   snowboard   | 98           |  sports ball  | 805          |
|     kite      | 544          | baseball bat  | 512          | baseball gl.. | 621          |
|  skateboard   | 442          |   surfboard   | 257          | tennis racket | 490          |
|    bottle     | 691          |  wine glass   | 257          |      cup      | 573          |
|     fork      | 105          |     knife     | 188          |     spoon     | 90           |
|     bowl      | 229          |    banana     | 157          |     apple     | 73           |
|   sandwich    | 42           |    orange     | 71           |   broccoli    | 9            |
|    carrot     | 52           |    hot dog    | 55           |     pizza     | 130          |
|     donut     | 104          |     cake      | 134          |     chair     | 2464         |
|     couch     | 169          | potted plant  | 313          |      bed      | 52           |
| dining table  | 444          |    toilet     | 24           |      tv       | 151          |
|    laptop     | 201          |     mouse     | 34           |    remote     | 239          |
|   keyboard    | 26           |  cell phone   | 501          |   microwave   | 14           |
|     oven      | 28           |    toaster    | 0            |     sink      | 23           |
| refrigerator  | 30           |     book      | 431          |     clock     | 168          |
|     vase      | 54           |   scissors    | 17           |  teddy bear   | 88           |
|  hair drier   | 5            |  toothbrush   | 28           |    banner     | 431          |
|    blanket    | 49           |    bridge     | 84           |   cardboard   | 115          |
|    counter    | 56           |    curtain    | 121          |  door-stuff   | 283          |
|  floor-wood   | 148          |    flower     | 118          |     fruit     | 29           |
|    gravel     | 112          |     house     | 349          |     light     | 481          |
| mirror-stuff  | 66           |      net      | 140          |    pillow     | 46           |
|   platform    | 132          | playingfield  | 699          |   railroad    | 128          |
|     river     | 66           |     road      | 1178         |     roof      | 286          |
|     sand      | 295          |      sea      | 228          |     shelf     | 91           |
|     snow      | 146          |    stairs     | 237          |     tent      | 149          |
|     towel     | 53           |  wall-brick   | 281          |  wall-stone   | 90           |
|   wall-tile   | 88           |   wall-wood   | 181          |  water-other  | 67           |
| window-blind  | 66           | window-other  | 565          |  tree-merged  | 2047         |
| fence-merged  | 1051         | ceiling-mer.. | 409          | sky-other-m.. | 1874         |
| cabinet-mer.. | 105          | table-merged  | 321          | floor-other.. | 474          |
| pavement-me.. | 1437         | mountain-me.. | 287          | grass-merged  | 1186         |
|  dirt-merged  | 638          | paper-merged  | 283          | food-other-.. | 118          |
| building-ot.. | 1578         |  rock-merged  | 155          | wall-other-.. | 1685         |
|  rug-merged   | 203          |               |              |               |              |
|     total     | 75788        |               |              |               |              |[0m
[10/09 21:01:15] d2.data.build INFO: Using training sampler TrainingSampler
[10/09 21:01:16] d2.data.common INFO: Serializing 4500 elements to byte tensors and concatenating them all ...
[10/09 21:01:16] d2.data.common INFO: Serialized dataset takes 8.84 MiB
[10/09 21:01:16] fvcore.common.checkpoint INFO: [Checkpointer] Loading from detectron2://DeepLab/R-103.pkl ...
[10/09 21:01:16] fvcore.common.checkpoint INFO: Reading a file from 'torchvision'
[10/09 21:01:16] d2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                               | Shapes                                          |
|:------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,128,1,1)            |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,128,1,1)       |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4.10.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4.10.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4.10.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4.11.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4.11.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4.11.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4.12.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4.12.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4.12.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4.13.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4.13.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4.13.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4.14.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4.14.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4.14.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4.15.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4.15.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4.15.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4.16.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4.16.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4.16.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4.17.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4.17.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4.17.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4.18.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4.18.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4.18.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4.19.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4.19.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4.19.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4.20.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4.20.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4.20.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4.21.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4.21.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4.21.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4.22.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4.22.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4.22.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4.6.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4.6.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4.6.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4.7.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4.7.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4.7.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4.8.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4.8.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4.8.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4.9.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4.9.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4.9.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,3,3)              |
| stem.conv2.*      | stem.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| stem.conv3.*      | stem.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (128,) (128,) (128,) (128,) (128,64,3,3)        |
[10/09 21:01:16] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mins_embed_head.center_head.0.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.center_head.0.weight[0m
[34mins_embed_head.center_head.1.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.center_head.1.weight[0m
[34mins_embed_head.center_predictor.{bias, weight}[0m
[34mins_embed_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res2.fuse_conv.depthwise.weight[0m
[34mins_embed_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res2.fuse_conv.pointwise.weight[0m
[34mins_embed_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res2.project_conv.weight[0m
[34mins_embed_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res3.fuse_conv.depthwise.weight[0m
[34mins_embed_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res3.fuse_conv.pointwise.weight[0m
[34mins_embed_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res3.project_conv.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.0.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.1.depthwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.1.pointwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.2.depthwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.2.pointwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.3.depthwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.3.pointwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.4.1.{bias, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.project.weight[0m
[34mins_embed_head.offset_head.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.offset_head.depthwise.weight[0m
[34mins_embed_head.offset_head.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.offset_head.pointwise.weight[0m
[34mins_embed_head.offset_predictor.{bias, weight}[0m
[34mpsg_relation_net.cls_fc.{bias, weight}[0m
[34mpsg_relation_net.map_dict.res3.{bias, weight}[0m
[34mpsg_relation_net.map_dict.res5.{bias, weight}[0m
[34mpsg_relation_net.rel_fc.{bias, weight}[0m
[34mpsg_relation_net.tf_decoder.proj_cls.{bias, weight}[0m
[34mpsg_relation_net.tf_decoder.proj_rel.{bias, weight}[0m
[34mpsg_relation_net.tf_decoder.qkv.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.attn.proj.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.attn.qkv.weight[0m
[34mpsg_relation_net.tf_encoder.blocks.0.mlp.fc1.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.mlp.fc2.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.norm1.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.norm2.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.norm.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.pos_embed[0m
[34mpsg_relation_net.{Q_cls, Q_rel}[0m
[34msem_seg_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res2.fuse_conv.depthwise.weight[0m
[34msem_seg_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res2.fuse_conv.pointwise.weight[0m
[34msem_seg_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res2.project_conv.weight[0m
[34msem_seg_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res3.fuse_conv.depthwise.weight[0m
[34msem_seg_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res3.fuse_conv.pointwise.weight[0m
[34msem_seg_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res3.project_conv.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.0.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.1.depthwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.1.pointwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.2.depthwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.2.pointwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.3.depthwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.3.pointwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.4.1.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.project.weight[0m
[34msem_seg_head.head.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.head.depthwise.weight[0m
[34msem_seg_head.head.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.head.pointwise.weight[0m
[34msem_seg_head.predictor.{bias, weight}[0m
[10/09 21:01:16] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mres2.0.conv1.norm.num_batches_tracked[0m
  [35mres2.0.conv2.norm.num_batches_tracked[0m
  [35mres2.0.conv3.norm.num_batches_tracked[0m
  [35mres2.0.shortcut.norm.num_batches_tracked[0m
  [35mres2.1.conv1.norm.num_batches_tracked[0m
  [35mres2.1.conv2.norm.num_batches_tracked[0m
  [35mres2.1.conv3.norm.num_batches_tracked[0m
  [35mres2.2.conv1.norm.num_batches_tracked[0m
  [35mres2.2.conv2.norm.num_batches_tracked[0m
  [35mres2.2.conv3.norm.num_batches_tracked[0m
  [35mres3.0.conv1.norm.num_batches_tracked[0m
  [35mres3.0.conv2.norm.num_batches_tracked[0m
  [35mres3.0.conv3.norm.num_batches_tracked[0m
  [35mres3.0.shortcut.norm.num_batches_tracked[0m
  [35mres3.1.conv1.norm.num_batches_tracked[0m
  [35mres3.1.conv2.norm.num_batches_tracked[0m
  [35mres3.1.conv3.norm.num_batches_tracked[0m
  [35mres3.2.conv1.norm.num_batches_tracked[0m
  [35mres3.2.conv2.norm.num_batches_tracked[0m
  [35mres3.2.conv3.norm.num_batches_tracked[0m
  [35mres3.3.conv1.norm.num_batches_tracked[0m
  [35mres3.3.conv2.norm.num_batches_tracked[0m
  [35mres3.3.conv3.norm.num_batches_tracked[0m
  [35mres4.0.conv1.norm.num_batches_tracked[0m
  [35mres4.0.conv2.norm.num_batches_tracked[0m
  [35mres4.0.conv3.norm.num_batches_tracked[0m
  [35mres4.0.shortcut.norm.num_batches_tracked[0m
  [35mres4.1.conv1.norm.num_batches_tracked[0m
  [35mres4.1.conv2.norm.num_batches_tracked[0m
  [35mres4.1.conv3.norm.num_batches_tracked[0m
  [35mres4.10.conv1.norm.num_batches_tracked[0m
  [35mres4.10.conv2.norm.num_batches_tracked[0m
  [35mres4.10.conv3.norm.num_batches_tracked[0m
  [35mres4.11.conv1.norm.num_batches_tracked[0m
  [35mres4.11.conv2.norm.num_batches_tracked[0m
  [35mres4.11.conv3.norm.num_batches_tracked[0m
  [35mres4.12.conv1.norm.num_batches_tracked[0m
  [35mres4.12.conv2.norm.num_batches_tracked[0m
  [35mres4.12.conv3.norm.num_batches_tracked[0m
  [35mres4.13.conv1.norm.num_batches_tracked[0m
  [35mres4.13.conv2.norm.num_batches_tracked[0m
  [35mres4.13.conv3.norm.num_batches_tracked[0m
  [35mres4.14.conv1.norm.num_batches_tracked[0m
  [35mres4.14.conv2.norm.num_batches_tracked[0m
  [35mres4.14.conv3.norm.num_batches_tracked[0m
  [35mres4.15.conv1.norm.num_batches_tracked[0m
  [35mres4.15.conv2.norm.num_batches_tracked[0m
  [35mres4.15.conv3.norm.num_batches_tracked[0m
  [35mres4.16.conv1.norm.num_batches_tracked[0m
  [35mres4.16.conv2.norm.num_batches_tracked[0m
  [35mres4.16.conv3.norm.num_batches_tracked[0m
  [35mres4.17.conv1.norm.num_batches_tracked[0m
  [35mres4.17.conv2.norm.num_batches_tracked[0m
  [35mres4.17.conv3.norm.num_batches_tracked[0m
  [35mres4.18.conv1.norm.num_batches_tracked[0m
  [35mres4.18.conv2.norm.num_batches_tracked[0m
  [35mres4.18.conv3.norm.num_batches_tracked[0m
  [35mres4.19.conv1.norm.num_batches_tracked[0m
  [35mres4.19.conv2.norm.num_batches_tracked[0m
  [35mres4.19.conv3.norm.num_batches_tracked[0m
  [35mres4.2.conv1.norm.num_batches_tracked[0m
  [35mres4.2.conv2.norm.num_batches_tracked[0m
  [35mres4.2.conv3.norm.num_batches_tracked[0m
  [35mres4.20.conv1.norm.num_batches_tracked[0m
  [35mres4.20.conv2.norm.num_batches_tracked[0m
  [35mres4.20.conv3.norm.num_batches_tracked[0m
  [35mres4.21.conv1.norm.num_batches_tracked[0m
  [35mres4.21.conv2.norm.num_batches_tracked[0m
  [35mres4.21.conv3.norm.num_batches_tracked[0m
  [35mres4.22.conv1.norm.num_batches_tracked[0m
  [35mres4.22.conv2.norm.num_batches_tracked[0m
  [35mres4.22.conv3.norm.num_batches_tracked[0m
  [35mres4.3.conv1.norm.num_batches_tracked[0m
  [35mres4.3.conv2.norm.num_batches_tracked[0m
  [35mres4.3.conv3.norm.num_batches_tracked[0m
  [35mres4.4.conv1.norm.num_batches_tracked[0m
  [35mres4.4.conv2.norm.num_batches_tracked[0m
  [35mres4.4.conv3.norm.num_batches_tracked[0m
  [35mres4.5.conv1.norm.num_batches_tracked[0m
  [35mres4.5.conv2.norm.num_batches_tracked[0m
  [35mres4.5.conv3.norm.num_batches_tracked[0m
  [35mres4.6.conv1.norm.num_batches_tracked[0m
  [35mres4.6.conv2.norm.num_batches_tracked[0m
  [35mres4.6.conv3.norm.num_batches_tracked[0m
  [35mres4.7.conv1.norm.num_batches_tracked[0m
  [35mres4.7.conv2.norm.num_batches_tracked[0m
  [35mres4.7.conv3.norm.num_batches_tracked[0m
  [35mres4.8.conv1.norm.num_batches_tracked[0m
  [35mres4.8.conv2.norm.num_batches_tracked[0m
  [35mres4.8.conv3.norm.num_batches_tracked[0m
  [35mres4.9.conv1.norm.num_batches_tracked[0m
  [35mres4.9.conv2.norm.num_batches_tracked[0m
  [35mres4.9.conv3.norm.num_batches_tracked[0m
  [35mres5.0.conv1.norm.num_batches_tracked[0m
  [35mres5.0.conv2.norm.num_batches_tracked[0m
  [35mres5.0.conv3.norm.num_batches_tracked[0m
  [35mres5.0.shortcut.norm.num_batches_tracked[0m
  [35mres5.1.conv1.norm.num_batches_tracked[0m
  [35mres5.1.conv2.norm.num_batches_tracked[0m
  [35mres5.1.conv3.norm.num_batches_tracked[0m
  [35mres5.2.conv1.norm.num_batches_tracked[0m
  [35mres5.2.conv2.norm.num_batches_tracked[0m
  [35mres5.2.conv3.norm.num_batches_tracked[0m
  [35mstem.conv1.norm.num_batches_tracked[0m
  [35mstem.conv2.norm.num_batches_tracked[0m
  [35mstem.conv3.norm.num_batches_tracked[0m
  [35mstem.fc.{bias, weight}[0m
[10/09 21:01:16] d2.engine.train_loop INFO: Starting training from iteration 0
[10/09 21:01:32] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/root/Projects/detectron2/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/root/Projects/detectron2/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/root/Projects/detectron2/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/root/miniconda3/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1008, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/root/miniconda3/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 969, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/root/miniconda3/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/Projects/detectron2/projects/Panoptic-DeepLab/panoptic_deeplab/panoptic_seg.py", line 175, in forward
    panoptic_relations_results, panoptic_relations_losses = self.psg_relation_net(
  File "/root/miniconda3/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/Projects/detectron2/projects/Panoptic-DeepLab/panoptic_deeplab/psg_relations.py", line 170, in forward
    out_rel, out_cls = self.layers(features)
  File "/root/Projects/detectron2/projects/Panoptic-DeepLab/panoptic_deeplab/psg_relations.py", line 189, in layers
    out = self.tf_encoder(out)
  File "/root/miniconda3/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/root/Projects/detectron2/projects/Panoptic-DeepLab/panoptic_deeplab/transformer.py", line 180, in forward
    x = x + self.pos_embed
RuntimeError: The size of tensor a (16000) must match the size of tensor b (8000) at non-singleton dimension 1
[10/09 21:01:32] d2.engine.hooks INFO: Total training time: 0:00:15 (0:00:00 on hooks)
[10/09 21:01:32] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 23414M
[10/09 21:02:35] detectron2 INFO: Rank of current process: 0. World size: 2
[10/09 21:02:36] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.3
detectron2              0.6 @/root/Projects/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.1
detectron2 arch flags   8.6
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.12.0+cu113 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 Tesla V100S-PCIE-32GB (arch=7.0)
Driver version          470.82.00
CUDA_HOME               /usr/local/cuda
Pillow                  9.1.1
torchvision             0.13.0+cu113 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[10/09 21:02:36] detectron2 INFO: Command line arguments: Namespace(config_file='configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv_custom.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/09 21:02:36] detectron2 INFO: Contents of args.config_file=configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv_custom.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m../Cityscapes-PanopticSegmentation/Base-PanopticDeepLab-OS16.yaml
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdetectron2://DeepLab/R-103.pkl[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;242m# WEIGHTS: "./relations_output_seg_transformer_resnet50/model_best.pth"[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m123.675[39m,[38;5;15m [39m[38;5;15m116.280[39m,[38;5;15m [39m[38;5;15m103.530[39m]
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m58.395[39m,[38;5;15m [39m[38;5;15m57.120[39m,[38;5;15m [39m[38;5;15m57.375[39m]
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbuild_resnet_deeplab_backbone[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m,[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m,[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m]
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m1[39m,[38;5;15m [39m[38;5;15m2[39m,[38;5;15m [39m[38;5;15m4[39m]
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdeeplab[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mFalse
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mLOSS_TOP_K[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mSTUFF_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m41
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mPREDICT_INSTANCES[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m  [39m[38;5;197mPSG_RELATION_NET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENCODER_DEPTH[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mTOTAL_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39m56
[38;5;15m    [39m[38;5;197mTOTAL_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m[38;5;15m [39m("psg_train",)
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m[38;5;15m [39m("psg_val",)
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m5e-4
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mRGB[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mGAUSSIAN_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;81m!!python/object/apply:eval[39m[38;5;15m [39m[[38;5;186m"[39m[38;5;186m[int(x[39m[38;5;15m [39m[38;5;186m*[39m[38;5;15m [39m[38;5;186m0.1[39m[38;5;15m [39m[38;5;186m*[39m[38;5;15m [39m[38;5;186m640)[39m[38;5;15m [39m[38;5;186mfor[39m[38;5;15m [39m[38;5;186mx[39m[38;5;15m [39m[38;5;186min[39m[38;5;15m [39m[38;5;186mrange(5,[39m[38;5;15m [39m[38;5;186m16)][39m[38;5;186m"[39m]
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mchoice[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mabsolute[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m(640, 640)
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m./relations_output_seg_transformer_resnet101[39m[38;5;186m"[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m

[10/09 21:02:36] detectron2 INFO: Running with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m10
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39mTrainingSampler
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mpsg_val
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mpsg_train
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSINGLE_CATEGORY_MAX_AREA[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m640
[38;5;15m    [39m-[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39mabsolute
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39mRGB
[38;5;15m  [39m[38;5;197mGAUSSIAN_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mIGNORE_CROWD_IN_SEMANTIC[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mIGNORE_STUFF_IN_OFFSET[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39mpolygon
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m320
[38;5;15m  [39m-[38;5;15m [39m384
[38;5;15m  [39m-[38;5;15m [39m448
[38;5;15m  [39m-[38;5;15m [39m512
[38;5;15m  [39m-[38;5;15m [39m576
[38;5;15m  [39m-[38;5;15m [39m640
[38;5;15m  [39m-[38;5;15m [39m704
[38;5;15m  [39m-[38;5;15m [39m768
[38;5;15m  [39m-[38;5;15m [39m832
[38;5;15m  [39m-[38;5;15m [39m896
[38;5;15m  [39m-[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39mchoice
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39mhorizontal
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m3
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m-90
[38;5;15m      [39m-[38;5;15m [39m0
[38;5;15m      [39m-[38;5;15m [39m90
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m0.5
[38;5;15m      [39m-[38;5;15m [39m1.0
[38;5;15m      [39m-[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mDefaultAnchorGenerator
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m32
[38;5;15m      [39m-[38;5;15m [39m64
[38;5;15m      [39m-[38;5;15m [39m128
[38;5;15m      [39m-[38;5;15m [39m256
[38;5;15m      [39m-[38;5;15m [39m512
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mbuild_resnet_deeplab_backbone
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39mcuda
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39msum
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m  [39m[38;5;197mINS_EMBED_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m6
[38;5;15m    [39m-[38;5;15m [39m12
[38;5;15m    [39m-[38;5;15m [39m18
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mCENTER_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m200.0
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLabInsEmbedHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mSyncBN
[38;5;15m    [39m[38;5;197mOFFSET_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLab
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBENCHMARK_NETWORK_SPEED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCENTER_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m41
[38;5;15m    [39m[38;5;197mPREDICT_INSTANCES[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mSTUFF_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mTOP_K_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m123.675
[38;5;15m  [39m-[38;5;15m [39m116.28
[38;5;15m  [39m-[38;5;15m [39m103.53
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m58.395
[38;5;15m  [39m-[38;5;15m [39m57.12
[38;5;15m  [39m-[38;5;15m [39m57.375
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRPN
[38;5;15m  [39m[38;5;197mPSG_RELATION_NET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mENCODER_DEPTH[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mFEATURE_NAME_LIST[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPSGRelationNet
[38;5;15m    [39m[38;5;197mTOTAL_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mTOTAL_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39m56
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mFrozenBN
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mRES4_DILATION[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m-[38;5;15m [39m2
[38;5;15m    [39m-[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39mdeeplab
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m-[38;5;15m [39mp6
[38;5;15m    [39m-[38;5;15m [39mp7
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.4
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m-[38;5;15m [39m0.6
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m50
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRes5ROIHeads
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mKRCNNConvDeconvUpsampleHead
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m17
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mMaskRCNNConvUpsampleHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39mStandardRPNHead
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.3
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m6000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m12000
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m6
[38;5;15m    [39m-[38;5;15m [39m12
[38;5;15m    [39m-[38;5;15m [39m18
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m255
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mLOSS_TOP_K[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mLOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39mhard_pixel_mining
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLabSemSegHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mSyncBN
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39mdetectron2://DeepLab/R-103.pkl
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m./relations_output_seg_transformer_resnet101
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m0.0005
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39mvalue
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39mWarmupPolyLR
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mNUM_DECAYS[39m[38;5;15m:[39m[38;5;15m [39m3
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39mADAM
[38;5;15m  [39m[38;5;197mPOLY_LR_CONSTANT_ENDING[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mPOLY_LR_POWER[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m  [39m[38;5;197mRESCALE_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m30000
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m0.001
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39mlinear
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m4000
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m400
[38;5;15m    [39m-[38;5;15m [39m500
[38;5;15m    [39m-[38;5;15m [39m600
[38;5;15m    [39m-[38;5;15m [39m700
[38;5;15m    [39m-[38;5;15m [39m800
[38;5;15m    [39m-[38;5;15m [39m900
[38;5;15m    [39m-[38;5;15m [39m1000
[38;5;15m    [39m-[38;5;15m [39m1100
[38;5;15m    [39m-[38;5;15m [39m1200
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m100
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m0

[10/09 21:02:36] detectron2 INFO: Full config saved to ./relations_output_seg_transformer_resnet101/config.yaml
[10/09 21:02:36] d2.utils.env INFO: Using a generated random seed 37078573
[10/09 21:02:40] d2.engine.defaults INFO: Model:
PanopticDeepLab(
  (backbone): ResNet(
    (stem): DeepLabStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
      )
      (conv3): Conv2d(
        64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv1): Conv2d(
          128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): SyncBatchNorm(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): SyncBatchNorm(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 133, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): SyncBatchNorm(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): SyncBatchNorm(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
  (psg_relation_net): PSGRelationNet(
    (map_dict): ModuleDict(
      (res3): Linear(in_features=512, out_features=256, bias=True)
      (res5): Linear(in_features=2048, out_features=256, bias=True)
    )
    (tf_encoder): Transformer(
      (blocks): ModuleList(
        (0): Block(
          (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=256, out_features=768, bias=False)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=768, bias=True)
            (act): GELU(approximate=none)
            (fc2): Linear(in_features=768, out_features=256, bias=True)
            (drop): Dropout(p=0.0, inplace=False)
          )
        )
      )
      (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (pos_drop): Dropout(p=0.0, inplace=False)
    )
    (tf_decoder): Attention(
      (qkv): Linear(in_features=256, out_features=512, bias=True)
      (attn_drop): Dropout(p=0.0, inplace=False)
      (proj_cls): Linear(in_features=256, out_features=256, bias=True)
      (proj_rel): Linear(in_features=256, out_features=256, bias=True)
      (proj_drop): Dropout(p=0.0, inplace=False)
    )
    (cls_fc): Linear(in_features=256, out_features=1, bias=True)
    (rel_fc): Linear(in_features=256, out_features=1, bias=True)
  )
)
[10/09 21:02:40] d2.projects.panoptic_deeplab.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960), max_size=960, sample_style='choice'), RandomCrop(crop_type='absolute', crop_size=[640, 640]), RandomFlip()]
[10/09 21:02:41] d2.data.build INFO: Removed 0 images with no usable annotations. 4500 images left.
[10/09 21:02:41] d2.data.build INFO: Distribution of instances among all 133 categories:
[36m|   category    | #instances   |   category    | #instances   |   category    | #instances   |
|:-------------:|:-------------|:-------------:|:-------------|:-------------:|:-------------|
|    person     | 25660        |    bicycle    | 913          |      car      | 3591         |
|  motorcycle   | 866          |   airplane    | 89           |      bus      | 433          |
|     train     | 179          |     truck     | 537          |     boat      | 269          |
| traffic light | 883          | fire hydrant  | 59           |   stop sign   | 70           |
| parking meter | 75           |     bench     | 805          |     bird      | 420          |
|      cat      | 65           |      dog      | 267          |     horse     | 478          |
|     sheep     | 415          |      cow      | 448          |   elephant    | 219          |
|     bear      | 29           |     zebra     | 137          |    giraffe    | 140          |
|   backpack    | 1070         |   umbrella    | 1038         |    handbag    | 1651         |
|      tie      | 447          |   suitcase    | 359          |    frisbee    | 218          |
|     skis      | 220          |   snowboard   | 98           |  sports ball  | 805          |
|     kite      | 544          | baseball bat  | 512          | baseball gl.. | 621          |
|  skateboard   | 442          |   surfboard   | 257          | tennis racket | 490          |
|    bottle     | 691          |  wine glass   | 257          |      cup      | 573          |
|     fork      | 105          |     knife     | 188          |     spoon     | 90           |
|     bowl      | 229          |    banana     | 157          |     apple     | 73           |
|   sandwich    | 42           |    orange     | 71           |   broccoli    | 9            |
|    carrot     | 52           |    hot dog    | 55           |     pizza     | 130          |
|     donut     | 104          |     cake      | 134          |     chair     | 2464         |
|     couch     | 169          | potted plant  | 313          |      bed      | 52           |
| dining table  | 444          |    toilet     | 24           |      tv       | 151          |
|    laptop     | 201          |     mouse     | 34           |    remote     | 239          |
|   keyboard    | 26           |  cell phone   | 501          |   microwave   | 14           |
|     oven      | 28           |    toaster    | 0            |     sink      | 23           |
| refrigerator  | 30           |     book      | 431          |     clock     | 168          |
|     vase      | 54           |   scissors    | 17           |  teddy bear   | 88           |
|  hair drier   | 5            |  toothbrush   | 28           |    banner     | 431          |
|    blanket    | 49           |    bridge     | 84           |   cardboard   | 115          |
|    counter    | 56           |    curtain    | 121          |  door-stuff   | 283          |
|  floor-wood   | 148          |    flower     | 118          |     fruit     | 29           |
|    gravel     | 112          |     house     | 349          |     light     | 481          |
| mirror-stuff  | 66           |      net      | 140          |    pillow     | 46           |
|   platform    | 132          | playingfield  | 699          |   railroad    | 128          |
|     river     | 66           |     road      | 1178         |     roof      | 286          |
|     sand      | 295          |      sea      | 228          |     shelf     | 91           |
|     snow      | 146          |    stairs     | 237          |     tent      | 149          |
|     towel     | 53           |  wall-brick   | 281          |  wall-stone   | 90           |
|   wall-tile   | 88           |   wall-wood   | 181          |  water-other  | 67           |
| window-blind  | 66           | window-other  | 565          |  tree-merged  | 2047         |
| fence-merged  | 1051         | ceiling-mer.. | 409          | sky-other-m.. | 1874         |
| cabinet-mer.. | 105          | table-merged  | 321          | floor-other.. | 474          |
| pavement-me.. | 1437         | mountain-me.. | 287          | grass-merged  | 1186         |
|  dirt-merged  | 638          | paper-merged  | 283          | food-other-.. | 118          |
| building-ot.. | 1578         |  rock-merged  | 155          | wall-other-.. | 1685         |
|  rug-merged   | 203          |               |              |               |              |
|     total     | 75788        |               |              |               |              |[0m
[10/09 21:02:41] d2.data.build INFO: Using training sampler TrainingSampler
[10/09 21:02:41] d2.data.common INFO: Serializing 4500 elements to byte tensors and concatenating them all ...
[10/09 21:02:42] d2.data.common INFO: Serialized dataset takes 8.84 MiB
[10/09 21:02:42] fvcore.common.checkpoint INFO: [Checkpointer] Loading from detectron2://DeepLab/R-103.pkl ...
[10/09 21:02:42] fvcore.common.checkpoint INFO: Reading a file from 'torchvision'
[10/09 21:02:42] d2.checkpoint.c2_model_loading INFO: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                               | Shapes                                          |
|:------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,128,1,1)            |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,128,1,1)       |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4.10.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4.10.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4.10.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4.11.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4.11.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4.11.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4.12.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4.12.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4.12.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4.13.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4.13.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4.13.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4.14.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4.14.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4.14.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4.15.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4.15.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4.15.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4.16.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4.16.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4.16.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4.17.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4.17.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4.17.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4.18.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4.18.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4.18.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4.19.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4.19.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4.19.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4.20.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4.20.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4.20.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4.21.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4.21.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4.21.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4.22.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4.22.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4.22.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4.6.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4.6.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4.6.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4.7.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4.7.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4.7.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4.8.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4.8.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4.8.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4.9.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4.9.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4.9.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,3,3)              |
| stem.conv2.*      | stem.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| stem.conv3.*      | stem.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (128,) (128,) (128,) (128,) (128,64,3,3)        |
[10/09 21:02:42] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mins_embed_head.center_head.0.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.center_head.0.weight[0m
[34mins_embed_head.center_head.1.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.center_head.1.weight[0m
[34mins_embed_head.center_predictor.{bias, weight}[0m
[34mins_embed_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res2.fuse_conv.depthwise.weight[0m
[34mins_embed_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res2.fuse_conv.pointwise.weight[0m
[34mins_embed_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res2.project_conv.weight[0m
[34mins_embed_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res3.fuse_conv.depthwise.weight[0m
[34mins_embed_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res3.fuse_conv.pointwise.weight[0m
[34mins_embed_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res3.project_conv.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.0.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.1.depthwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.1.pointwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.2.depthwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.2.pointwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.3.depthwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.convs.3.pointwise.weight[0m
[34mins_embed_head.decoder.res5.project_conv.convs.4.1.{bias, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.decoder.res5.project_conv.project.weight[0m
[34mins_embed_head.offset_head.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.offset_head.depthwise.weight[0m
[34mins_embed_head.offset_head.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34mins_embed_head.offset_head.pointwise.weight[0m
[34mins_embed_head.offset_predictor.{bias, weight}[0m
[34mpsg_relation_net.cls_fc.{bias, weight}[0m
[34mpsg_relation_net.map_dict.res3.{bias, weight}[0m
[34mpsg_relation_net.map_dict.res5.{bias, weight}[0m
[34mpsg_relation_net.rel_fc.{bias, weight}[0m
[34mpsg_relation_net.tf_decoder.proj_cls.{bias, weight}[0m
[34mpsg_relation_net.tf_decoder.proj_rel.{bias, weight}[0m
[34mpsg_relation_net.tf_decoder.qkv.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.attn.proj.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.attn.qkv.weight[0m
[34mpsg_relation_net.tf_encoder.blocks.0.mlp.fc1.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.mlp.fc2.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.norm1.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.blocks.0.norm2.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.norm.{bias, weight}[0m
[34mpsg_relation_net.tf_encoder.pos_embed[0m
[34mpsg_relation_net.{Q_cls, Q_rel}[0m
[34msem_seg_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res2.fuse_conv.depthwise.weight[0m
[34msem_seg_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res2.fuse_conv.pointwise.weight[0m
[34msem_seg_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res2.project_conv.weight[0m
[34msem_seg_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res3.fuse_conv.depthwise.weight[0m
[34msem_seg_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res3.fuse_conv.pointwise.weight[0m
[34msem_seg_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res3.project_conv.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.0.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.1.depthwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.1.pointwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.2.depthwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.2.pointwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.3.depthwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.convs.3.pointwise.weight[0m
[34msem_seg_head.decoder.res5.project_conv.convs.4.1.{bias, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.decoder.res5.project_conv.project.weight[0m
[34msem_seg_head.head.depthwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.head.depthwise.weight[0m
[34msem_seg_head.head.pointwise.norm.{bias, running_mean, running_var, weight}[0m
[34msem_seg_head.head.pointwise.weight[0m
[34msem_seg_head.predictor.{bias, weight}[0m
[10/09 21:02:42] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mres2.0.conv1.norm.num_batches_tracked[0m
  [35mres2.0.conv2.norm.num_batches_tracked[0m
  [35mres2.0.conv3.norm.num_batches_tracked[0m
  [35mres2.0.shortcut.norm.num_batches_tracked[0m
  [35mres2.1.conv1.norm.num_batches_tracked[0m
  [35mres2.1.conv2.norm.num_batches_tracked[0m
  [35mres2.1.conv3.norm.num_batches_tracked[0m
  [35mres2.2.conv1.norm.num_batches_tracked[0m
  [35mres2.2.conv2.norm.num_batches_tracked[0m
  [35mres2.2.conv3.norm.num_batches_tracked[0m
  [35mres3.0.conv1.norm.num_batches_tracked[0m
  [35mres3.0.conv2.norm.num_batches_tracked[0m
  [35mres3.0.conv3.norm.num_batches_tracked[0m
  [35mres3.0.shortcut.norm.num_batches_tracked[0m
  [35mres3.1.conv1.norm.num_batches_tracked[0m
  [35mres3.1.conv2.norm.num_batches_tracked[0m
  [35mres3.1.conv3.norm.num_batches_tracked[0m
  [35mres3.2.conv1.norm.num_batches_tracked[0m
  [35mres3.2.conv2.norm.num_batches_tracked[0m
  [35mres3.2.conv3.norm.num_batches_tracked[0m
  [35mres3.3.conv1.norm.num_batches_tracked[0m
  [35mres3.3.conv2.norm.num_batches_tracked[0m
  [35mres3.3.conv3.norm.num_batches_tracked[0m
  [35mres4.0.conv1.norm.num_batches_tracked[0m
  [35mres4.0.conv2.norm.num_batches_tracked[0m
  [35mres4.0.conv3.norm.num_batches_tracked[0m
  [35mres4.0.shortcut.norm.num_batches_tracked[0m
  [35mres4.1.conv1.norm.num_batches_tracked[0m
  [35mres4.1.conv2.norm.num_batches_tracked[0m
  [35mres4.1.conv3.norm.num_batches_tracked[0m
  [35mres4.10.conv1.norm.num_batches_tracked[0m
  [35mres4.10.conv2.norm.num_batches_tracked[0m
  [35mres4.10.conv3.norm.num_batches_tracked[0m
  [35mres4.11.conv1.norm.num_batches_tracked[0m
  [35mres4.11.conv2.norm.num_batches_tracked[0m
  [35mres4.11.conv3.norm.num_batches_tracked[0m
  [35mres4.12.conv1.norm.num_batches_tracked[0m
  [35mres4.12.conv2.norm.num_batches_tracked[0m
  [35mres4.12.conv3.norm.num_batches_tracked[0m
  [35mres4.13.conv1.norm.num_batches_tracked[0m
  [35mres4.13.conv2.norm.num_batches_tracked[0m
  [35mres4.13.conv3.norm.num_batches_tracked[0m
  [35mres4.14.conv1.norm.num_batches_tracked[0m
  [35mres4.14.conv2.norm.num_batches_tracked[0m
  [35mres4.14.conv3.norm.num_batches_tracked[0m
  [35mres4.15.conv1.norm.num_batches_tracked[0m
  [35mres4.15.conv2.norm.num_batches_tracked[0m
  [35mres4.15.conv3.norm.num_batches_tracked[0m
  [35mres4.16.conv1.norm.num_batches_tracked[0m
  [35mres4.16.conv2.norm.num_batches_tracked[0m
  [35mres4.16.conv3.norm.num_batches_tracked[0m
  [35mres4.17.conv1.norm.num_batches_tracked[0m
  [35mres4.17.conv2.norm.num_batches_tracked[0m
  [35mres4.17.conv3.norm.num_batches_tracked[0m
  [35mres4.18.conv1.norm.num_batches_tracked[0m
  [35mres4.18.conv2.norm.num_batches_tracked[0m
  [35mres4.18.conv3.norm.num_batches_tracked[0m
  [35mres4.19.conv1.norm.num_batches_tracked[0m
  [35mres4.19.conv2.norm.num_batches_tracked[0m
  [35mres4.19.conv3.norm.num_batches_tracked[0m
  [35mres4.2.conv1.norm.num_batches_tracked[0m
  [35mres4.2.conv2.norm.num_batches_tracked[0m
  [35mres4.2.conv3.norm.num_batches_tracked[0m
  [35mres4.20.conv1.norm.num_batches_tracked[0m
  [35mres4.20.conv2.norm.num_batches_tracked[0m
  [35mres4.20.conv3.norm.num_batches_tracked[0m
  [35mres4.21.conv1.norm.num_batches_tracked[0m
  [35mres4.21.conv2.norm.num_batches_tracked[0m
  [35mres4.21.conv3.norm.num_batches_tracked[0m
  [35mres4.22.conv1.norm.num_batches_tracked[0m
  [35mres4.22.conv2.norm.num_batches_tracked[0m
  [35mres4.22.conv3.norm.num_batches_tracked[0m
  [35mres4.3.conv1.norm.num_batches_tracked[0m
  [35mres4.3.conv2.norm.num_batches_tracked[0m
  [35mres4.3.conv3.norm.num_batches_tracked[0m
  [35mres4.4.conv1.norm.num_batches_tracked[0m
  [35mres4.4.conv2.norm.num_batches_tracked[0m
  [35mres4.4.conv3.norm.num_batches_tracked[0m
  [35mres4.5.conv1.norm.num_batches_tracked[0m
  [35mres4.5.conv2.norm.num_batches_tracked[0m
  [35mres4.5.conv3.norm.num_batches_tracked[0m
  [35mres4.6.conv1.norm.num_batches_tracked[0m
  [35mres4.6.conv2.norm.num_batches_tracked[0m
  [35mres4.6.conv3.norm.num_batches_tracked[0m
  [35mres4.7.conv1.norm.num_batches_tracked[0m
  [35mres4.7.conv2.norm.num_batches_tracked[0m
  [35mres4.7.conv3.norm.num_batches_tracked[0m
  [35mres4.8.conv1.norm.num_batches_tracked[0m
  [35mres4.8.conv2.norm.num_batches_tracked[0m
  [35mres4.8.conv3.norm.num_batches_tracked[0m
  [35mres4.9.conv1.norm.num_batches_tracked[0m
  [35mres4.9.conv2.norm.num_batches_tracked[0m
  [35mres4.9.conv3.norm.num_batches_tracked[0m
  [35mres5.0.conv1.norm.num_batches_tracked[0m
  [35mres5.0.conv2.norm.num_batches_tracked[0m
  [35mres5.0.conv3.norm.num_batches_tracked[0m
  [35mres5.0.shortcut.norm.num_batches_tracked[0m
  [35mres5.1.conv1.norm.num_batches_tracked[0m
  [35mres5.1.conv2.norm.num_batches_tracked[0m
  [35mres5.1.conv3.norm.num_batches_tracked[0m
  [35mres5.2.conv1.norm.num_batches_tracked[0m
  [35mres5.2.conv2.norm.num_batches_tracked[0m
  [35mres5.2.conv3.norm.num_batches_tracked[0m
  [35mstem.conv1.norm.num_batches_tracked[0m
  [35mstem.conv2.norm.num_batches_tracked[0m
  [35mstem.conv3.norm.num_batches_tracked[0m
  [35mstem.fc.{bias, weight}[0m
[10/09 21:02:42] d2.engine.train_loop INFO: Starting training from iteration 0
[10/09 21:03:19] d2.utils.events INFO:  eta: 14:51:35  iter: 19  total_loss: 24.05  loss_sem_seg: 20.26  loss_relation: 1.317  loss_center: 1.178  loss_offset: 1.236  time: 1.0703  data_time: 0.7311  lr: 9.9871e-06  max_mem: 19292M
[10/09 21:03:40] d2.utils.events INFO:  eta: 14:54:01  iter: 39  total_loss: 23.5  loss_sem_seg: 19.79  loss_relation: 0.9186  loss_center: 1.164  loss_offset: 1.298  time: 1.0727  data_time: 0.0597  lr: 1.9966e-05  max_mem: 19292M
[10/09 21:04:02] d2.utils.events INFO:  eta: 14:55:19  iter: 59  total_loss: 22.39  loss_sem_seg: 19.55  loss_relation: 0.6198  loss_center: 1.042  loss_offset: 1.357  time: 1.0780  data_time: 0.0676  lr: 2.9939e-05  max_mem: 19292M
[10/09 21:04:24] d2.utils.events INFO:  eta: 14:57:00  iter: 79  total_loss: 22.23  loss_sem_seg: 19.21  loss_relation: 0.5363  loss_center: 1.098  loss_offset: 1.361  time: 1.0806  data_time: 0.0629  lr: 3.9904e-05  max_mem: 19292M
[10/09 21:04:45] d2.utils.events INFO:  eta: 14:57:24  iter: 99  total_loss: 21.43  loss_sem_seg: 18.62  loss_relation: 0.5108  loss_center: 1.122  loss_offset: 1.232  time: 1.0806  data_time: 0.0592  lr: 4.9861e-05  max_mem: 19292M
[10/09 21:05:07] d2.utils.events INFO:  eta: 14:57:36  iter: 119  total_loss: 21.54  loss_sem_seg: 18.81  loss_relation: 0.4906  loss_center: 0.9878  loss_offset: 1.462  time: 1.0818  data_time: 0.0632  lr: 5.9812e-05  max_mem: 19292M
[10/09 21:05:29] d2.utils.events INFO:  eta: 14:57:50  iter: 139  total_loss: 19.65  loss_sem_seg: 17.04  loss_relation: 0.4545  loss_center: 0.9375  loss_offset: 1.3  time: 1.0817  data_time: 0.0594  lr: 6.9756e-05  max_mem: 19292M
[10/09 21:05:50] d2.utils.events INFO:  eta: 14:57:29  iter: 159  total_loss: 18.74  loss_sem_seg: 16.16  loss_relation: 0.4353  loss_center: 0.9657  loss_offset: 1.359  time: 1.0820  data_time: 0.0609  lr: 7.9692e-05  max_mem: 19292M
[10/09 21:06:12] d2.utils.events INFO:  eta: 14:56:31  iter: 179  total_loss: 18.35  loss_sem_seg: 15.52  loss_relation: 0.4307  loss_center: 0.8998  loss_offset: 1.398  time: 1.0814  data_time: 0.0621  lr: 8.9621e-05  max_mem: 19292M
[10/09 21:06:33] d2.utils.events INFO:  eta: 14:55:47  iter: 199  total_loss: 16.65  loss_sem_seg: 13.82  loss_relation: 0.4196  loss_center: 0.9382  loss_offset: 1.254  time: 1.0807  data_time: 0.0603  lr: 9.9543e-05  max_mem: 19292M
[10/09 21:06:55] d2.utils.events INFO:  eta: 14:54:49  iter: 219  total_loss: 16.48  loss_sem_seg: 13.6  loss_relation: 0.4125  loss_center: 0.8116  loss_offset: 1.454  time: 1.0799  data_time: 0.0574  lr: 0.00010946  max_mem: 19292M
[10/09 21:07:16] d2.utils.events INFO:  eta: 14:53:13  iter: 239  total_loss: 15.55  loss_sem_seg: 12.74  loss_relation: 0.404  loss_center: 1.003  loss_offset: 1.309  time: 1.0792  data_time: 0.0616  lr: 0.00011936  max_mem: 19292M
[10/09 21:07:38] d2.utils.events INFO:  eta: 14:53:09  iter: 259  total_loss: 14.47  loss_sem_seg: 11.75  loss_relation: 0.3904  loss_center: 0.981  loss_offset: 1.279  time: 1.0791  data_time: 0.0663  lr: 0.00012926  max_mem: 19292M
[10/09 21:07:59] d2.utils.events INFO:  eta: 14:51:33  iter: 279  total_loss: 14.12  loss_sem_seg: 11.35  loss_relation: 0.3975  loss_center: 0.9905  loss_offset: 1.337  time: 1.0783  data_time: 0.0598  lr: 0.00013916  max_mem: 19292M
[10/09 21:08:21] d2.utils.events INFO:  eta: 14:51:12  iter: 299  total_loss: 13.57  loss_sem_seg: 10.76  loss_relation: 0.3949  loss_center: 0.9744  loss_offset: 1.344  time: 1.0782  data_time: 0.0673  lr: 0.00014904  max_mem: 19292M
[10/09 21:08:42] d2.utils.events INFO:  eta: 14:50:17  iter: 319  total_loss: 13.65  loss_sem_seg: 11.09  loss_relation: 0.3909  loss_center: 0.9061  loss_offset: 1.257  time: 1.0779  data_time: 0.0622  lr: 0.00015892  max_mem: 19292M
[10/09 21:09:04] d2.utils.events INFO:  eta: 14:49:59  iter: 339  total_loss: 12.68  loss_sem_seg: 10.06  loss_relation: 0.3747  loss_center: 0.9627  loss_offset: 1.24  time: 1.0775  data_time: 0.0575  lr: 0.00016879  max_mem: 19292M
[10/09 21:09:25] d2.utils.events INFO:  eta: 14:49:35  iter: 359  total_loss: 12.73  loss_sem_seg: 10.07  loss_relation: 0.3772  loss_center: 0.8894  loss_offset: 1.273  time: 1.0771  data_time: 0.0611  lr: 0.00017866  max_mem: 19292M
[10/09 21:09:46] d2.utils.events INFO:  eta: 14:48:38  iter: 379  total_loss: 12.02  loss_sem_seg: 9.393  loss_relation: 0.3816  loss_center: 0.9626  loss_offset: 1.243  time: 1.0764  data_time: 0.0590  lr: 0.00018852  max_mem: 19292M
[10/09 21:10:08] d2.utils.events INFO:  eta: 14:48:26  iter: 399  total_loss: 12.27  loss_sem_seg: 9.342  loss_relation: 0.3872  loss_center: 0.9341  loss_offset: 1.256  time: 1.0765  data_time: 0.0702  lr: 0.00019836  max_mem: 19292M
[10/09 21:10:29] d2.utils.events INFO:  eta: 14:47:52  iter: 419  total_loss: 12.36  loss_sem_seg: 9.774  loss_relation: 0.3855  loss_center: 0.9121  loss_offset: 1.179  time: 1.0764  data_time: 0.0616  lr: 0.00020821  max_mem: 19292M
[10/09 21:10:51] d2.utils.events INFO:  eta: 14:47:27  iter: 439  total_loss: 12.4  loss_sem_seg: 9.784  loss_relation: 0.3824  loss_center: 0.953  loss_offset: 1.28  time: 1.0761  data_time: 0.0616  lr: 0.00021804  max_mem: 19292M
[10/09 21:11:12] d2.utils.events INFO:  eta: 14:47:13  iter: 459  total_loss: 11.79  loss_sem_seg: 9.4  loss_relation: 0.3685  loss_center: 0.9281  loss_offset: 1.237  time: 1.0763  data_time: 0.0704  lr: 0.00022787  max_mem: 19292M
[10/09 21:11:34] d2.utils.events INFO:  eta: 14:46:51  iter: 479  total_loss: 11.1  loss_sem_seg: 8.68  loss_relation: 0.3674  loss_center: 0.8987  loss_offset: 1.159  time: 1.0761  data_time: 0.0619  lr: 0.00023769  max_mem: 19292M
[10/09 21:11:55] d2.utils.events INFO:  eta: 14:46:13  iter: 499  total_loss: 11.23  loss_sem_seg: 8.702  loss_relation: 0.3596  loss_center: 0.9732  loss_offset: 1.223  time: 1.0756  data_time: 0.0575  lr: 0.00024751  max_mem: 19292M
[10/09 21:12:17] d2.utils.events INFO:  eta: 14:45:35  iter: 519  total_loss: 10.92  loss_sem_seg: 8.466  loss_relation: 0.3742  loss_center: 0.9328  loss_offset: 1.045  time: 1.0758  data_time: 0.0712  lr: 0.00025731  max_mem: 19292M
[10/09 21:12:38] d2.utils.events INFO:  eta: 14:44:46  iter: 539  total_loss: 10.83  loss_sem_seg: 8.275  loss_relation: 0.3834  loss_center: 0.9442  loss_offset: 1.139  time: 1.0756  data_time: 0.0630  lr: 0.00026711  max_mem: 19292M
[10/09 21:13:00] d2.utils.events INFO:  eta: 14:44:16  iter: 559  total_loss: 10.71  loss_sem_seg: 8.253  loss_relation: 0.3635  loss_center: 0.9235  loss_offset: 1.132  time: 1.0754  data_time: 0.0585  lr: 0.0002769  max_mem: 19292M
[10/09 21:13:21] d2.utils.events INFO:  eta: 14:43:39  iter: 579  total_loss: 11.05  loss_sem_seg: 8.442  loss_relation: 0.3655  loss_center: 0.8937  loss_offset: 1.126  time: 1.0751  data_time: 0.0618  lr: 0.00028669  max_mem: 19292M
[10/09 21:13:42] d2.utils.events INFO:  eta: 14:43:13  iter: 599  total_loss: 10.31  loss_sem_seg: 8.101  loss_relation: 0.3687  loss_center: 0.9223  loss_offset: 1.08  time: 1.0748  data_time: 0.0592  lr: 0.00029647  max_mem: 19292M
[10/09 21:14:04] d2.utils.events INFO:  eta: 14:42:46  iter: 619  total_loss: 10.48  loss_sem_seg: 8.219  loss_relation: 0.3582  loss_center: 0.9358  loss_offset: 1.072  time: 1.0746  data_time: 0.0594  lr: 0.00030624  max_mem: 19292M
[10/09 21:14:25] d2.utils.events INFO:  eta: 14:42:11  iter: 639  total_loss: 10.1  loss_sem_seg: 7.882  loss_relation: 0.3677  loss_center: 0.9048  loss_offset: 1.029  time: 1.0745  data_time: 0.0566  lr: 0.000316  max_mem: 19292M
[10/09 21:14:47] d2.utils.events INFO:  eta: 14:41:50  iter: 659  total_loss: 10.06  loss_sem_seg: 7.843  loss_relation: 0.3531  loss_center: 0.8626  loss_offset: 1.106  time: 1.0744  data_time: 0.0577  lr: 0.00032576  max_mem: 19292M
[10/09 21:15:08] d2.utils.events INFO:  eta: 14:41:26  iter: 679  total_loss: 10.41  loss_sem_seg: 8.089  loss_relation: 0.369  loss_center: 0.8581  loss_offset: 1.127  time: 1.0743  data_time: 0.0611  lr: 0.00033551  max_mem: 19292M
[10/09 21:15:29] d2.utils.events INFO:  eta: 14:40:58  iter: 699  total_loss: 10.32  loss_sem_seg: 8.041  loss_relation: 0.366  loss_center: 0.8803  loss_offset: 1.095  time: 1.0741  data_time: 0.0584  lr: 0.00034525  max_mem: 19292M
[10/09 21:15:51] d2.utils.events INFO:  eta: 14:40:27  iter: 719  total_loss: 10.2  loss_sem_seg: 7.918  loss_relation: 0.3575  loss_center: 0.9642  loss_offset: 1.045  time: 1.0740  data_time: 0.0622  lr: 0.00035498  max_mem: 19292M
[10/09 21:16:12] d2.utils.events INFO:  eta: 14:40:06  iter: 739  total_loss: 9.57  loss_sem_seg: 7.086  loss_relation: 0.3632  loss_center: 0.9512  loss_offset: 1.014  time: 1.0739  data_time: 0.0651  lr: 0.00036471  max_mem: 19292M
[10/09 21:16:34] d2.utils.events INFO:  eta: 14:39:43  iter: 759  total_loss: 10.25  loss_sem_seg: 7.82  loss_relation: 0.3739  loss_center: 0.9908  loss_offset: 1.056  time: 1.0738  data_time: 0.0621  lr: 0.00037443  max_mem: 19292M
[10/09 21:16:55] d2.utils.events INFO:  eta: 14:39:21  iter: 779  total_loss: 9.876  loss_sem_seg: 7.85  loss_relation: 0.369  loss_center: 0.9403  loss_offset: 1.037  time: 1.0737  data_time: 0.0620  lr: 0.00038414  max_mem: 19292M
[10/09 21:17:16] d2.utils.events INFO:  eta: 14:38:52  iter: 799  total_loss: 9.887  loss_sem_seg: 7.529  loss_relation: 0.3675  loss_center: 1.034  loss_offset: 1  time: 1.0736  data_time: 0.0645  lr: 0.00039385  max_mem: 19292M
[10/09 21:17:38] d2.utils.events INFO:  eta: 14:38:29  iter: 819  total_loss: 10.55  loss_sem_seg: 8.027  loss_relation: 0.3688  loss_center: 0.9793  loss_offset: 0.9988  time: 1.0735  data_time: 0.0605  lr: 0.00040355  max_mem: 19292M
[10/09 21:17:59] d2.utils.events INFO:  eta: 14:37:50  iter: 839  total_loss: 9.428  loss_sem_seg: 7.208  loss_relation: 0.3521  loss_center: 0.9592  loss_offset: 0.8725  time: 1.0734  data_time: 0.0591  lr: 0.00041324  max_mem: 19292M
[10/09 21:18:21] d2.utils.events INFO:  eta: 14:37:26  iter: 859  total_loss: 9.358  loss_sem_seg: 7.084  loss_relation: 0.353  loss_center: 0.969  loss_offset: 0.9373  time: 1.0733  data_time: 0.0644  lr: 0.00042292  max_mem: 19292M
[10/09 21:18:42] d2.utils.events INFO:  eta: 14:37:04  iter: 879  total_loss: 9.628  loss_sem_seg: 7.431  loss_relation: 0.3528  loss_center: 0.9443  loss_offset: 0.8794  time: 1.0734  data_time: 0.0672  lr: 0.0004326  max_mem: 19292M
[10/09 21:19:04] d2.utils.events INFO:  eta: 14:36:43  iter: 899  total_loss: 9.619  loss_sem_seg: 7.44  loss_relation: 0.3662  loss_center: 0.8981  loss_offset: 0.9127  time: 1.0734  data_time: 0.0624  lr: 0.00044227  max_mem: 19292M
[10/09 21:19:25] d2.utils.events INFO:  eta: 14:36:21  iter: 919  total_loss: 9.455  loss_sem_seg: 7.182  loss_relation: 0.3667  loss_center: 1.005  loss_offset: 0.8733  time: 1.0733  data_time: 0.0615  lr: 0.00045193  max_mem: 19292M
[10/09 21:19:46] d2.utils.events INFO:  eta: 14:35:56  iter: 939  total_loss: 9.764  loss_sem_seg: 7.432  loss_relation: 0.3653  loss_center: 0.9206  loss_offset: 0.8676  time: 1.0732  data_time: 0.0601  lr: 0.00046159  max_mem: 19292M
[10/09 21:20:08] d2.utils.events INFO:  eta: 14:35:34  iter: 959  total_loss: 9.081  loss_sem_seg: 6.736  loss_relation: 0.3536  loss_center: 0.9604  loss_offset: 0.8873  time: 1.0731  data_time: 0.0643  lr: 0.00047124  max_mem: 19292M
[10/09 21:20:29] d2.utils.events INFO:  eta: 14:35:15  iter: 979  total_loss: 9.537  loss_sem_seg: 7.326  loss_relation: 0.3603  loss_center: 0.9538  loss_offset: 0.9136  time: 1.0732  data_time: 0.0650  lr: 0.00048088  max_mem: 19292M
[10/09 21:20:51] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0000999.pth
[10/09 21:20:52] d2.data.build INFO: Distribution of instances among all 133 categories:
[36m|   category    | #instances   |   category    | #instances   |   category    | #instances   |
|:-------------:|:-------------|:-------------:|:-------------|:-------------:|:-------------|
|    person     | 1980         |    bicycle    | 80           |      car      | 332          |
|  motorcycle   | 51           |   airplane    | 15           |      bus      | 38           |
|     train     | 21           |     truck     | 70           |     boat      | 53           |
| traffic light | 93           | fire hydrant  | 9            |   stop sign   | 8            |
| parking meter | 1            |     bench     | 56           |     bird      | 86           |
|      cat      | 8            |      dog      | 18           |     horse     | 42           |
|     sheep     | 47           |      cow      | 30           |   elephant    | 29           |
|     bear      | 10           |     zebra     | 47           |    giraffe    | 33           |
|   backpack    | 55           |   umbrella    | 44           |    handbag    | 130          |
|      tie      | 33           |   suitcase    | 18           |    frisbee    | 7            |
|     skis      | 44           |   snowboard   | 11           |  sports ball  | 46           |
|     kite      | 94           | baseball bat  | 24           | baseball gl.. | 32           |
|  skateboard   | 37           |   surfboard   | 55           | tennis racket | 30           |
|    bottle     | 77           |  wine glass   | 41           |      cup      | 104          |
|     fork      | 23           |     knife     | 30           |     spoon     | 23           |
|     bowl      | 51           |    banana     | 52           |     apple     | 14           |
|   sandwich    | 5            |    orange     | 13           |   broccoli    | 3            |
|    carrot     | 16           |    hot dog    | 8            |     pizza     | 14           |
|     donut     | 9            |     cake      | 15           |     chair     | 197          |
|     couch     | 17           | potted plant  | 10           |      bed      | 10           |
| dining table  | 45           |    toilet     | 6            |      tv       | 12           |
|    laptop     | 16           |     mouse     | 2            |    remote     | 23           |
|   keyboard    | 2            |  cell phone   | 25           |   microwave   | 0            |
|     oven      | 3            |    toaster    | 0            |     sink      | 7            |
| refrigerator  | 2            |     book      | 74           |     clock     | 11           |
|     vase      | 1            |   scissors    | 0            |  teddy bear   | 33           |
|  hair drier   | 0            |  toothbrush   | 8            |    banner     | 29           |
|    blanket    | 13           |    bridge     | 9            |   cardboard   | 14           |
|    counter    | 7            |    curtain    | 12           |  door-stuff   | 30           |
|  floor-wood   | 16           |    flower     | 9            |     fruit     | 6            |
|    gravel     | 10           |     house     | 33           |     light     | 41           |
| mirror-stuff  | 7            |      net      | 7            |    pillow     | 7            |
|   platform    | 16           | playingfield  | 39           |   railroad    | 17           |
|     river     | 10           |     road      | 101          |     roof      | 20           |
|     sand      | 28           |      sea      | 53           |     shelf     | 19           |
|     snow      | 27           |    stairs     | 16           |     tent      | 11           |
|     towel     | 12           |  wall-brick   | 24           |  wall-stone   | 15           |
|   wall-tile   | 12           |   wall-wood   | 34           |  water-other  | 10           |
| window-blind  | 8            | window-other  | 40           |  tree-merged  | 224          |
| fence-merged  | 91           | ceiling-mer.. | 32           | sky-other-m.. | 233          |
| cabinet-mer.. | 16           | table-merged  | 46           | floor-other.. | 42           |
| pavement-me.. | 134          | mountain-me.. | 31           | grass-merged  | 128          |
|  dirt-merged  | 57           | paper-merged  | 29           | food-other-.. | 24           |
| building-ot.. | 152          |  rock-merged  | 22           | wall-other-.. | 145          |
|  rug-merged   | 14           |               |              |               |              |
|     total     | 7001         |               |              |               |              |[0m
[10/09 21:20:52] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/09 21:20:52] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/09 21:20:52] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/09 21:20:52] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/09 21:21:07] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0013 s/iter. Inference: 0.0807 s/iter. Eval: 0.0298 s/iter. Total: 0.1118 s/iter. ETA=0:00:26
[10/09 21:21:12] d2.evaluation.evaluator INFO: Inference done 59/250. Dataloading: 0.0014 s/iter. Inference: 0.0751 s/iter. Eval: 0.0287 s/iter. Total: 0.1052 s/iter. ETA=0:00:20
[10/09 21:21:17] d2.evaluation.evaluator INFO: Inference done 110/250. Dataloading: 0.0014 s/iter. Inference: 0.0724 s/iter. Eval: 0.0287 s/iter. Total: 0.1025 s/iter. ETA=0:00:14
[10/09 21:21:22] d2.evaluation.evaluator INFO: Inference done 161/250. Dataloading: 0.0014 s/iter. Inference: 0.0715 s/iter. Eval: 0.0286 s/iter. Total: 0.1016 s/iter. ETA=0:00:09
[10/09 21:21:27] d2.evaluation.evaluator INFO: Inference done 213/250. Dataloading: 0.0015 s/iter. Inference: 0.0709 s/iter. Eval: 0.0281 s/iter. Total: 0.1006 s/iter. ETA=0:00:03
[10/09 21:21:31] d2.evaluation.evaluator INFO: Total inference time: 0:00:24.829298 (0.101344 s / iter per device, on 2 devices)
[10/09 21:21:31] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:17 (0.070189 s / iter per device, on 2 devices)
[10/09 21:21:31] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_eval2z41nand ...
[10/09 21:21:36] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 5.518891126281762
[10/09 21:21:36] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |  PQ   |   SQ   |  RQ   |  #categories  |
|:------:|:-----:|:------:|:-----:|:-------------:|
|  All   | 2.857 | 11.059 | 3.785 |      129      |
| Things | 0.544 | 5.447  | 0.808 |      76       |
| Stuff  | 6.173 | 19.107 | 8.053 |      53       |
[10/09 21:21:36] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/09 21:21:36] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/09 21:21:36] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/09 21:21:36] d2.evaluation.testing INFO: copypaste: 2.8568,11.0593,3.7847,0.5439,5.4469,0.8080,6.1733,19.1072,8.0531
[10/09 21:21:36] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/09 21:21:36] d2.evaluation.testing INFO: copypaste: mean_recall
[10/09 21:21:36] d2.evaluation.testing INFO: copypaste: 0.0552
[10/09 21:21:36] d2.utils.events INFO:  eta: 14:34:53  iter: 999  total_loss: 10.11  loss_sem_seg: 7.799  loss_relation: 0.3598  loss_center: 1.025  loss_offset: 0.9181  time: 1.0730  data_time: 0.0570  lr: 0.00049051  max_mem: 19292M
[10/09 21:21:36] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/09 21:21:37] d2.engine.hooks INFO: Saved first model at 0.05519 @ 999 steps
[10/09 21:21:58] d2.utils.events INFO:  eta: 14:34:11  iter: 1019  total_loss: 9.348  loss_sem_seg: 7.157  loss_relation: 0.3614  loss_center: 0.8962  loss_offset: 0.8844  time: 1.0727  data_time: 0.0613  lr: 0.00049082  max_mem: 19292M
[10/09 21:22:20] d2.utils.events INFO:  eta: 14:33:30  iter: 1039  total_loss: 9.642  loss_sem_seg: 7.202  loss_relation: 0.3733  loss_center: 0.9483  loss_offset: 0.8997  time: 1.0725  data_time: 0.0595  lr: 0.00049064  max_mem: 19292M
[10/09 21:22:41] d2.utils.events INFO:  eta: 14:32:54  iter: 1059  total_loss: 9.42  loss_sem_seg: 7.19  loss_relation: 0.3713  loss_center: 0.8811  loss_offset: 0.9488  time: 1.0723  data_time: 0.0594  lr: 0.00049046  max_mem: 19292M
[10/09 21:23:02] d2.utils.events INFO:  eta: 14:32:15  iter: 1079  total_loss: 9.073  loss_sem_seg: 6.853  loss_relation: 0.3532  loss_center: 0.9197  loss_offset: 0.8248  time: 1.0722  data_time: 0.0617  lr: 0.00049028  max_mem: 19292M
[10/09 21:23:24] d2.utils.events INFO:  eta: 14:31:40  iter: 1099  total_loss: 9.079  loss_sem_seg: 6.756  loss_relation: 0.3576  loss_center: 0.9062  loss_offset: 0.8034  time: 1.0722  data_time: 0.0612  lr: 0.0004901  max_mem: 19292M
[10/09 21:23:45] d2.utils.events INFO:  eta: 14:31:02  iter: 1119  total_loss: 9.087  loss_sem_seg: 6.808  loss_relation: 0.3513  loss_center: 0.9137  loss_offset: 0.8764  time: 1.0722  data_time: 0.0653  lr: 0.00048992  max_mem: 19292M
[10/09 21:24:07] d2.utils.events INFO:  eta: 14:30:27  iter: 1139  total_loss: 9.016  loss_sem_seg: 6.829  loss_relation: 0.3485  loss_center: 0.9376  loss_offset: 0.775  time: 1.0721  data_time: 0.0633  lr: 0.00048974  max_mem: 19292M
[10/09 21:24:28] d2.utils.events INFO:  eta: 14:29:59  iter: 1159  total_loss: 9.599  loss_sem_seg: 7.282  loss_relation: 0.354  loss_center: 0.9068  loss_offset: 0.8159  time: 1.0720  data_time: 0.0550  lr: 0.00048956  max_mem: 19292M
[10/09 21:24:49] d2.utils.events INFO:  eta: 14:29:25  iter: 1179  total_loss: 8.682  loss_sem_seg: 6.614  loss_relation: 0.3564  loss_center: 0.9677  loss_offset: 0.8335  time: 1.0719  data_time: 0.0627  lr: 0.00048938  max_mem: 19292M
[10/09 21:25:11] d2.utils.events INFO:  eta: 14:28:59  iter: 1199  total_loss: 8.69  loss_sem_seg: 6.685  loss_relation: 0.3482  loss_center: 0.8932  loss_offset: 0.7861  time: 1.0718  data_time: 0.0604  lr: 0.0004892  max_mem: 19292M
[10/09 21:25:32] d2.utils.events INFO:  eta: 14:28:39  iter: 1219  total_loss: 9.289  loss_sem_seg: 7.046  loss_relation: 0.3536  loss_center: 0.9925  loss_offset: 0.7677  time: 1.0718  data_time: 0.0619  lr: 0.00048902  max_mem: 19292M
[10/09 21:25:53] d2.utils.events INFO:  eta: 14:28:13  iter: 1239  total_loss: 8.588  loss_sem_seg: 6.393  loss_relation: 0.3603  loss_center: 0.9358  loss_offset: 0.8113  time: 1.0717  data_time: 0.0605  lr: 0.00048884  max_mem: 19292M
[10/09 21:26:14] d2.utils.events INFO:  eta: 14:27:41  iter: 1259  total_loss: 8.433  loss_sem_seg: 6.46  loss_relation: 0.3436  loss_center: 0.8882  loss_offset: 0.7319  time: 1.0715  data_time: 0.0583  lr: 0.00048865  max_mem: 19292M
[10/09 21:26:36] d2.utils.events INFO:  eta: 14:27:18  iter: 1279  total_loss: 8.492  loss_sem_seg: 6.757  loss_relation: 0.3427  loss_center: 0.8246  loss_offset: 0.7263  time: 1.0714  data_time: 0.0610  lr: 0.00048847  max_mem: 19292M
[10/09 21:26:57] d2.utils.events INFO:  eta: 14:27:00  iter: 1299  total_loss: 8.286  loss_sem_seg: 6.304  loss_relation: 0.3474  loss_center: 0.8584  loss_offset: 0.7464  time: 1.0714  data_time: 0.0625  lr: 0.00048829  max_mem: 19292M
[10/09 21:27:19] d2.utils.events INFO:  eta: 14:26:48  iter: 1319  total_loss: 9.246  loss_sem_seg: 7.113  loss_relation: 0.3562  loss_center: 0.9183  loss_offset: 0.8432  time: 1.0714  data_time: 0.0654  lr: 0.00048811  max_mem: 19292M
[10/09 21:27:40] d2.utils.events INFO:  eta: 14:26:24  iter: 1339  total_loss: 8.437  loss_sem_seg: 6.531  loss_relation: 0.3412  loss_center: 0.9316  loss_offset: 0.7106  time: 1.0713  data_time: 0.0629  lr: 0.00048793  max_mem: 19292M
[10/09 21:28:01] d2.utils.events INFO:  eta: 14:25:56  iter: 1359  total_loss: 7.685  loss_sem_seg: 5.642  loss_relation: 0.3433  loss_center: 0.9171  loss_offset: 0.7088  time: 1.0712  data_time: 0.0587  lr: 0.00048775  max_mem: 19292M
[10/09 21:28:23] d2.utils.events INFO:  eta: 14:25:37  iter: 1379  total_loss: 8.229  loss_sem_seg: 6.242  loss_relation: 0.3478  loss_center: 0.9094  loss_offset: 0.7516  time: 1.0711  data_time: 0.0611  lr: 0.00048757  max_mem: 19292M
[10/09 21:28:44] d2.utils.events INFO:  eta: 14:25:03  iter: 1399  total_loss: 8.331  loss_sem_seg: 6.377  loss_relation: 0.3372  loss_center: 0.9289  loss_offset: 0.679  time: 1.0710  data_time: 0.0597  lr: 0.00048739  max_mem: 19292M
[10/09 21:29:05] d2.utils.events INFO:  eta: 14:24:35  iter: 1419  total_loss: 8.091  loss_sem_seg: 6.051  loss_relation: 0.3447  loss_center: 0.9028  loss_offset: 0.7744  time: 1.0709  data_time: 0.0610  lr: 0.00048721  max_mem: 19292M
[10/09 21:29:26] d2.utils.events INFO:  eta: 14:24:02  iter: 1439  total_loss: 8.167  loss_sem_seg: 6.169  loss_relation: 0.3315  loss_center: 0.915  loss_offset: 0.6791  time: 1.0709  data_time: 0.0609  lr: 0.00048703  max_mem: 19292M
[10/09 21:29:48] d2.utils.events INFO:  eta: 14:23:36  iter: 1459  total_loss: 8.318  loss_sem_seg: 6.285  loss_relation: 0.3339  loss_center: 0.8849  loss_offset: 0.6995  time: 1.0708  data_time: 0.0586  lr: 0.00048685  max_mem: 19292M
[10/09 21:30:09] d2.utils.events INFO:  eta: 14:23:08  iter: 1479  total_loss: 8.093  loss_sem_seg: 6.216  loss_relation: 0.3343  loss_center: 0.8742  loss_offset: 0.6566  time: 1.0707  data_time: 0.0591  lr: 0.00048667  max_mem: 19292M
[10/09 21:30:30] d2.utils.events INFO:  eta: 14:22:39  iter: 1499  total_loss: 7.741  loss_sem_seg: 5.745  loss_relation: 0.3349  loss_center: 0.8826  loss_offset: 0.717  time: 1.0706  data_time: 0.0560  lr: 0.00048649  max_mem: 19292M
[10/09 21:30:52] d2.utils.events INFO:  eta: 14:22:01  iter: 1519  total_loss: 8.343  loss_sem_seg: 6.361  loss_relation: 0.3477  loss_center: 0.9259  loss_offset: 0.7311  time: 1.0704  data_time: 0.0599  lr: 0.00048631  max_mem: 19292M
[10/09 21:31:13] d2.utils.events INFO:  eta: 14:21:41  iter: 1539  total_loss: 7.785  loss_sem_seg: 5.859  loss_relation: 0.335  loss_center: 0.8991  loss_offset: 0.7202  time: 1.0704  data_time: 0.0580  lr: 0.00048613  max_mem: 19292M
[10/09 21:31:34] d2.utils.events INFO:  eta: 14:21:20  iter: 1559  total_loss: 8.098  loss_sem_seg: 6.061  loss_relation: 0.3328  loss_center: 0.9277  loss_offset: 0.6603  time: 1.0703  data_time: 0.0579  lr: 0.00048595  max_mem: 19292M
[10/09 21:31:55] d2.utils.events INFO:  eta: 14:20:57  iter: 1579  total_loss: 7.758  loss_sem_seg: 5.961  loss_relation: 0.3295  loss_center: 0.9496  loss_offset: 0.6524  time: 1.0702  data_time: 0.0569  lr: 0.00048577  max_mem: 19292M
[10/09 21:32:17] d2.utils.events INFO:  eta: 14:20:28  iter: 1599  total_loss: 8.151  loss_sem_seg: 6.063  loss_relation: 0.3546  loss_center: 0.9769  loss_offset: 0.6874  time: 1.0701  data_time: 0.0577  lr: 0.00048559  max_mem: 19292M
[10/09 21:32:38] d2.utils.events INFO:  eta: 14:20:03  iter: 1619  total_loss: 7.59  loss_sem_seg: 5.767  loss_relation: 0.3349  loss_center: 0.9319  loss_offset: 0.6888  time: 1.0701  data_time: 0.0599  lr: 0.00048541  max_mem: 19292M
[10/09 21:32:59] d2.utils.events INFO:  eta: 14:19:30  iter: 1639  total_loss: 7.831  loss_sem_seg: 6.005  loss_relation: 0.35  loss_center: 0.8788  loss_offset: 0.6794  time: 1.0700  data_time: 0.0615  lr: 0.00048522  max_mem: 19292M
[10/09 21:33:21] d2.utils.events INFO:  eta: 14:19:06  iter: 1659  total_loss: 8.352  loss_sem_seg: 6.446  loss_relation: 0.3519  loss_center: 0.8457  loss_offset: 0.657  time: 1.0700  data_time: 0.0617  lr: 0.00048504  max_mem: 19292M
[10/09 21:33:42] d2.utils.events INFO:  eta: 14:18:45  iter: 1679  total_loss: 7.574  loss_sem_seg: 5.78  loss_relation: 0.3264  loss_center: 0.8314  loss_offset: 0.6824  time: 1.0700  data_time: 0.0664  lr: 0.00048486  max_mem: 19292M
[10/09 21:34:03] d2.utils.events INFO:  eta: 14:18:22  iter: 1699  total_loss: 7.97  loss_sem_seg: 6.024  loss_relation: 0.3305  loss_center: 0.9259  loss_offset: 0.6863  time: 1.0699  data_time: 0.0595  lr: 0.00048468  max_mem: 19292M
[10/09 21:34:25] d2.utils.events INFO:  eta: 14:17:52  iter: 1719  total_loss: 7.452  loss_sem_seg: 5.635  loss_relation: 0.3265  loss_center: 0.8208  loss_offset: 0.6491  time: 1.0698  data_time: 0.0600  lr: 0.0004845  max_mem: 19292M
[10/09 21:34:46] d2.utils.events INFO:  eta: 14:17:26  iter: 1739  total_loss: 7.484  loss_sem_seg: 5.561  loss_relation: 0.3206  loss_center: 0.8151  loss_offset: 0.6754  time: 1.0697  data_time: 0.0610  lr: 0.00048432  max_mem: 19292M
[10/09 21:35:07] d2.utils.events INFO:  eta: 14:16:57  iter: 1759  total_loss: 7.698  loss_sem_seg: 5.861  loss_relation: 0.3296  loss_center: 0.8862  loss_offset: 0.6602  time: 1.0697  data_time: 0.0556  lr: 0.00048414  max_mem: 19292M
[10/09 21:35:28] d2.utils.events INFO:  eta: 14:16:29  iter: 1779  total_loss: 7.728  loss_sem_seg: 5.799  loss_relation: 0.336  loss_center: 0.8983  loss_offset: 0.6595  time: 1.0696  data_time: 0.0590  lr: 0.00048396  max_mem: 19292M
[10/09 21:35:50] d2.utils.events INFO:  eta: 14:16:07  iter: 1799  total_loss: 7.627  loss_sem_seg: 5.548  loss_relation: 0.3133  loss_center: 0.9059  loss_offset: 0.7159  time: 1.0695  data_time: 0.0598  lr: 0.00048378  max_mem: 19292M
[10/09 21:36:11] d2.utils.events INFO:  eta: 14:15:43  iter: 1819  total_loss: 7.92  loss_sem_seg: 6.132  loss_relation: 0.3329  loss_center: 0.8984  loss_offset: 0.6747  time: 1.0695  data_time: 0.0613  lr: 0.0004836  max_mem: 19292M
[10/09 21:36:32] d2.utils.events INFO:  eta: 14:15:24  iter: 1839  total_loss: 7.696  loss_sem_seg: 5.765  loss_relation: 0.3433  loss_center: 0.889  loss_offset: 0.6796  time: 1.0694  data_time: 0.0602  lr: 0.00048342  max_mem: 19292M
[10/09 21:36:54] d2.utils.events INFO:  eta: 14:14:54  iter: 1859  total_loss: 7.305  loss_sem_seg: 5.431  loss_relation: 0.3409  loss_center: 0.8726  loss_offset: 0.699  time: 1.0694  data_time: 0.0625  lr: 0.00048324  max_mem: 19292M
[10/09 21:37:15] d2.utils.events INFO:  eta: 14:14:20  iter: 1879  total_loss: 7.784  loss_sem_seg: 6.057  loss_relation: 0.3347  loss_center: 0.8219  loss_offset: 0.6529  time: 1.0693  data_time: 0.0576  lr: 0.00048306  max_mem: 19292M
[10/09 21:37:36] d2.utils.events INFO:  eta: 14:13:51  iter: 1899  total_loss: 7.694  loss_sem_seg: 5.757  loss_relation: 0.3269  loss_center: 0.885  loss_offset: 0.6773  time: 1.0693  data_time: 0.0607  lr: 0.00048288  max_mem: 19292M
[10/09 21:37:58] d2.utils.events INFO:  eta: 14:13:30  iter: 1919  total_loss: 7.661  loss_sem_seg: 5.814  loss_relation: 0.3288  loss_center: 0.8722  loss_offset: 0.6704  time: 1.0693  data_time: 0.0575  lr: 0.0004827  max_mem: 19292M
[10/09 21:38:19] d2.utils.events INFO:  eta: 14:13:09  iter: 1939  total_loss: 7.603  loss_sem_seg: 5.569  loss_relation: 0.3287  loss_center: 0.8491  loss_offset: 0.6796  time: 1.0692  data_time: 0.0648  lr: 0.00048251  max_mem: 19292M
[10/09 21:38:40] d2.utils.events INFO:  eta: 14:12:41  iter: 1959  total_loss: 7.564  loss_sem_seg: 5.526  loss_relation: 0.3478  loss_center: 0.9094  loss_offset: 0.6064  time: 1.0692  data_time: 0.0595  lr: 0.00048233  max_mem: 19292M
[10/09 21:39:02] d2.utils.events INFO:  eta: 14:12:08  iter: 1979  total_loss: 7.721  loss_sem_seg: 5.862  loss_relation: 0.3305  loss_center: 0.8805  loss_offset: 0.7054  time: 1.0691  data_time: 0.0621  lr: 0.00048215  max_mem: 19292M
[10/09 21:39:23] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0001999.pth
[10/09 21:39:25] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/09 21:39:25] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/09 21:39:25] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/09 21:39:25] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/09 21:39:39] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0021 s/iter. Inference: 0.0641 s/iter. Eval: 0.0294 s/iter. Total: 0.0956 s/iter. ETA=0:00:22
[10/09 21:39:44] d2.evaluation.evaluator INFO: Inference done 65/250. Dataloading: 0.0017 s/iter. Inference: 0.0636 s/iter. Eval: 0.0288 s/iter. Total: 0.0942 s/iter. ETA=0:00:17
[10/09 21:39:49] d2.evaluation.evaluator INFO: Inference done 121/250. Dataloading: 0.0017 s/iter. Inference: 0.0616 s/iter. Eval: 0.0285 s/iter. Total: 0.0918 s/iter. ETA=0:00:11
[10/09 21:39:54] d2.evaluation.evaluator INFO: Inference done 176/250. Dataloading: 0.0016 s/iter. Inference: 0.0615 s/iter. Eval: 0.0285 s/iter. Total: 0.0916 s/iter. ETA=0:00:06
[10/09 21:39:59] d2.evaluation.evaluator INFO: Inference done 233/250. Dataloading: 0.0016 s/iter. Inference: 0.0611 s/iter. Eval: 0.0280 s/iter. Total: 0.0908 s/iter. ETA=0:00:01
[10/09 21:40:01] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.612762 (0.092297 s / iter per device, on 2 devices)
[10/09 21:40:01] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:14 (0.061124 s / iter per device, on 2 devices)
[10/09 21:40:01] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evaluk__ktck ...
[10/09 21:40:07] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 7.255452813797085
[10/09 21:40:07] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 5.930  | 22.360 | 8.005  |      129      |
| Things | 3.037  | 17.827 | 4.366  |      76       |
| Stuff  | 10.079 | 28.858 | 13.222 |      53       |
[10/09 21:40:07] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/09 21:40:07] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/09 21:40:07] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/09 21:40:07] d2.evaluation.testing INFO: copypaste: 5.9302,22.3595,8.0046,3.0371,17.8273,4.3661,10.0787,28.8585,13.2220
[10/09 21:40:07] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/09 21:40:07] d2.evaluation.testing INFO: copypaste: mean_recall
[10/09 21:40:07] d2.evaluation.testing INFO: copypaste: 0.0726
[10/09 21:40:07] d2.utils.events INFO:  eta: 14:11:45  iter: 1999  total_loss: 7.439  loss_sem_seg: 5.427  loss_relation: 0.3219  loss_center: 0.8198  loss_offset: 0.6219  time: 1.0692  data_time: 0.0687  lr: 0.00048197  max_mem: 19292M
[10/09 21:40:07] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/09 21:40:13] d2.engine.hooks INFO: Saved best model as latest eval score for relation_mean_recall/mean_recall is 0.07255, better than last best score 0.05519 @ iteration 999.
[10/09 21:40:35] d2.utils.events INFO:  eta: 14:11:18  iter: 2019  total_loss: 7.384  loss_sem_seg: 5.63  loss_relation: 0.329  loss_center: 0.7977  loss_offset: 0.6065  time: 1.0691  data_time: 0.0618  lr: 0.00048179  max_mem: 19292M
[10/09 21:40:56] d2.utils.events INFO:  eta: 14:11:00  iter: 2039  total_loss: 7.027  loss_sem_seg: 5.337  loss_relation: 0.322  loss_center: 0.9052  loss_offset: 0.6517  time: 1.0690  data_time: 0.0594  lr: 0.00048161  max_mem: 19292M
[10/09 21:41:17] d2.utils.events INFO:  eta: 14:10:42  iter: 2059  total_loss: 7.134  loss_sem_seg: 5.383  loss_relation: 0.3281  loss_center: 0.8371  loss_offset: 0.6209  time: 1.0690  data_time: 0.0580  lr: 0.00048143  max_mem: 19292M
[10/09 21:41:39] d2.utils.events INFO:  eta: 14:10:20  iter: 2079  total_loss: 7.514  loss_sem_seg: 5.571  loss_relation: 0.3307  loss_center: 0.7762  loss_offset: 0.6694  time: 1.0690  data_time: 0.0615  lr: 0.00048125  max_mem: 19292M
[10/09 21:42:00] d2.utils.events INFO:  eta: 14:10:00  iter: 2099  total_loss: 7.288  loss_sem_seg: 5.33  loss_relation: 0.3255  loss_center: 0.8592  loss_offset: 0.6081  time: 1.0690  data_time: 0.0671  lr: 0.00048107  max_mem: 19292M
[10/09 21:42:21] d2.utils.events INFO:  eta: 14:09:31  iter: 2119  total_loss: 7.497  loss_sem_seg: 5.737  loss_relation: 0.3283  loss_center: 0.8747  loss_offset: 0.6233  time: 1.0690  data_time: 0.0563  lr: 0.00048089  max_mem: 19292M
[10/09 21:42:43] d2.utils.events INFO:  eta: 14:09:10  iter: 2139  total_loss: 7.178  loss_sem_seg: 5.283  loss_relation: 0.3232  loss_center: 0.8913  loss_offset: 0.6061  time: 1.0690  data_time: 0.0620  lr: 0.00048071  max_mem: 19292M
[10/09 21:43:04] d2.utils.events INFO:  eta: 14:08:47  iter: 2159  total_loss: 7.545  loss_sem_seg: 5.569  loss_relation: 0.3253  loss_center: 0.834  loss_offset: 0.708  time: 1.0690  data_time: 0.0600  lr: 0.00048053  max_mem: 19292M
[10/09 21:43:25] d2.utils.events INFO:  eta: 14:08:31  iter: 2179  total_loss: 7.056  loss_sem_seg: 5.138  loss_relation: 0.3254  loss_center: 0.8297  loss_offset: 0.6661  time: 1.0690  data_time: 0.0613  lr: 0.00048035  max_mem: 19292M
[10/09 21:43:47] d2.utils.events INFO:  eta: 14:08:12  iter: 2199  total_loss: 7.289  loss_sem_seg: 5.379  loss_relation: 0.3319  loss_center: 0.9017  loss_offset: 0.6281  time: 1.0689  data_time: 0.0638  lr: 0.00048016  max_mem: 19292M
[10/09 21:44:08] d2.utils.events INFO:  eta: 14:07:45  iter: 2219  total_loss: 7.106  loss_sem_seg: 5.263  loss_relation: 0.3216  loss_center: 0.9358  loss_offset: 0.6569  time: 1.0689  data_time: 0.0617  lr: 0.00047998  max_mem: 19292M
[10/09 21:44:29] d2.utils.events INFO:  eta: 14:07:13  iter: 2239  total_loss: 6.841  loss_sem_seg: 4.945  loss_relation: 0.3258  loss_center: 0.8708  loss_offset: 0.6243  time: 1.0688  data_time: 0.0571  lr: 0.0004798  max_mem: 19292M
[10/09 21:44:51] d2.utils.events INFO:  eta: 14:06:55  iter: 2259  total_loss: 6.961  loss_sem_seg: 5.139  loss_relation: 0.3251  loss_center: 0.8744  loss_offset: 0.6467  time: 1.0688  data_time: 0.0604  lr: 0.00047962  max_mem: 19292M
[10/09 21:45:12] d2.utils.events INFO:  eta: 14:06:39  iter: 2279  total_loss: 6.898  loss_sem_seg: 5.043  loss_relation: 0.3196  loss_center: 0.8464  loss_offset: 0.5954  time: 1.0688  data_time: 0.0650  lr: 0.00047944  max_mem: 19292M
[10/09 21:45:33] d2.utils.events INFO:  eta: 14:06:09  iter: 2299  total_loss: 6.873  loss_sem_seg: 5.145  loss_relation: 0.3222  loss_center: 0.8148  loss_offset: 0.6345  time: 1.0688  data_time: 0.0649  lr: 0.00047926  max_mem: 19292M
[10/09 21:45:55] d2.utils.events INFO:  eta: 14:05:43  iter: 2319  total_loss: 7.025  loss_sem_seg: 5.21  loss_relation: 0.3123  loss_center: 0.8577  loss_offset: 0.6456  time: 1.0687  data_time: 0.0593  lr: 0.00047908  max_mem: 19292M
[10/09 21:46:16] d2.utils.events INFO:  eta: 14:05:16  iter: 2339  total_loss: 6.87  loss_sem_seg: 5.23  loss_relation: 0.3178  loss_center: 0.8726  loss_offset: 0.5979  time: 1.0688  data_time: 0.0658  lr: 0.0004789  max_mem: 19292M
[10/09 21:46:37] d2.utils.events INFO:  eta: 14:04:50  iter: 2359  total_loss: 7.705  loss_sem_seg: 5.764  loss_relation: 0.3235  loss_center: 0.8665  loss_offset: 0.6239  time: 1.0687  data_time: 0.0605  lr: 0.00047872  max_mem: 19292M
[10/09 21:46:59] d2.utils.events INFO:  eta: 14:04:37  iter: 2379  total_loss: 6.735  loss_sem_seg: 5.145  loss_relation: 0.3271  loss_center: 0.8698  loss_offset: 0.6056  time: 1.0687  data_time: 0.0589  lr: 0.00047854  max_mem: 19292M
[10/09 21:47:20] d2.utils.events INFO:  eta: 14:04:17  iter: 2399  total_loss: 6.986  loss_sem_seg: 5.19  loss_relation: 0.3229  loss_center: 0.832  loss_offset: 0.6079  time: 1.0687  data_time: 0.0616  lr: 0.00047836  max_mem: 19292M
[10/09 21:47:41] d2.utils.events INFO:  eta: 14:03:56  iter: 2419  total_loss: 7.037  loss_sem_seg: 5.231  loss_relation: 0.3255  loss_center: 0.8137  loss_offset: 0.6399  time: 1.0687  data_time: 0.0668  lr: 0.00047818  max_mem: 19292M
[10/09 21:48:03] d2.utils.events INFO:  eta: 14:03:35  iter: 2439  total_loss: 7.048  loss_sem_seg: 5.276  loss_relation: 0.3321  loss_center: 0.8917  loss_offset: 0.6462  time: 1.0687  data_time: 0.0616  lr: 0.00047799  max_mem: 19292M
[10/09 21:48:24] d2.utils.events INFO:  eta: 14:03:14  iter: 2459  total_loss: 7.578  loss_sem_seg: 5.571  loss_relation: 0.3261  loss_center: 0.8813  loss_offset: 0.598  time: 1.0686  data_time: 0.0607  lr: 0.00047781  max_mem: 19292M
[10/09 21:48:45] d2.utils.events INFO:  eta: 14:02:54  iter: 2479  total_loss: 6.89  loss_sem_seg: 5.024  loss_relation: 0.3153  loss_center: 0.8785  loss_offset: 0.654  time: 1.0686  data_time: 0.0621  lr: 0.00047763  max_mem: 19292M
[10/09 21:49:07] d2.utils.events INFO:  eta: 14:02:32  iter: 2499  total_loss: 6.849  loss_sem_seg: 5.023  loss_relation: 0.3201  loss_center: 0.8091  loss_offset: 0.5739  time: 1.0686  data_time: 0.0614  lr: 0.00047745  max_mem: 19292M
[10/09 21:49:28] d2.utils.events INFO:  eta: 14:02:11  iter: 2519  total_loss: 7.211  loss_sem_seg: 5.322  loss_relation: 0.3249  loss_center: 0.8536  loss_offset: 0.6397  time: 1.0685  data_time: 0.0604  lr: 0.00047727  max_mem: 19292M
[10/09 21:49:49] d2.utils.events INFO:  eta: 14:01:49  iter: 2539  total_loss: 6.909  loss_sem_seg: 5.113  loss_relation: 0.3189  loss_center: 0.8882  loss_offset: 0.6229  time: 1.0685  data_time: 0.0651  lr: 0.00047709  max_mem: 19292M
[10/09 21:50:11] d2.utils.events INFO:  eta: 14:01:28  iter: 2559  total_loss: 6.932  loss_sem_seg: 4.998  loss_relation: 0.3193  loss_center: 0.9285  loss_offset: 0.6088  time: 1.0685  data_time: 0.0665  lr: 0.00047691  max_mem: 19292M
[10/09 21:50:32] d2.utils.events INFO:  eta: 14:01:10  iter: 2579  total_loss: 6.577  loss_sem_seg: 4.723  loss_relation: 0.3176  loss_center: 0.8148  loss_offset: 0.6023  time: 1.0685  data_time: 0.0641  lr: 0.00047673  max_mem: 19292M
[10/09 21:50:53] d2.utils.events INFO:  eta: 14:00:45  iter: 2599  total_loss: 6.788  loss_sem_seg: 5.037  loss_relation: 0.3183  loss_center: 0.8326  loss_offset: 0.5951  time: 1.0684  data_time: 0.0564  lr: 0.00047655  max_mem: 19292M
[10/09 21:51:14] d2.utils.events INFO:  eta: 14:00:23  iter: 2619  total_loss: 7.042  loss_sem_seg: 5.207  loss_relation: 0.3198  loss_center: 0.842  loss_offset: 0.5796  time: 1.0684  data_time: 0.0576  lr: 0.00047637  max_mem: 19292M
[10/09 21:51:36] d2.utils.events INFO:  eta: 14:00:03  iter: 2639  total_loss: 6.85  loss_sem_seg: 5.062  loss_relation: 0.3111  loss_center: 0.8375  loss_offset: 0.6221  time: 1.0684  data_time: 0.0635  lr: 0.00047619  max_mem: 19292M
[10/09 21:51:57] d2.utils.events INFO:  eta: 13:59:45  iter: 2659  total_loss: 6.857  loss_sem_seg: 4.997  loss_relation: 0.3126  loss_center: 0.865  loss_offset: 0.647  time: 1.0684  data_time: 0.0634  lr: 0.000476  max_mem: 19292M
[10/09 21:52:18] d2.utils.events INFO:  eta: 13:59:18  iter: 2679  total_loss: 6.464  loss_sem_seg: 4.674  loss_relation: 0.3106  loss_center: 0.8432  loss_offset: 0.626  time: 1.0684  data_time: 0.0633  lr: 0.00047582  max_mem: 19292M
[10/09 21:52:40] d2.utils.events INFO:  eta: 13:58:58  iter: 2699  total_loss: 7.089  loss_sem_seg: 5.289  loss_relation: 0.3043  loss_center: 0.8012  loss_offset: 0.6009  time: 1.0684  data_time: 0.0642  lr: 0.00047564  max_mem: 19292M
[10/09 21:53:01] d2.utils.events INFO:  eta: 13:58:39  iter: 2719  total_loss: 6.754  loss_sem_seg: 5.035  loss_relation: 0.3173  loss_center: 0.8171  loss_offset: 0.6303  time: 1.0684  data_time: 0.0640  lr: 0.00047546  max_mem: 19292M
[10/09 21:53:23] d2.utils.events INFO:  eta: 13:58:21  iter: 2739  total_loss: 7.472  loss_sem_seg: 5.559  loss_relation: 0.3165  loss_center: 0.8495  loss_offset: 0.6237  time: 1.0684  data_time: 0.0624  lr: 0.00047528  max_mem: 19292M
[10/09 21:53:44] d2.utils.events INFO:  eta: 13:58:02  iter: 2759  total_loss: 6.809  loss_sem_seg: 5.172  loss_relation: 0.3138  loss_center: 0.8163  loss_offset: 0.5743  time: 1.0684  data_time: 0.0672  lr: 0.0004751  max_mem: 19292M
[10/09 21:54:05] d2.utils.events INFO:  eta: 13:57:40  iter: 2779  total_loss: 7.113  loss_sem_seg: 5.463  loss_relation: 0.3208  loss_center: 0.7894  loss_offset: 0.5728  time: 1.0684  data_time: 0.0616  lr: 0.00047492  max_mem: 19292M
[10/09 21:54:27] d2.utils.events INFO:  eta: 13:57:17  iter: 2799  total_loss: 7.231  loss_sem_seg: 5.329  loss_relation: 0.3162  loss_center: 0.8725  loss_offset: 0.6247  time: 1.0683  data_time: 0.0584  lr: 0.00047474  max_mem: 19292M
[10/09 21:54:48] d2.utils.events INFO:  eta: 13:56:56  iter: 2819  total_loss: 6.529  loss_sem_seg: 4.835  loss_relation: 0.3231  loss_center: 0.8943  loss_offset: 0.5495  time: 1.0683  data_time: 0.0655  lr: 0.00047456  max_mem: 19292M
[10/09 21:55:09] d2.utils.events INFO:  eta: 13:56:34  iter: 2839  total_loss: 6.81  loss_sem_seg: 5.08  loss_relation: 0.3176  loss_center: 0.8217  loss_offset: 0.6157  time: 1.0683  data_time: 0.0619  lr: 0.00047437  max_mem: 19292M
[10/09 21:55:30] d2.utils.events INFO:  eta: 13:56:23  iter: 2859  total_loss: 6.806  loss_sem_seg: 4.997  loss_relation: 0.3136  loss_center: 0.8117  loss_offset: 0.6211  time: 1.0682  data_time: 0.0578  lr: 0.00047419  max_mem: 19292M
[10/09 21:55:52] d2.utils.events INFO:  eta: 13:55:54  iter: 2879  total_loss: 6.719  loss_sem_seg: 5.036  loss_relation: 0.3119  loss_center: 0.8589  loss_offset: 0.5979  time: 1.0682  data_time: 0.0582  lr: 0.00047401  max_mem: 19292M
[10/09 21:56:13] d2.utils.events INFO:  eta: 13:55:25  iter: 2899  total_loss: 6.388  loss_sem_seg: 4.628  loss_relation: 0.3038  loss_center: 0.8283  loss_offset: 0.5571  time: 1.0681  data_time: 0.0557  lr: 0.00047383  max_mem: 19292M
[10/09 21:56:34] d2.utils.events INFO:  eta: 13:55:03  iter: 2919  total_loss: 6.416  loss_sem_seg: 4.642  loss_relation: 0.3141  loss_center: 0.8965  loss_offset: 0.5614  time: 1.0681  data_time: 0.0658  lr: 0.00047365  max_mem: 19292M
[10/09 21:56:55] d2.utils.events INFO:  eta: 13:54:41  iter: 2939  total_loss: 6.267  loss_sem_seg: 4.509  loss_relation: 0.3007  loss_center: 0.9044  loss_offset: 0.5175  time: 1.0681  data_time: 0.0604  lr: 0.00047347  max_mem: 19292M
[10/09 21:57:17] d2.utils.events INFO:  eta: 13:54:21  iter: 2959  total_loss: 6.205  loss_sem_seg: 4.646  loss_relation: 0.3123  loss_center: 0.7866  loss_offset: 0.5427  time: 1.0681  data_time: 0.0627  lr: 0.00047329  max_mem: 19292M
[10/09 21:57:38] d2.utils.events INFO:  eta: 13:53:59  iter: 2979  total_loss: 6.066  loss_sem_seg: 4.289  loss_relation: 0.3045  loss_center: 0.873  loss_offset: 0.611  time: 1.0681  data_time: 0.0584  lr: 0.00047311  max_mem: 19292M
[10/09 21:57:59] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0002999.pth
[10/09 21:58:01] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/09 21:58:01] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/09 21:58:01] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/09 21:58:01] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/09 21:58:16] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0005 s/iter. Inference: 0.0732 s/iter. Eval: 0.0291 s/iter. Total: 0.1028 s/iter. ETA=0:00:24
[10/09 21:58:21] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0013 s/iter. Inference: 0.0674 s/iter. Eval: 0.0288 s/iter. Total: 0.0975 s/iter. ETA=0:00:18
[10/09 21:58:26] d2.evaluation.evaluator INFO: Inference done 118/250. Dataloading: 0.0016 s/iter. Inference: 0.0646 s/iter. Eval: 0.0283 s/iter. Total: 0.0946 s/iter. ETA=0:00:12
[10/09 21:58:31] d2.evaluation.evaluator INFO: Inference done 173/250. Dataloading: 0.0015 s/iter. Inference: 0.0638 s/iter. Eval: 0.0281 s/iter. Total: 0.0935 s/iter. ETA=0:00:07
[10/09 21:58:36] d2.evaluation.evaluator INFO: Inference done 230/250. Dataloading: 0.0015 s/iter. Inference: 0.0630 s/iter. Eval: 0.0278 s/iter. Total: 0.0924 s/iter. ETA=0:00:01
[10/09 21:58:38] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.018395 (0.093953 s / iter per device, on 2 devices)
[10/09 21:58:38] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062892 s / iter per device, on 2 devices)
[10/09 21:58:38] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalvk0p_st8 ...
[10/09 21:58:43] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 7.259733203301084
[10/09 21:58:43] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 7.847  | 31.353 | 10.519 |      129      |
| Things | 5.000  | 28.882 | 7.087  |      76       |
| Stuff  | 11.930 | 34.895 | 15.440 |      53       |
[10/09 21:58:43] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/09 21:58:43] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/09 21:58:43] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/09 21:58:43] d2.evaluation.testing INFO: copypaste: 7.8468,31.3525,10.5190,4.9996,28.8822,7.0871,11.9295,34.8949,15.4401
[10/09 21:58:43] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/09 21:58:43] d2.evaluation.testing INFO: copypaste: mean_recall
[10/09 21:58:43] d2.evaluation.testing INFO: copypaste: 0.0726
[10/09 21:58:43] d2.utils.events INFO:  eta: 13:53:37  iter: 2999  total_loss: 5.879  loss_sem_seg: 4.178  loss_relation: 0.307  loss_center: 0.7812  loss_offset: 0.5652  time: 1.0680  data_time: 0.0566  lr: 0.00047293  max_mem: 19292M
[10/09 21:58:43] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/09 21:58:50] d2.engine.hooks INFO: Saved best model as latest eval score for relation_mean_recall/mean_recall is 0.07260, better than last best score 0.07255 @ iteration 1999.
[10/09 21:59:11] d2.utils.events INFO:  eta: 13:53:16  iter: 3019  total_loss: 7.002  loss_sem_seg: 5.205  loss_relation: 0.3146  loss_center: 0.8371  loss_offset: 0.5327  time: 1.0680  data_time: 0.0606  lr: 0.00047275  max_mem: 19292M
[10/09 21:59:32] d2.utils.events INFO:  eta: 13:52:54  iter: 3039  total_loss: 6.748  loss_sem_seg: 4.903  loss_relation: 0.3215  loss_center: 0.8363  loss_offset: 0.5654  time: 1.0679  data_time: 0.0596  lr: 0.00047256  max_mem: 19292M
[10/09 21:59:54] d2.utils.events INFO:  eta: 13:52:33  iter: 3059  total_loss: 6.592  loss_sem_seg: 4.81  loss_relation: 0.3218  loss_center: 0.8671  loss_offset: 0.5928  time: 1.0679  data_time: 0.0605  lr: 0.00047238  max_mem: 19292M
[10/09 22:00:15] d2.utils.events INFO:  eta: 13:52:05  iter: 3079  total_loss: 6.209  loss_sem_seg: 4.571  loss_relation: 0.3045  loss_center: 0.77  loss_offset: 0.5422  time: 1.0679  data_time: 0.0618  lr: 0.0004722  max_mem: 19292M
[10/09 22:00:37] d2.utils.events INFO:  eta: 13:51:50  iter: 3099  total_loss: 7.121  loss_sem_seg: 5.19  loss_relation: 0.3158  loss_center: 0.8142  loss_offset: 0.6054  time: 1.0680  data_time: 0.0701  lr: 0.00047202  max_mem: 19292M
[10/09 22:00:58] d2.utils.events INFO:  eta: 13:51:41  iter: 3119  total_loss: 6.447  loss_sem_seg: 4.718  loss_relation: 0.3131  loss_center: 0.7597  loss_offset: 0.5657  time: 1.0680  data_time: 0.0640  lr: 0.00047184  max_mem: 19292M
[10/09 22:01:19] d2.utils.events INFO:  eta: 13:51:12  iter: 3139  total_loss: 6.184  loss_sem_seg: 4.5  loss_relation: 0.3042  loss_center: 0.8201  loss_offset: 0.5296  time: 1.0680  data_time: 0.0642  lr: 0.00047166  max_mem: 19292M
[10/09 22:01:41] d2.utils.events INFO:  eta: 13:50:53  iter: 3159  total_loss: 6.962  loss_sem_seg: 5.2  loss_relation: 0.3024  loss_center: 0.8483  loss_offset: 0.5655  time: 1.0680  data_time: 0.0633  lr: 0.00047148  max_mem: 19292M
[10/09 22:02:02] d2.utils.events INFO:  eta: 13:50:30  iter: 3179  total_loss: 6.526  loss_sem_seg: 4.849  loss_relation: 0.304  loss_center: 0.7547  loss_offset: 0.5841  time: 1.0680  data_time: 0.0598  lr: 0.0004713  max_mem: 19292M
[10/09 22:02:23] d2.utils.events INFO:  eta: 13:50:01  iter: 3199  total_loss: 6.855  loss_sem_seg: 4.995  loss_relation: 0.2962  loss_center: 0.8574  loss_offset: 0.5478  time: 1.0679  data_time: 0.0566  lr: 0.00047111  max_mem: 19292M
[10/09 22:02:45] d2.utils.events INFO:  eta: 13:49:36  iter: 3219  total_loss: 6.641  loss_sem_seg: 4.789  loss_relation: 0.3137  loss_center: 0.9205  loss_offset: 0.543  time: 1.0679  data_time: 0.0624  lr: 0.00047093  max_mem: 19292M
[10/09 22:03:06] d2.utils.events INFO:  eta: 13:49:31  iter: 3239  total_loss: 6.258  loss_sem_seg: 4.551  loss_relation: 0.3018  loss_center: 0.7518  loss_offset: 0.5565  time: 1.0679  data_time: 0.0617  lr: 0.00047075  max_mem: 19292M
[10/09 22:03:28] d2.utils.events INFO:  eta: 13:49:14  iter: 3259  total_loss: 6.251  loss_sem_seg: 4.473  loss_relation: 0.3132  loss_center: 0.8047  loss_offset: 0.5531  time: 1.0679  data_time: 0.0686  lr: 0.00047057  max_mem: 19292M
[10/09 22:03:49] d2.utils.events INFO:  eta: 13:48:53  iter: 3279  total_loss: 6.024  loss_sem_seg: 4.427  loss_relation: 0.299  loss_center: 0.8253  loss_offset: 0.5608  time: 1.0680  data_time: 0.0625  lr: 0.00047039  max_mem: 19292M
[10/09 22:04:10] d2.utils.events INFO:  eta: 13:48:30  iter: 3299  total_loss: 6.402  loss_sem_seg: 4.71  loss_relation: 0.308  loss_center: 0.8379  loss_offset: 0.5827  time: 1.0679  data_time: 0.0636  lr: 0.00047021  max_mem: 19292M
[10/09 22:04:32] d2.utils.events INFO:  eta: 13:48:20  iter: 3319  total_loss: 6.204  loss_sem_seg: 4.434  loss_relation: 0.3069  loss_center: 0.8261  loss_offset: 0.5746  time: 1.0679  data_time: 0.0646  lr: 0.00047003  max_mem: 19292M
[10/09 22:04:53] d2.utils.events INFO:  eta: 13:48:05  iter: 3339  total_loss: 5.946  loss_sem_seg: 4.184  loss_relation: 0.3029  loss_center: 0.8819  loss_offset: 0.5708  time: 1.0679  data_time: 0.0610  lr: 0.00046985  max_mem: 19292M
[10/09 22:05:14] d2.utils.events INFO:  eta: 13:47:51  iter: 3359  total_loss: 6.411  loss_sem_seg: 4.776  loss_relation: 0.3162  loss_center: 0.7652  loss_offset: 0.5761  time: 1.0679  data_time: 0.0631  lr: 0.00046966  max_mem: 19292M
[10/09 22:05:36] d2.utils.events INFO:  eta: 13:47:31  iter: 3379  total_loss: 5.953  loss_sem_seg: 4.289  loss_relation: 0.3098  loss_center: 0.777  loss_offset: 0.558  time: 1.0679  data_time: 0.0591  lr: 0.00046948  max_mem: 19292M
[10/09 22:05:57] d2.utils.events INFO:  eta: 13:47:06  iter: 3399  total_loss: 5.617  loss_sem_seg: 4.099  loss_relation: 0.2893  loss_center: 0.7449  loss_offset: 0.5586  time: 1.0678  data_time: 0.0578  lr: 0.0004693  max_mem: 19292M
[10/09 22:06:18] d2.utils.events INFO:  eta: 13:46:40  iter: 3419  total_loss: 5.709  loss_sem_seg: 4.062  loss_relation: 0.2956  loss_center: 0.8096  loss_offset: 0.4743  time: 1.0678  data_time: 0.0595  lr: 0.00046912  max_mem: 19292M
[10/09 22:06:39] d2.utils.events INFO:  eta: 13:46:26  iter: 3439  total_loss: 6.101  loss_sem_seg: 4.373  loss_relation: 0.3069  loss_center: 0.83  loss_offset: 0.5454  time: 1.0678  data_time: 0.0564  lr: 0.00046894  max_mem: 19292M
[10/09 22:07:01] d2.utils.events INFO:  eta: 13:45:58  iter: 3459  total_loss: 6.089  loss_sem_seg: 4.324  loss_relation: 0.3068  loss_center: 0.8136  loss_offset: 0.5667  time: 1.0678  data_time: 0.0628  lr: 0.00046876  max_mem: 19292M
[10/09 22:07:22] d2.utils.events INFO:  eta: 13:45:36  iter: 3479  total_loss: 6.161  loss_sem_seg: 4.358  loss_relation: 0.3005  loss_center: 0.8586  loss_offset: 0.5968  time: 1.0677  data_time: 0.0593  lr: 0.00046858  max_mem: 19292M
[10/09 22:07:43] d2.utils.events INFO:  eta: 13:45:22  iter: 3499  total_loss: 6.686  loss_sem_seg: 4.91  loss_relation: 0.3114  loss_center: 0.858  loss_offset: 0.5407  time: 1.0677  data_time: 0.0550  lr: 0.0004684  max_mem: 19292M
[10/09 22:08:04] d2.utils.events INFO:  eta: 13:45:00  iter: 3519  total_loss: 6.023  loss_sem_seg: 4.382  loss_relation: 0.2964  loss_center: 0.7968  loss_offset: 0.5269  time: 1.0677  data_time: 0.0641  lr: 0.00046821  max_mem: 19292M
[10/09 22:08:26] d2.utils.events INFO:  eta: 13:44:36  iter: 3539  total_loss: 6.428  loss_sem_seg: 4.848  loss_relation: 0.3097  loss_center: 0.8423  loss_offset: 0.5338  time: 1.0677  data_time: 0.0650  lr: 0.00046803  max_mem: 19292M
[10/09 22:08:47] d2.utils.events INFO:  eta: 13:44:19  iter: 3559  total_loss: 6.401  loss_sem_seg: 4.687  loss_relation: 0.2987  loss_center: 0.8027  loss_offset: 0.6019  time: 1.0677  data_time: 0.0646  lr: 0.00046785  max_mem: 19292M
[10/09 22:09:08] d2.utils.events INFO:  eta: 13:43:49  iter: 3579  total_loss: 5.893  loss_sem_seg: 4.265  loss_relation: 0.2992  loss_center: 0.8007  loss_offset: 0.546  time: 1.0677  data_time: 0.0600  lr: 0.00046767  max_mem: 19292M
[10/09 22:09:30] d2.utils.events INFO:  eta: 13:43:35  iter: 3599  total_loss: 6.418  loss_sem_seg: 4.653  loss_relation: 0.2985  loss_center: 0.8136  loss_offset: 0.5756  time: 1.0676  data_time: 0.0588  lr: 0.00046749  max_mem: 19292M
[10/09 22:09:51] d2.utils.events INFO:  eta: 13:43:11  iter: 3619  total_loss: 6.573  loss_sem_seg: 5.043  loss_relation: 0.3034  loss_center: 0.828  loss_offset: 0.5798  time: 1.0676  data_time: 0.0605  lr: 0.00046731  max_mem: 19292M
[10/09 22:10:12] d2.utils.events INFO:  eta: 13:42:50  iter: 3639  total_loss: 5.869  loss_sem_seg: 4.294  loss_relation: 0.2942  loss_center: 0.8131  loss_offset: 0.5201  time: 1.0676  data_time: 0.0680  lr: 0.00046713  max_mem: 19292M
[10/09 22:10:34] d2.utils.events INFO:  eta: 13:42:29  iter: 3659  total_loss: 6.776  loss_sem_seg: 4.978  loss_relation: 0.3069  loss_center: 0.7787  loss_offset: 0.6259  time: 1.0676  data_time: 0.0645  lr: 0.00046695  max_mem: 19292M
[10/09 22:10:55] d2.utils.events INFO:  eta: 13:42:11  iter: 3679  total_loss: 5.825  loss_sem_seg: 4.208  loss_relation: 0.2942  loss_center: 0.7697  loss_offset: 0.4901  time: 1.0676  data_time: 0.0565  lr: 0.00046676  max_mem: 19292M
[10/09 22:11:16] d2.utils.events INFO:  eta: 13:41:50  iter: 3699  total_loss: 6.132  loss_sem_seg: 4.43  loss_relation: 0.297  loss_center: 0.8163  loss_offset: 0.5465  time: 1.0676  data_time: 0.0654  lr: 0.00046658  max_mem: 19292M
[10/09 22:11:38] d2.utils.events INFO:  eta: 13:41:27  iter: 3719  total_loss: 5.989  loss_sem_seg: 4.197  loss_relation: 0.3013  loss_center: 0.8783  loss_offset: 0.5576  time: 1.0676  data_time: 0.0654  lr: 0.0004664  max_mem: 19292M
[10/09 22:11:59] d2.utils.events INFO:  eta: 13:41:06  iter: 3739  total_loss: 5.73  loss_sem_seg: 4.122  loss_relation: 0.2896  loss_center: 0.7354  loss_offset: 0.5183  time: 1.0677  data_time: 0.0636  lr: 0.00046622  max_mem: 19292M
[10/09 22:12:21] d2.utils.events INFO:  eta: 13:40:41  iter: 3759  total_loss: 6.02  loss_sem_seg: 4.322  loss_relation: 0.2973  loss_center: 0.8354  loss_offset: 0.563  time: 1.0676  data_time: 0.0599  lr: 0.00046604  max_mem: 19292M
[10/09 22:12:42] d2.utils.events INFO:  eta: 13:40:04  iter: 3779  total_loss: 5.966  loss_sem_seg: 4.157  loss_relation: 0.2953  loss_center: 0.7944  loss_offset: 0.5556  time: 1.0676  data_time: 0.0589  lr: 0.00046586  max_mem: 19292M
[10/09 22:13:03] d2.utils.events INFO:  eta: 13:39:43  iter: 3799  total_loss: 6.43  loss_sem_seg: 4.685  loss_relation: 0.3138  loss_center: 0.7917  loss_offset: 0.6053  time: 1.0676  data_time: 0.0598  lr: 0.00046568  max_mem: 19292M
[10/09 22:13:24] d2.utils.events INFO:  eta: 13:39:19  iter: 3819  total_loss: 6  loss_sem_seg: 4.442  loss_relation: 0.2915  loss_center: 0.7452  loss_offset: 0.5398  time: 1.0676  data_time: 0.0615  lr: 0.00046549  max_mem: 19292M
[10/09 22:13:46] d2.utils.events INFO:  eta: 13:39:01  iter: 3839  total_loss: 5.885  loss_sem_seg: 4.269  loss_relation: 0.3021  loss_center: 0.8366  loss_offset: 0.4921  time: 1.0676  data_time: 0.0593  lr: 0.00046531  max_mem: 19292M
[10/09 22:14:07] d2.utils.events INFO:  eta: 13:38:37  iter: 3859  total_loss: 5.995  loss_sem_seg: 4.208  loss_relation: 0.295  loss_center: 0.8098  loss_offset: 0.5684  time: 1.0676  data_time: 0.0589  lr: 0.00046513  max_mem: 19292M
[10/09 22:14:28] d2.utils.events INFO:  eta: 13:38:14  iter: 3879  total_loss: 6.073  loss_sem_seg: 4.26  loss_relation: 0.305  loss_center: 0.8547  loss_offset: 0.55  time: 1.0675  data_time: 0.0605  lr: 0.00046495  max_mem: 19292M
[10/09 22:14:50] d2.utils.events INFO:  eta: 13:37:56  iter: 3899  total_loss: 5.976  loss_sem_seg: 4.353  loss_relation: 0.3007  loss_center: 0.7988  loss_offset: 0.5088  time: 1.0675  data_time: 0.0661  lr: 0.00046477  max_mem: 19292M
[10/09 22:15:11] d2.utils.events INFO:  eta: 13:37:33  iter: 3919  total_loss: 5.894  loss_sem_seg: 4.28  loss_relation: 0.2931  loss_center: 0.8073  loss_offset: 0.5331  time: 1.0675  data_time: 0.0586  lr: 0.00046459  max_mem: 19292M
[10/09 22:15:32] d2.utils.events INFO:  eta: 13:37:08  iter: 3939  total_loss: 6.238  loss_sem_seg: 4.574  loss_relation: 0.3059  loss_center: 0.8135  loss_offset: 0.5968  time: 1.0675  data_time: 0.0573  lr: 0.00046441  max_mem: 19292M
[10/09 22:15:54] d2.utils.events INFO:  eta: 13:36:40  iter: 3959  total_loss: 5.894  loss_sem_seg: 4.268  loss_relation: 0.2929  loss_center: 0.8014  loss_offset: 0.5437  time: 1.0675  data_time: 0.0593  lr: 0.00046422  max_mem: 19292M
[10/09 22:16:15] d2.utils.events INFO:  eta: 13:36:17  iter: 3979  total_loss: 5.798  loss_sem_seg: 4.162  loss_relation: 0.2855  loss_center: 0.7767  loss_offset: 0.4998  time: 1.0675  data_time: 0.0578  lr: 0.00046404  max_mem: 19292M
[10/09 22:16:36] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0003999.pth
[10/09 22:16:38] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/09 22:16:38] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/09 22:16:38] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/09 22:16:38] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/09 22:16:53] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0009 s/iter. Inference: 0.0760 s/iter. Eval: 0.0309 s/iter. Total: 0.1079 s/iter. ETA=0:00:25
[10/09 22:16:58] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0013 s/iter. Inference: 0.0684 s/iter. Eval: 0.0292 s/iter. Total: 0.0989 s/iter. ETA=0:00:18
[10/09 22:17:03] d2.evaluation.evaluator INFO: Inference done 119/250. Dataloading: 0.0014 s/iter. Inference: 0.0646 s/iter. Eval: 0.0286 s/iter. Total: 0.0946 s/iter. ETA=0:00:12
[10/09 22:17:08] d2.evaluation.evaluator INFO: Inference done 174/250. Dataloading: 0.0014 s/iter. Inference: 0.0639 s/iter. Eval: 0.0283 s/iter. Total: 0.0937 s/iter. ETA=0:00:07
[10/09 22:17:13] d2.evaluation.evaluator INFO: Inference done 232/250. Dataloading: 0.0014 s/iter. Inference: 0.0629 s/iter. Eval: 0.0278 s/iter. Total: 0.0921 s/iter. ETA=0:00:01
[10/09 22:17:15] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.982518 (0.093806 s / iter per device, on 2 devices)
[10/09 22:17:15] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063083 s / iter per device, on 2 devices)
[10/09 22:17:15] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalrbq6gtkr ...
[10/09 22:17:20] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 8.777202422757139
[10/09 22:17:20] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 8.941  | 36.823 | 12.078 |      129      |
| Things | 6.345  | 36.657 | 8.973  |      76       |
| Stuff  | 12.664 | 37.061 | 16.531 |      53       |
[10/09 22:17:20] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/09 22:17:20] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/09 22:17:20] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/09 22:17:20] d2.evaluation.testing INFO: copypaste: 8.9413,36.8225,12.0782,6.3453,36.6566,8.9732,12.6638,37.0605,16.5306
[10/09 22:17:20] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/09 22:17:20] d2.evaluation.testing INFO: copypaste: mean_recall
[10/09 22:17:20] d2.evaluation.testing INFO: copypaste: 0.0878
[10/09 22:17:20] d2.utils.events INFO:  eta: 13:36:05  iter: 3999  total_loss: 6.237  loss_sem_seg: 4.306  loss_relation: 0.2892  loss_center: 0.83  loss_offset: 0.537  time: 1.0675  data_time: 0.0665  lr: 0.00046386  max_mem: 19292M
[10/09 22:17:20] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/09 22:17:27] d2.engine.hooks INFO: Saved best model as latest eval score for relation_mean_recall/mean_recall is 0.08777, better than last best score 0.07260 @ iteration 2999.
[10/09 22:17:49] d2.utils.events INFO:  eta: 13:35:46  iter: 4019  total_loss: 5.48  loss_sem_seg: 3.928  loss_relation: 0.3001  loss_center: 0.8069  loss_offset: 0.4442  time: 1.0675  data_time: 0.0618  lr: 0.00046368  max_mem: 19292M
[10/09 22:18:10] d2.utils.events INFO:  eta: 13:35:29  iter: 4039  total_loss: 5.847  loss_sem_seg: 4.1  loss_relation: 0.296  loss_center: 0.8112  loss_offset: 0.5049  time: 1.0674  data_time: 0.0591  lr: 0.0004635  max_mem: 19292M
[10/09 22:18:31] d2.utils.events INFO:  eta: 13:35:06  iter: 4059  total_loss: 6.015  loss_sem_seg: 4.2  loss_relation: 0.3029  loss_center: 0.8519  loss_offset: 0.5418  time: 1.0675  data_time: 0.0582  lr: 0.00046332  max_mem: 19292M
[10/09 22:18:52] d2.utils.events INFO:  eta: 13:34:43  iter: 4079  total_loss: 5.89  loss_sem_seg: 4.32  loss_relation: 0.2895  loss_center: 0.7488  loss_offset: 0.5597  time: 1.0674  data_time: 0.0576  lr: 0.00046313  max_mem: 19292M
[10/09 22:19:14] d2.utils.events INFO:  eta: 13:34:13  iter: 4099  total_loss: 5.344  loss_sem_seg: 3.751  loss_relation: 0.3001  loss_center: 0.7548  loss_offset: 0.473  time: 1.0674  data_time: 0.0589  lr: 0.00046295  max_mem: 19292M
[10/09 22:19:35] d2.utils.events INFO:  eta: 13:33:41  iter: 4119  total_loss: 6.093  loss_sem_seg: 4.344  loss_relation: 0.2884  loss_center: 0.7816  loss_offset: 0.4992  time: 1.0674  data_time: 0.0600  lr: 0.00046277  max_mem: 19292M
[10/09 22:19:57] d2.utils.events INFO:  eta: 13:33:26  iter: 4139  total_loss: 5.998  loss_sem_seg: 4.382  loss_relation: 0.3055  loss_center: 0.757  loss_offset: 0.5497  time: 1.0674  data_time: 0.0639  lr: 0.00046259  max_mem: 19292M
[10/09 22:20:18] d2.utils.events INFO:  eta: 13:33:04  iter: 4159  total_loss: 5.608  loss_sem_seg: 4.027  loss_relation: 0.2922  loss_center: 0.819  loss_offset: 0.516  time: 1.0674  data_time: 0.0562  lr: 0.00046241  max_mem: 19292M
[10/09 22:20:39] d2.utils.events INFO:  eta: 13:32:48  iter: 4179  total_loss: 5.882  loss_sem_seg: 4.303  loss_relation: 0.2879  loss_center: 0.7815  loss_offset: 0.5464  time: 1.0675  data_time: 0.0701  lr: 0.00046223  max_mem: 19292M
[10/09 22:21:01] d2.utils.events INFO:  eta: 13:32:35  iter: 4199  total_loss: 6.162  loss_sem_seg: 4.516  loss_relation: 0.2984  loss_center: 0.7653  loss_offset: 0.5643  time: 1.0674  data_time: 0.0576  lr: 0.00046205  max_mem: 19292M
[10/09 22:21:22] d2.utils.events INFO:  eta: 13:32:19  iter: 4219  total_loss: 5.719  loss_sem_seg: 4.127  loss_relation: 0.289  loss_center: 0.8108  loss_offset: 0.5534  time: 1.0674  data_time: 0.0657  lr: 0.00046186  max_mem: 19292M
[10/09 22:21:43] d2.utils.events INFO:  eta: 13:31:51  iter: 4239  total_loss: 5.888  loss_sem_seg: 4.281  loss_relation: 0.2909  loss_center: 0.7754  loss_offset: 0.5406  time: 1.0674  data_time: 0.0594  lr: 0.00046168  max_mem: 19292M
[10/09 22:22:04] d2.utils.events INFO:  eta: 13:31:16  iter: 4259  total_loss: 5.167  loss_sem_seg: 3.592  loss_relation: 0.2949  loss_center: 0.7995  loss_offset: 0.5269  time: 1.0674  data_time: 0.0553  lr: 0.0004615  max_mem: 19292M
[10/09 22:22:26] d2.utils.events INFO:  eta: 13:30:53  iter: 4279  total_loss: 5.975  loss_sem_seg: 4.353  loss_relation: 0.3036  loss_center: 0.7582  loss_offset: 0.5027  time: 1.0674  data_time: 0.0590  lr: 0.00046132  max_mem: 19292M
[10/09 22:22:47] d2.utils.events INFO:  eta: 13:30:27  iter: 4299  total_loss: 5.78  loss_sem_seg: 4.072  loss_relation: 0.2927  loss_center: 0.7527  loss_offset: 0.5355  time: 1.0674  data_time: 0.0559  lr: 0.00046114  max_mem: 19292M
[10/09 22:23:08] d2.utils.events INFO:  eta: 13:30:12  iter: 4319  total_loss: 5.7  loss_sem_seg: 4.062  loss_relation: 0.288  loss_center: 0.7687  loss_offset: 0.5093  time: 1.0674  data_time: 0.0650  lr: 0.00046096  max_mem: 19292M
[10/09 22:23:30] d2.utils.events INFO:  eta: 13:29:54  iter: 4339  total_loss: 5.736  loss_sem_seg: 4.262  loss_relation: 0.2811  loss_center: 0.7725  loss_offset: 0.5404  time: 1.0674  data_time: 0.0668  lr: 0.00046077  max_mem: 19292M
[10/09 22:23:51] d2.utils.events INFO:  eta: 13:29:32  iter: 4359  total_loss: 5.812  loss_sem_seg: 4.251  loss_relation: 0.2832  loss_center: 0.7689  loss_offset: 0.5358  time: 1.0674  data_time: 0.0611  lr: 0.00046059  max_mem: 19292M
[10/09 22:24:12] d2.utils.events INFO:  eta: 13:29:04  iter: 4379  total_loss: 5.688  loss_sem_seg: 4.002  loss_relation: 0.2969  loss_center: 0.7963  loss_offset: 0.5148  time: 1.0673  data_time: 0.0557  lr: 0.00046041  max_mem: 19292M
[10/09 22:24:34] d2.utils.events INFO:  eta: 13:28:48  iter: 4399  total_loss: 5.806  loss_sem_seg: 4.172  loss_relation: 0.2878  loss_center: 0.7853  loss_offset: 0.5365  time: 1.0673  data_time: 0.0647  lr: 0.00046023  max_mem: 19292M
[10/09 22:24:55] d2.utils.events INFO:  eta: 13:28:30  iter: 4419  total_loss: 6.205  loss_sem_seg: 4.465  loss_relation: 0.3019  loss_center: 0.829  loss_offset: 0.5237  time: 1.0674  data_time: 0.0692  lr: 0.00046005  max_mem: 19292M
[10/09 22:25:16] d2.utils.events INFO:  eta: 13:28:09  iter: 4439  total_loss: 5.672  loss_sem_seg: 4.013  loss_relation: 0.2878  loss_center: 0.8016  loss_offset: 0.5624  time: 1.0673  data_time: 0.0562  lr: 0.00045987  max_mem: 19292M
[10/09 22:25:38] d2.utils.events INFO:  eta: 13:27:47  iter: 4459  total_loss: 5.779  loss_sem_seg: 4.176  loss_relation: 0.2914  loss_center: 0.8095  loss_offset: 0.5229  time: 1.0673  data_time: 0.0600  lr: 0.00045968  max_mem: 19292M
[10/09 22:25:59] d2.utils.events INFO:  eta: 13:27:25  iter: 4479  total_loss: 5.668  loss_sem_seg: 4.022  loss_relation: 0.2996  loss_center: 0.805  loss_offset: 0.544  time: 1.0673  data_time: 0.0611  lr: 0.0004595  max_mem: 19292M
[10/09 22:26:20] d2.utils.events INFO:  eta: 13:27:05  iter: 4499  total_loss: 5.766  loss_sem_seg: 4.151  loss_relation: 0.2906  loss_center: 0.7517  loss_offset: 0.5505  time: 1.0673  data_time: 0.0608  lr: 0.00045932  max_mem: 19292M
[10/09 22:26:42] d2.utils.events INFO:  eta: 13:26:43  iter: 4519  total_loss: 5.542  loss_sem_seg: 3.938  loss_relation: 0.27  loss_center: 0.7839  loss_offset: 0.5449  time: 1.0673  data_time: 0.0579  lr: 0.00045914  max_mem: 19292M
[10/09 22:27:03] d2.utils.events INFO:  eta: 13:26:19  iter: 4539  total_loss: 5.645  loss_sem_seg: 4.032  loss_relation: 0.2921  loss_center: 0.7007  loss_offset: 0.5563  time: 1.0673  data_time: 0.0609  lr: 0.00045896  max_mem: 19292M
[10/09 22:27:24] d2.utils.events INFO:  eta: 13:25:56  iter: 4559  total_loss: 5.384  loss_sem_seg: 3.918  loss_relation: 0.285  loss_center: 0.7289  loss_offset: 0.474  time: 1.0673  data_time: 0.0659  lr: 0.00045878  max_mem: 19292M
[10/09 22:27:46] d2.utils.events INFO:  eta: 13:25:35  iter: 4579  total_loss: 5.47  loss_sem_seg: 3.944  loss_relation: 0.2861  loss_center: 0.7388  loss_offset: 0.5306  time: 1.0673  data_time: 0.0651  lr: 0.00045859  max_mem: 19292M
[10/09 22:28:07] d2.utils.events INFO:  eta: 13:25:20  iter: 4599  total_loss: 5.741  loss_sem_seg: 4.15  loss_relation: 0.2864  loss_center: 0.7836  loss_offset: 0.4964  time: 1.0673  data_time: 0.0639  lr: 0.00045841  max_mem: 19292M
[10/09 22:28:29] d2.utils.events INFO:  eta: 13:24:57  iter: 4619  total_loss: 5.383  loss_sem_seg: 3.89  loss_relation: 0.2942  loss_center: 0.7172  loss_offset: 0.512  time: 1.0673  data_time: 0.0648  lr: 0.00045823  max_mem: 19292M
[10/09 22:28:50] d2.utils.events INFO:  eta: 13:24:45  iter: 4639  total_loss: 5.823  loss_sem_seg: 4.168  loss_relation: 0.2876  loss_center: 0.8151  loss_offset: 0.4541  time: 1.0674  data_time: 0.0666  lr: 0.00045805  max_mem: 19292M
[10/09 22:29:12] d2.utils.events INFO:  eta: 13:24:21  iter: 4659  total_loss: 5.443  loss_sem_seg: 3.861  loss_relation: 0.2837  loss_center: 0.7011  loss_offset: 0.4861  time: 1.0674  data_time: 0.0595  lr: 0.00045787  max_mem: 19292M
[10/09 22:29:33] d2.utils.events INFO:  eta: 13:24:00  iter: 4679  total_loss: 5.297  loss_sem_seg: 3.665  loss_relation: 0.288  loss_center: 0.7539  loss_offset: 0.5167  time: 1.0674  data_time: 0.0613  lr: 0.00045768  max_mem: 19292M
[10/09 22:29:54] d2.utils.events INFO:  eta: 13:23:38  iter: 4699  total_loss: 5.574  loss_sem_seg: 4.097  loss_relation: 0.2869  loss_center: 0.8351  loss_offset: 0.4799  time: 1.0674  data_time: 0.0604  lr: 0.0004575  max_mem: 19292M
[10/09 22:30:15] d2.utils.events INFO:  eta: 13:23:11  iter: 4719  total_loss: 6.221  loss_sem_seg: 4.395  loss_relation: 0.2856  loss_center: 0.8223  loss_offset: 0.5858  time: 1.0673  data_time: 0.0630  lr: 0.00045732  max_mem: 19292M
[10/09 22:30:37] d2.utils.events INFO:  eta: 13:22:40  iter: 4739  total_loss: 5.51  loss_sem_seg: 3.83  loss_relation: 0.2899  loss_center: 0.8297  loss_offset: 0.506  time: 1.0673  data_time: 0.0610  lr: 0.00045714  max_mem: 19292M
[10/09 22:30:58] d2.utils.events INFO:  eta: 13:22:21  iter: 4759  total_loss: 5.649  loss_sem_seg: 3.935  loss_relation: 0.298  loss_center: 0.7673  loss_offset: 0.5263  time: 1.0673  data_time: 0.0643  lr: 0.00045696  max_mem: 19292M
[10/09 22:31:19] d2.utils.events INFO:  eta: 13:22:01  iter: 4779  total_loss: 5.574  loss_sem_seg: 4.034  loss_relation: 0.2909  loss_center: 0.7984  loss_offset: 0.5141  time: 1.0673  data_time: 0.0598  lr: 0.00045678  max_mem: 19292M
[10/09 22:31:41] d2.utils.events INFO:  eta: 13:21:39  iter: 4799  total_loss: 5.635  loss_sem_seg: 3.971  loss_relation: 0.2909  loss_center: 0.7823  loss_offset: 0.5462  time: 1.0673  data_time: 0.0635  lr: 0.00045659  max_mem: 19292M
[10/09 22:32:02] d2.utils.events INFO:  eta: 13:21:11  iter: 4819  total_loss: 5.075  loss_sem_seg: 3.597  loss_relation: 0.2826  loss_center: 0.7534  loss_offset: 0.4751  time: 1.0673  data_time: 0.0593  lr: 0.00045641  max_mem: 19292M
[10/09 22:32:23] d2.utils.events INFO:  eta: 13:20:43  iter: 4839  total_loss: 5.454  loss_sem_seg: 3.83  loss_relation: 0.2926  loss_center: 0.8475  loss_offset: 0.5078  time: 1.0673  data_time: 0.0622  lr: 0.00045623  max_mem: 19292M
[10/09 22:32:44] d2.utils.events INFO:  eta: 13:20:21  iter: 4859  total_loss: 5.477  loss_sem_seg: 3.902  loss_relation: 0.2895  loss_center: 0.7483  loss_offset: 0.4775  time: 1.0673  data_time: 0.0616  lr: 0.00045605  max_mem: 19292M
[10/09 22:33:06] d2.utils.events INFO:  eta: 13:20:00  iter: 4879  total_loss: 5.29  loss_sem_seg: 3.652  loss_relation: 0.2924  loss_center: 0.8303  loss_offset: 0.4713  time: 1.0672  data_time: 0.0552  lr: 0.00045587  max_mem: 19292M
[10/09 22:33:27] d2.utils.events INFO:  eta: 13:19:51  iter: 4899  total_loss: 5.569  loss_sem_seg: 3.995  loss_relation: 0.2879  loss_center: 0.6978  loss_offset: 0.5154  time: 1.0672  data_time: 0.0602  lr: 0.00045568  max_mem: 19292M
[10/09 22:33:48] d2.utils.events INFO:  eta: 13:19:32  iter: 4919  total_loss: 5.574  loss_sem_seg: 4.021  loss_relation: 0.2832  loss_center: 0.7613  loss_offset: 0.4662  time: 1.0672  data_time: 0.0587  lr: 0.0004555  max_mem: 19292M
[10/09 22:34:10] d2.utils.events INFO:  eta: 13:19:15  iter: 4939  total_loss: 5.67  loss_sem_seg: 4.068  loss_relation: 0.3015  loss_center: 0.7535  loss_offset: 0.5312  time: 1.0672  data_time: 0.0598  lr: 0.00045532  max_mem: 19292M
[10/09 22:34:31] d2.utils.events INFO:  eta: 13:18:55  iter: 4959  total_loss: 5.41  loss_sem_seg: 3.852  loss_relation: 0.2838  loss_center: 0.8289  loss_offset: 0.4709  time: 1.0672  data_time: 0.0584  lr: 0.00045514  max_mem: 19292M
[10/09 22:34:52] d2.utils.events INFO:  eta: 13:18:31  iter: 4979  total_loss: 5.497  loss_sem_seg: 3.976  loss_relation: 0.2938  loss_center: 0.7736  loss_offset: 0.4826  time: 1.0672  data_time: 0.0599  lr: 0.00045496  max_mem: 19292M
[10/09 22:35:14] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0004999.pth
[10/09 22:35:15] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/09 22:35:15] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/09 22:35:15] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/09 22:35:15] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/09 22:35:30] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0013 s/iter. Inference: 0.0663 s/iter. Eval: 0.0282 s/iter. Total: 0.0959 s/iter. ETA=0:00:22
[10/09 22:35:35] d2.evaluation.evaluator INFO: Inference done 65/250. Dataloading: 0.0012 s/iter. Inference: 0.0644 s/iter. Eval: 0.0287 s/iter. Total: 0.0944 s/iter. ETA=0:00:17
[10/09 22:35:40] d2.evaluation.evaluator INFO: Inference done 122/250. Dataloading: 0.0013 s/iter. Inference: 0.0618 s/iter. Eval: 0.0283 s/iter. Total: 0.0914 s/iter. ETA=0:00:11
[10/09 22:35:45] d2.evaluation.evaluator INFO: Inference done 178/250. Dataloading: 0.0013 s/iter. Inference: 0.0616 s/iter. Eval: 0.0281 s/iter. Total: 0.0911 s/iter. ETA=0:00:06
[10/09 22:35:50] d2.evaluation.evaluator INFO: Inference done 235/250. Dataloading: 0.0014 s/iter. Inference: 0.0613 s/iter. Eval: 0.0276 s/iter. Total: 0.0904 s/iter. ETA=0:00:01
[10/09 22:35:52] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.490223 (0.091797 s / iter per device, on 2 devices)
[10/09 22:35:52] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:14 (0.061193 s / iter per device, on 2 devices)
[10/09 22:35:52] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalje9xaw03 ...
[10/09 22:35:57] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 11.007960291618806
[10/09 22:35:57] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 10.122 | 35.907 | 13.644 |      129      |
| Things | 7.446  | 32.510 | 10.545 |      76       |
| Stuff  | 13.960 | 40.777 | 18.088 |      53       |
[10/09 22:35:57] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/09 22:35:57] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/09 22:35:57] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/09 22:35:57] d2.evaluation.testing INFO: copypaste: 10.1222,35.9069,13.6442,7.4455,32.5105,10.5452,13.9603,40.7772,18.0880
[10/09 22:35:57] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/09 22:35:57] d2.evaluation.testing INFO: copypaste: mean_recall
[10/09 22:35:57] d2.evaluation.testing INFO: copypaste: 0.1101
[10/09 22:35:57] d2.utils.events INFO:  eta: 13:18:05  iter: 4999  total_loss: 5.423  loss_sem_seg: 3.776  loss_relation: 0.2896  loss_center: 0.7176  loss_offset: 0.4775  time: 1.0672  data_time: 0.0589  lr: 0.00045478  max_mem: 19292M
[10/09 22:35:57] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/09 22:36:04] d2.engine.hooks INFO: Saved best model as latest eval score for relation_mean_recall/mean_recall is 0.11008, better than last best score 0.08777 @ iteration 3999.
[10/09 22:36:26] d2.utils.events INFO:  eta: 13:17:45  iter: 5019  total_loss: 5.543  loss_sem_seg: 4.045  loss_relation: 0.2946  loss_center: 0.7768  loss_offset: 0.5312  time: 1.0672  data_time: 0.0684  lr: 0.00045459  max_mem: 19292M
[10/09 22:36:47] d2.utils.events INFO:  eta: 13:17:22  iter: 5039  total_loss: 5.722  loss_sem_seg: 4.058  loss_relation: 0.2937  loss_center: 0.7335  loss_offset: 0.5354  time: 1.0672  data_time: 0.0598  lr: 0.00045441  max_mem: 19292M
[10/09 22:37:08] d2.utils.events INFO:  eta: 13:17:01  iter: 5059  total_loss: 5.842  loss_sem_seg: 4.18  loss_relation: 0.2998  loss_center: 0.8254  loss_offset: 0.5803  time: 1.0671  data_time: 0.0614  lr: 0.00045423  max_mem: 19292M
[10/09 22:37:30] d2.utils.events INFO:  eta: 13:16:45  iter: 5079  total_loss: 5.626  loss_sem_seg: 3.956  loss_relation: 0.2917  loss_center: 0.7775  loss_offset: 0.5061  time: 1.0672  data_time: 0.0648  lr: 0.00045405  max_mem: 19292M
[10/09 22:37:51] d2.utils.events INFO:  eta: 13:16:26  iter: 5099  total_loss: 5.367  loss_sem_seg: 3.794  loss_relation: 0.2869  loss_center: 0.7302  loss_offset: 0.5345  time: 1.0672  data_time: 0.0614  lr: 0.00045387  max_mem: 19292M
[10/09 22:38:12] d2.utils.events INFO:  eta: 13:16:05  iter: 5119  total_loss: 5.029  loss_sem_seg: 3.606  loss_relation: 0.2836  loss_center: 0.7941  loss_offset: 0.4924  time: 1.0672  data_time: 0.0622  lr: 0.00045368  max_mem: 19292M
[10/09 22:38:34] d2.utils.events INFO:  eta: 13:15:44  iter: 5139  total_loss: 5.402  loss_sem_seg: 3.796  loss_relation: 0.2859  loss_center: 0.7761  loss_offset: 0.5598  time: 1.0672  data_time: 0.0680  lr: 0.0004535  max_mem: 19292M
[10/09 22:38:55] d2.utils.events INFO:  eta: 13:15:22  iter: 5159  total_loss: 5.366  loss_sem_seg: 3.816  loss_relation: 0.2927  loss_center: 0.7594  loss_offset: 0.4951  time: 1.0672  data_time: 0.0580  lr: 0.00045332  max_mem: 19292M
[10/09 22:39:16] d2.utils.events INFO:  eta: 13:14:51  iter: 5179  total_loss: 5.806  loss_sem_seg: 4.273  loss_relation: 0.2857  loss_center: 0.7809  loss_offset: 0.5376  time: 1.0672  data_time: 0.0603  lr: 0.00045314  max_mem: 19292M
[10/09 22:39:38] d2.utils.events INFO:  eta: 13:14:30  iter: 5199  total_loss: 5.568  loss_sem_seg: 3.919  loss_relation: 0.2827  loss_center: 0.7782  loss_offset: 0.5272  time: 1.0671  data_time: 0.0621  lr: 0.00045296  max_mem: 19292M
[10/09 22:39:59] d2.utils.events INFO:  eta: 13:13:59  iter: 5219  total_loss: 5.425  loss_sem_seg: 3.802  loss_relation: 0.2756  loss_center: 0.7324  loss_offset: 0.475  time: 1.0671  data_time: 0.0608  lr: 0.00045277  max_mem: 19292M
[10/09 22:40:20] d2.utils.events INFO:  eta: 13:13:38  iter: 5239  total_loss: 5.331  loss_sem_seg: 3.69  loss_relation: 0.279  loss_center: 0.8023  loss_offset: 0.4543  time: 1.0671  data_time: 0.0666  lr: 0.00045259  max_mem: 19292M
[10/09 22:40:42] d2.utils.events INFO:  eta: 13:13:24  iter: 5259  total_loss: 5.081  loss_sem_seg: 3.494  loss_relation: 0.2778  loss_center: 0.7699  loss_offset: 0.4819  time: 1.0671  data_time: 0.0580  lr: 0.00045241  max_mem: 19292M
[10/09 22:41:03] d2.utils.events INFO:  eta: 13:12:58  iter: 5279  total_loss: 4.978  loss_sem_seg: 3.443  loss_relation: 0.2868  loss_center: 0.7235  loss_offset: 0.4875  time: 1.0671  data_time: 0.0582  lr: 0.00045223  max_mem: 19292M
[10/09 22:41:24] d2.utils.events INFO:  eta: 13:12:46  iter: 5299  total_loss: 5.037  loss_sem_seg: 3.573  loss_relation: 0.287  loss_center: 0.78  loss_offset: 0.4805  time: 1.0671  data_time: 0.0584  lr: 0.00045205  max_mem: 19292M
[10/09 22:41:45] d2.utils.events INFO:  eta: 13:12:04  iter: 5319  total_loss: 5.098  loss_sem_seg: 3.57  loss_relation: 0.28  loss_center: 0.7234  loss_offset: 0.485  time: 1.0671  data_time: 0.0555  lr: 0.00045186  max_mem: 19292M
[10/09 22:42:07] d2.utils.events INFO:  eta: 13:11:32  iter: 5339  total_loss: 5.396  loss_sem_seg: 3.858  loss_relation: 0.2889  loss_center: 0.7979  loss_offset: 0.4929  time: 1.0671  data_time: 0.0612  lr: 0.00045168  max_mem: 19292M
[10/09 22:42:28] d2.utils.events INFO:  eta: 13:11:14  iter: 5359  total_loss: 5.249  loss_sem_seg: 3.7  loss_relation: 0.28  loss_center: 0.7765  loss_offset: 0.5031  time: 1.0671  data_time: 0.0673  lr: 0.0004515  max_mem: 19292M
[10/09 22:42:50] d2.utils.events INFO:  eta: 13:10:54  iter: 5379  total_loss: 5.234  loss_sem_seg: 3.655  loss_relation: 0.2741  loss_center: 0.7678  loss_offset: 0.4883  time: 1.0671  data_time: 0.0613  lr: 0.00045132  max_mem: 19292M
[10/09 22:43:11] d2.utils.events INFO:  eta: 13:10:31  iter: 5399  total_loss: 5.104  loss_sem_seg: 3.529  loss_relation: 0.2799  loss_center: 0.7498  loss_offset: 0.5133  time: 1.0671  data_time: 0.0631  lr: 0.00045114  max_mem: 19292M
[10/09 22:43:32] d2.utils.events INFO:  eta: 13:10:05  iter: 5419  total_loss: 5.224  loss_sem_seg: 3.758  loss_relation: 0.2838  loss_center: 0.8015  loss_offset: 0.5091  time: 1.0671  data_time: 0.0624  lr: 0.00045095  max_mem: 19292M
[10/09 22:43:54] d2.utils.events INFO:  eta: 13:09:49  iter: 5439  total_loss: 4.964  loss_sem_seg: 3.381  loss_relation: 0.2844  loss_center: 0.7956  loss_offset: 0.5028  time: 1.0671  data_time: 0.0612  lr: 0.00045077  max_mem: 19292M
[10/09 22:44:15] d2.utils.events INFO:  eta: 13:09:28  iter: 5459  total_loss: 5.009  loss_sem_seg: 3.541  loss_relation: 0.2825  loss_center: 0.7297  loss_offset: 0.4925  time: 1.0671  data_time: 0.0572  lr: 0.00045059  max_mem: 19292M
[10/09 22:44:36] d2.utils.events INFO:  eta: 13:09:06  iter: 5479  total_loss: 5.35  loss_sem_seg: 3.8  loss_relation: 0.2808  loss_center: 0.7416  loss_offset: 0.5221  time: 1.0671  data_time: 0.0651  lr: 0.00045041  max_mem: 19292M
[10/09 22:44:58] d2.utils.events INFO:  eta: 13:08:53  iter: 5499  total_loss: 5.036  loss_sem_seg: 3.439  loss_relation: 0.2807  loss_center: 0.7753  loss_offset: 0.4818  time: 1.0671  data_time: 0.0600  lr: 0.00045023  max_mem: 19292M
[10/09 22:45:19] d2.utils.events INFO:  eta: 13:08:34  iter: 5519  total_loss: 4.928  loss_sem_seg: 3.57  loss_relation: 0.2724  loss_center: 0.6971  loss_offset: 0.4555  time: 1.0671  data_time: 0.0632  lr: 0.00045004  max_mem: 19292M
[10/09 22:45:40] d2.utils.events INFO:  eta: 13:08:18  iter: 5539  total_loss: 5.076  loss_sem_seg: 3.585  loss_relation: 0.2862  loss_center: 0.7333  loss_offset: 0.5129  time: 1.0671  data_time: 0.0631  lr: 0.00044986  max_mem: 19292M
[10/09 22:46:01] d2.utils.events INFO:  eta: 13:07:51  iter: 5559  total_loss: 5.307  loss_sem_seg: 3.884  loss_relation: 0.2785  loss_center: 0.731  loss_offset: 0.4828  time: 1.0671  data_time: 0.0587  lr: 0.00044968  max_mem: 19292M
[10/09 22:46:23] d2.utils.events INFO:  eta: 13:07:29  iter: 5579  total_loss: 4.958  loss_sem_seg: 3.39  loss_relation: 0.2762  loss_center: 0.7956  loss_offset: 0.4644  time: 1.0670  data_time: 0.0625  lr: 0.0004495  max_mem: 19292M
[10/09 22:46:44] d2.utils.events INFO:  eta: 13:06:59  iter: 5599  total_loss: 5.657  loss_sem_seg: 4.111  loss_relation: 0.2938  loss_center: 0.7979  loss_offset: 0.4963  time: 1.0670  data_time: 0.0625  lr: 0.00044931  max_mem: 19292M
[10/09 22:47:05] d2.utils.events INFO:  eta: 13:06:42  iter: 5619  total_loss: 5.271  loss_sem_seg: 3.685  loss_relation: 0.2777  loss_center: 0.7768  loss_offset: 0.5324  time: 1.0670  data_time: 0.0621  lr: 0.00044913  max_mem: 19292M
[10/09 22:47:27] d2.utils.events INFO:  eta: 13:06:10  iter: 5639  total_loss: 5.396  loss_sem_seg: 3.836  loss_relation: 0.282  loss_center: 0.7876  loss_offset: 0.5283  time: 1.0670  data_time: 0.0557  lr: 0.00044895  max_mem: 19292M
[10/09 22:47:48] d2.utils.events INFO:  eta: 13:05:50  iter: 5659  total_loss: 4.525  loss_sem_seg: 3.124  loss_relation: 0.2714  loss_center: 0.6923  loss_offset: 0.4778  time: 1.0670  data_time: 0.0612  lr: 0.00044877  max_mem: 19292M
[10/09 22:48:09] d2.utils.events INFO:  eta: 13:05:22  iter: 5679  total_loss: 5.191  loss_sem_seg: 3.663  loss_relation: 0.2743  loss_center: 0.7332  loss_offset: 0.4986  time: 1.0670  data_time: 0.0628  lr: 0.00044859  max_mem: 19292M
[10/09 22:48:30] d2.utils.events INFO:  eta: 13:05:03  iter: 5699  total_loss: 5.192  loss_sem_seg: 3.464  loss_relation: 0.2843  loss_center: 0.8033  loss_offset: 0.4921  time: 1.0670  data_time: 0.0595  lr: 0.0004484  max_mem: 19292M
[10/09 22:48:52] d2.utils.events INFO:  eta: 13:04:45  iter: 5719  total_loss: 5.108  loss_sem_seg: 3.473  loss_relation: 0.2746  loss_center: 0.728  loss_offset: 0.4653  time: 1.0670  data_time: 0.0624  lr: 0.00044822  max_mem: 19292M
[10/09 22:49:13] d2.utils.events INFO:  eta: 13:04:25  iter: 5739  total_loss: 4.773  loss_sem_seg: 3.249  loss_relation: 0.2771  loss_center: 0.7628  loss_offset: 0.459  time: 1.0670  data_time: 0.0573  lr: 0.00044804  max_mem: 19292M
[10/09 22:49:34] d2.utils.events INFO:  eta: 13:03:57  iter: 5759  total_loss: 4.934  loss_sem_seg: 3.441  loss_relation: 0.2878  loss_center: 0.8108  loss_offset: 0.4818  time: 1.0669  data_time: 0.0528  lr: 0.00044786  max_mem: 19292M
[10/09 22:49:55] d2.utils.events INFO:  eta: 13:03:35  iter: 5779  total_loss: 5.124  loss_sem_seg: 3.569  loss_relation: 0.2808  loss_center: 0.7495  loss_offset: 0.5413  time: 1.0669  data_time: 0.0596  lr: 0.00044767  max_mem: 19292M
[10/09 22:50:17] d2.utils.events INFO:  eta: 13:03:07  iter: 5799  total_loss: 5.126  loss_sem_seg: 3.647  loss_relation: 0.2818  loss_center: 0.8377  loss_offset: 0.478  time: 1.0669  data_time: 0.0587  lr: 0.00044749  max_mem: 19292M
[10/09 22:50:38] d2.utils.events INFO:  eta: 13:03:00  iter: 5819  total_loss: 5.024  loss_sem_seg: 3.43  loss_relation: 0.2739  loss_center: 0.7931  loss_offset: 0.5043  time: 1.0669  data_time: 0.0677  lr: 0.00044731  max_mem: 19292M
[10/09 22:51:00] d2.utils.events INFO:  eta: 13:02:45  iter: 5839  total_loss: 5.332  loss_sem_seg: 3.896  loss_relation: 0.2807  loss_center: 0.7378  loss_offset: 0.4233  time: 1.0669  data_time: 0.0601  lr: 0.00044713  max_mem: 19292M
[10/09 22:51:21] d2.utils.events INFO:  eta: 13:02:27  iter: 5859  total_loss: 4.871  loss_sem_seg: 3.446  loss_relation: 0.2763  loss_center: 0.7729  loss_offset: 0.465  time: 1.0669  data_time: 0.0653  lr: 0.00044695  max_mem: 19292M
[10/09 22:51:42] d2.utils.events INFO:  eta: 13:02:11  iter: 5879  total_loss: 4.932  loss_sem_seg: 3.413  loss_relation: 0.2717  loss_center: 0.6926  loss_offset: 0.5075  time: 1.0669  data_time: 0.0597  lr: 0.00044676  max_mem: 19292M
[10/09 22:52:03] d2.utils.events INFO:  eta: 13:01:35  iter: 5899  total_loss: 5.272  loss_sem_seg: 3.77  loss_relation: 0.2781  loss_center: 0.7419  loss_offset: 0.4888  time: 1.0669  data_time: 0.0592  lr: 0.00044658  max_mem: 19292M
[10/09 22:52:25] d2.utils.events INFO:  eta: 13:01:12  iter: 5919  total_loss: 4.824  loss_sem_seg: 3.285  loss_relation: 0.2724  loss_center: 0.7341  loss_offset: 0.4815  time: 1.0669  data_time: 0.0618  lr: 0.0004464  max_mem: 19292M
[10/09 22:52:46] d2.utils.events INFO:  eta: 13:00:52  iter: 5939  total_loss: 4.692  loss_sem_seg: 3.18  loss_relation: 0.2729  loss_center: 0.7443  loss_offset: 0.4678  time: 1.0669  data_time: 0.0654  lr: 0.00044622  max_mem: 19292M
[10/09 22:53:07] d2.utils.events INFO:  eta: 13:00:29  iter: 5959  total_loss: 4.652  loss_sem_seg: 3.102  loss_relation: 0.2679  loss_center: 0.7509  loss_offset: 0.4729  time: 1.0669  data_time: 0.0594  lr: 0.00044603  max_mem: 19292M
[10/09 22:53:29] d2.utils.events INFO:  eta: 13:00:14  iter: 5979  total_loss: 4.714  loss_sem_seg: 3.176  loss_relation: 0.2729  loss_center: 0.7828  loss_offset: 0.4725  time: 1.0669  data_time: 0.0628  lr: 0.00044585  max_mem: 19292M
[10/09 22:53:50] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0005999.pth
[10/09 22:53:52] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/09 22:53:52] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/09 22:53:52] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/09 22:53:52] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/09 22:54:07] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0004 s/iter. Inference: 0.0695 s/iter. Eval: 0.0288 s/iter. Total: 0.0987 s/iter. ETA=0:00:23
[10/09 22:54:12] d2.evaluation.evaluator INFO: Inference done 64/250. Dataloading: 0.0013 s/iter. Inference: 0.0656 s/iter. Eval: 0.0291 s/iter. Total: 0.0960 s/iter. ETA=0:00:17
[10/09 22:54:17] d2.evaluation.evaluator INFO: Inference done 121/250. Dataloading: 0.0013 s/iter. Inference: 0.0626 s/iter. Eval: 0.0284 s/iter. Total: 0.0924 s/iter. ETA=0:00:11
[10/09 22:54:22] d2.evaluation.evaluator INFO: Inference done 176/250. Dataloading: 0.0014 s/iter. Inference: 0.0626 s/iter. Eval: 0.0283 s/iter. Total: 0.0923 s/iter. ETA=0:00:06
[10/09 22:54:27] d2.evaluation.evaluator INFO: Inference done 234/250. Dataloading: 0.0014 s/iter. Inference: 0.0617 s/iter. Eval: 0.0279 s/iter. Total: 0.0911 s/iter. ETA=0:00:01
[10/09 22:54:29] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.635362 (0.092389 s / iter per device, on 2 devices)
[10/09 22:54:29] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.061659 s / iter per device, on 2 devices)
[10/09 22:54:29] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalaklphzl4 ...
[10/09 22:54:34] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 14.492724779414631
[10/09 22:54:34] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 10.733 | 38.412 | 14.222 |      129      |
| Things | 8.193  | 37.426 | 11.106 |      76       |
| Stuff  | 14.376 | 39.827 | 18.692 |      53       |
[10/09 22:54:34] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/09 22:54:34] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/09 22:54:34] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/09 22:54:34] d2.evaluation.testing INFO: copypaste: 10.7333,38.4122,14.2224,8.1929,37.4257,11.1055,14.3760,39.8269,18.6918
[10/09 22:54:34] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/09 22:54:34] d2.evaluation.testing INFO: copypaste: mean_recall
[10/09 22:54:34] d2.evaluation.testing INFO: copypaste: 0.1449
[10/09 22:54:34] d2.utils.events INFO:  eta: 12:59:50  iter: 5999  total_loss: 4.587  loss_sem_seg: 2.978  loss_relation: 0.2765  loss_center: 0.7446  loss_offset: 0.4926  time: 1.0669  data_time: 0.0633  lr: 0.00044567  max_mem: 19292M
[10/09 22:54:34] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/09 22:54:40] d2.engine.hooks INFO: Saved best model as latest eval score for relation_mean_recall/mean_recall is 0.14493, better than last best score 0.11008 @ iteration 4999.
[10/09 22:55:02] d2.utils.events INFO:  eta: 12:59:26  iter: 6019  total_loss: 5.01  loss_sem_seg: 3.535  loss_relation: 0.2798  loss_center: 0.7052  loss_offset: 0.4832  time: 1.0668  data_time: 0.0662  lr: 0.00044549  max_mem: 19292M
[10/09 22:55:23] d2.utils.events INFO:  eta: 12:59:05  iter: 6039  total_loss: 5.192  loss_sem_seg: 3.588  loss_relation: 0.2794  loss_center: 0.8039  loss_offset: 0.4893  time: 1.0668  data_time: 0.0633  lr: 0.00044531  max_mem: 19292M
[10/09 22:55:44] d2.utils.events INFO:  eta: 12:58:46  iter: 6059  total_loss: 4.902  loss_sem_seg: 3.389  loss_relation: 0.2716  loss_center: 0.7223  loss_offset: 0.5018  time: 1.0668  data_time: 0.0616  lr: 0.00044512  max_mem: 19292M
[10/09 22:56:06] d2.utils.events INFO:  eta: 12:58:23  iter: 6079  total_loss: 4.994  loss_sem_seg: 3.375  loss_relation: 0.2694  loss_center: 0.7316  loss_offset: 0.4457  time: 1.0668  data_time: 0.0547  lr: 0.00044494  max_mem: 19292M
[10/09 22:56:27] d2.utils.events INFO:  eta: 12:57:49  iter: 6099  total_loss: 4.962  loss_sem_seg: 3.45  loss_relation: 0.2754  loss_center: 0.7333  loss_offset: 0.4676  time: 1.0668  data_time: 0.0584  lr: 0.00044476  max_mem: 19292M
[10/09 22:56:48] d2.utils.events INFO:  eta: 12:57:37  iter: 6119  total_loss: 5.02  loss_sem_seg: 3.559  loss_relation: 0.2798  loss_center: 0.7407  loss_offset: 0.5045  time: 1.0668  data_time: 0.0606  lr: 0.00044458  max_mem: 19292M
[10/09 22:57:10] d2.utils.events INFO:  eta: 12:57:16  iter: 6139  total_loss: 5.214  loss_sem_seg: 3.579  loss_relation: 0.28  loss_center: 0.7275  loss_offset: 0.5232  time: 1.0668  data_time: 0.0649  lr: 0.00044439  max_mem: 19292M
[10/09 22:57:31] d2.utils.events INFO:  eta: 12:56:45  iter: 6159  total_loss: 5.385  loss_sem_seg: 3.886  loss_relation: 0.2835  loss_center: 0.7756  loss_offset: 0.4889  time: 1.0668  data_time: 0.0584  lr: 0.00044421  max_mem: 19292M
[10/09 22:57:52] d2.utils.events INFO:  eta: 12:56:34  iter: 6179  total_loss: 5.219  loss_sem_seg: 3.672  loss_relation: 0.277  loss_center: 0.8109  loss_offset: 0.463  time: 1.0668  data_time: 0.0596  lr: 0.00044403  max_mem: 19292M
[10/09 22:58:13] d2.utils.events INFO:  eta: 12:56:07  iter: 6199  total_loss: 4.795  loss_sem_seg: 3.212  loss_relation: 0.278  loss_center: 0.8116  loss_offset: 0.4847  time: 1.0668  data_time: 0.0597  lr: 0.00044385  max_mem: 19292M
[10/09 22:58:35] d2.utils.events INFO:  eta: 12:55:46  iter: 6219  total_loss: 4.801  loss_sem_seg: 3.298  loss_relation: 0.2722  loss_center: 0.7464  loss_offset: 0.4778  time: 1.0668  data_time: 0.0598  lr: 0.00044366  max_mem: 19292M
[10/09 22:58:56] d2.utils.events INFO:  eta: 12:55:15  iter: 6239  total_loss: 4.945  loss_sem_seg: 3.374  loss_relation: 0.2712  loss_center: 0.7103  loss_offset: 0.456  time: 1.0667  data_time: 0.0606  lr: 0.00044348  max_mem: 19292M
[10/09 22:59:17] d2.utils.events INFO:  eta: 12:55:11  iter: 6259  total_loss: 4.735  loss_sem_seg: 3.314  loss_relation: 0.278  loss_center: 0.7449  loss_offset: 0.4671  time: 1.0668  data_time: 0.0657  lr: 0.0004433  max_mem: 19292M
[10/09 22:59:39] d2.utils.events INFO:  eta: 12:55:01  iter: 6279  total_loss: 5.18  loss_sem_seg: 3.653  loss_relation: 0.2796  loss_center: 0.7402  loss_offset: 0.5088  time: 1.0668  data_time: 0.0640  lr: 0.00044312  max_mem: 19292M
[10/09 23:00:00] d2.utils.events INFO:  eta: 12:54:30  iter: 6299  total_loss: 4.749  loss_sem_seg: 3.35  loss_relation: 0.2718  loss_center: 0.7228  loss_offset: 0.4997  time: 1.0668  data_time: 0.0565  lr: 0.00044293  max_mem: 19292M
[10/09 23:00:22] d2.utils.events INFO:  eta: 12:54:23  iter: 6319  total_loss: 5.077  loss_sem_seg: 3.442  loss_relation: 0.2769  loss_center: 0.7011  loss_offset: 0.5018  time: 1.0668  data_time: 0.0665  lr: 0.00044275  max_mem: 19292M
[10/09 23:00:43] d2.utils.events INFO:  eta: 12:54:02  iter: 6339  total_loss: 4.986  loss_sem_seg: 3.466  loss_relation: 0.2763  loss_center: 0.7685  loss_offset: 0.4883  time: 1.0668  data_time: 0.0615  lr: 0.00044257  max_mem: 19292M
[10/09 23:01:04] d2.utils.events INFO:  eta: 12:53:29  iter: 6359  total_loss: 4.801  loss_sem_seg: 3.268  loss_relation: 0.2717  loss_center: 0.7942  loss_offset: 0.472  time: 1.0668  data_time: 0.0604  lr: 0.00044239  max_mem: 19292M
[10/09 23:01:25] d2.utils.events INFO:  eta: 12:53:05  iter: 6379  total_loss: 4.858  loss_sem_seg: 3.335  loss_relation: 0.2859  loss_center: 0.794  loss_offset: 0.451  time: 1.0668  data_time: 0.0592  lr: 0.0004422  max_mem: 19292M
[10/09 23:01:47] d2.utils.events INFO:  eta: 12:52:44  iter: 6399  total_loss: 4.882  loss_sem_seg: 3.307  loss_relation: 0.28  loss_center: 0.7822  loss_offset: 0.4868  time: 1.0668  data_time: 0.0631  lr: 0.00044202  max_mem: 19292M
[10/09 23:02:08] d2.utils.events INFO:  eta: 12:52:29  iter: 6419  total_loss: 4.958  loss_sem_seg: 3.377  loss_relation: 0.2703  loss_center: 0.766  loss_offset: 0.4735  time: 1.0667  data_time: 0.0612  lr: 0.00044184  max_mem: 19292M
[10/09 23:02:29] d2.utils.events INFO:  eta: 12:51:38  iter: 6439  total_loss: 4.932  loss_sem_seg: 3.309  loss_relation: 0.2682  loss_center: 0.8354  loss_offset: 0.5165  time: 1.0667  data_time: 0.0562  lr: 0.00044166  max_mem: 19292M
[10/09 23:02:50] d2.utils.events INFO:  eta: 12:51:20  iter: 6459  total_loss: 4.85  loss_sem_seg: 3.464  loss_relation: 0.2676  loss_center: 0.7093  loss_offset: 0.4614  time: 1.0667  data_time: 0.0589  lr: 0.00044147  max_mem: 19292M
[10/09 23:03:12] d2.utils.events INFO:  eta: 12:51:14  iter: 6479  total_loss: 5.363  loss_sem_seg: 3.728  loss_relation: 0.2828  loss_center: 0.7661  loss_offset: 0.4923  time: 1.0667  data_time: 0.0693  lr: 0.00044129  max_mem: 19292M
[10/09 23:03:33] d2.utils.events INFO:  eta: 12:50:43  iter: 6499  total_loss: 4.88  loss_sem_seg: 3.413  loss_relation: 0.2863  loss_center: 0.7722  loss_offset: 0.4717  time: 1.0667  data_time: 0.0615  lr: 0.00044111  max_mem: 19292M
[10/09 23:03:55] d2.utils.events INFO:  eta: 12:50:27  iter: 6519  total_loss: 4.792  loss_sem_seg: 3.475  loss_relation: 0.2783  loss_center: 0.7552  loss_offset: 0.4225  time: 1.0668  data_time: 0.0695  lr: 0.00044093  max_mem: 19292M
[10/09 23:04:16] d2.utils.events INFO:  eta: 12:49:56  iter: 6539  total_loss: 4.819  loss_sem_seg: 3.285  loss_relation: 0.2722  loss_center: 0.7251  loss_offset: 0.4733  time: 1.0667  data_time: 0.0610  lr: 0.00044074  max_mem: 19292M
[10/09 23:04:37] d2.utils.events INFO:  eta: 12:49:51  iter: 6559  total_loss: 4.941  loss_sem_seg: 3.441  loss_relation: 0.2726  loss_center: 0.7774  loss_offset: 0.435  time: 1.0667  data_time: 0.0603  lr: 0.00044056  max_mem: 19292M
[10/09 23:04:59] d2.utils.events INFO:  eta: 12:49:30  iter: 6579  total_loss: 4.947  loss_sem_seg: 3.399  loss_relation: 0.281  loss_center: 0.8176  loss_offset: 0.4554  time: 1.0667  data_time: 0.0624  lr: 0.00044038  max_mem: 19292M
[10/09 23:05:20] d2.utils.events INFO:  eta: 12:48:49  iter: 6599  total_loss: 4.439  loss_sem_seg: 3.052  loss_relation: 0.2787  loss_center: 0.7002  loss_offset: 0.425  time: 1.0667  data_time: 0.0550  lr: 0.0004402  max_mem: 19292M
[10/09 23:05:41] d2.utils.events INFO:  eta: 12:48:31  iter: 6619  total_loss: 5.067  loss_sem_seg: 3.509  loss_relation: 0.2793  loss_center: 0.779  loss_offset: 0.5083  time: 1.0667  data_time: 0.0637  lr: 0.00044001  max_mem: 19292M
[10/09 23:06:02] d2.utils.events INFO:  eta: 12:48:07  iter: 6639  total_loss: 4.973  loss_sem_seg: 3.432  loss_relation: 0.2721  loss_center: 0.7473  loss_offset: 0.4865  time: 1.0667  data_time: 0.0602  lr: 0.00043983  max_mem: 19292M
[10/09 23:06:24] d2.utils.events INFO:  eta: 12:47:42  iter: 6659  total_loss: 5.042  loss_sem_seg: 3.626  loss_relation: 0.2706  loss_center: 0.7025  loss_offset: 0.5081  time: 1.0667  data_time: 0.0594  lr: 0.00043965  max_mem: 19292M
[10/09 23:06:45] d2.utils.events INFO:  eta: 12:47:19  iter: 6679  total_loss: 4.577  loss_sem_seg: 3.082  loss_relation: 0.2689  loss_center: 0.7699  loss_offset: 0.4659  time: 1.0666  data_time: 0.0549  lr: 0.00043947  max_mem: 19292M
[10/09 23:07:06] d2.utils.events INFO:  eta: 12:46:50  iter: 6699  total_loss: 4.983  loss_sem_seg: 3.469  loss_relation: 0.274  loss_center: 0.7436  loss_offset: 0.4947  time: 1.0666  data_time: 0.0599  lr: 0.00043928  max_mem: 19292M
[10/09 23:07:27] d2.utils.events INFO:  eta: 12:46:34  iter: 6719  total_loss: 4.991  loss_sem_seg: 3.533  loss_relation: 0.2839  loss_center: 0.8085  loss_offset: 0.5097  time: 1.0666  data_time: 0.0661  lr: 0.0004391  max_mem: 19292M
[10/09 23:07:49] d2.utils.events INFO:  eta: 12:46:07  iter: 6739  total_loss: 4.787  loss_sem_seg: 3.287  loss_relation: 0.2645  loss_center: 0.7162  loss_offset: 0.4512  time: 1.0666  data_time: 0.0614  lr: 0.00043892  max_mem: 19292M
[10/09 23:08:10] d2.utils.events INFO:  eta: 12:45:54  iter: 6759  total_loss: 4.595  loss_sem_seg: 3.09  loss_relation: 0.2643  loss_center: 0.7304  loss_offset: 0.5048  time: 1.0666  data_time: 0.0593  lr: 0.00043874  max_mem: 19292M
[10/09 23:08:31] d2.utils.events INFO:  eta: 12:45:32  iter: 6779  total_loss: 4.378  loss_sem_seg: 2.916  loss_relation: 0.2599  loss_center: 0.7132  loss_offset: 0.4517  time: 1.0666  data_time: 0.0616  lr: 0.00043855  max_mem: 19292M
[10/09 23:08:53] d2.utils.events INFO:  eta: 12:45:16  iter: 6799  total_loss: 4.652  loss_sem_seg: 3.17  loss_relation: 0.2653  loss_center: 0.725  loss_offset: 0.4859  time: 1.0666  data_time: 0.0600  lr: 0.00043837  max_mem: 19292M
[10/09 23:09:14] d2.utils.events INFO:  eta: 12:44:55  iter: 6819  total_loss: 4.598  loss_sem_seg: 3.015  loss_relation: 0.2643  loss_center: 0.7326  loss_offset: 0.4233  time: 1.0666  data_time: 0.0577  lr: 0.00043819  max_mem: 19292M
[10/09 23:09:35] d2.utils.events INFO:  eta: 12:44:30  iter: 6839  total_loss: 4.443  loss_sem_seg: 2.952  loss_relation: 0.2714  loss_center: 0.7265  loss_offset: 0.4521  time: 1.0666  data_time: 0.0635  lr: 0.00043801  max_mem: 19292M
[10/09 23:09:56] d2.utils.events INFO:  eta: 12:44:08  iter: 6859  total_loss: 4.434  loss_sem_seg: 3.011  loss_relation: 0.2615  loss_center: 0.6808  loss_offset: 0.4838  time: 1.0666  data_time: 0.0640  lr: 0.00043782  max_mem: 19292M
[10/09 23:10:18] d2.utils.events INFO:  eta: 12:43:49  iter: 6879  total_loss: 4.82  loss_sem_seg: 3.252  loss_relation: 0.2779  loss_center: 0.7547  loss_offset: 0.4823  time: 1.0666  data_time: 0.0636  lr: 0.00043764  max_mem: 19292M
[10/09 23:10:39] d2.utils.events INFO:  eta: 12:43:41  iter: 6899  total_loss: 4.717  loss_sem_seg: 3.162  loss_relation: 0.2715  loss_center: 0.8318  loss_offset: 0.4619  time: 1.0666  data_time: 0.0633  lr: 0.00043746  max_mem: 19292M
[10/09 23:11:00] d2.utils.events INFO:  eta: 12:43:12  iter: 6919  total_loss: 4.568  loss_sem_seg: 3.112  loss_relation: 0.271  loss_center: 0.8266  loss_offset: 0.4522  time: 1.0666  data_time: 0.0650  lr: 0.00043727  max_mem: 19292M
[10/09 23:11:22] d2.utils.events INFO:  eta: 12:42:48  iter: 6939  total_loss: 4.881  loss_sem_seg: 3.382  loss_relation: 0.2711  loss_center: 0.6764  loss_offset: 0.4873  time: 1.0666  data_time: 0.0604  lr: 0.00043709  max_mem: 19292M
[10/09 23:11:43] d2.utils.events INFO:  eta: 12:42:26  iter: 6959  total_loss: 4.911  loss_sem_seg: 3.294  loss_relation: 0.2823  loss_center: 0.8354  loss_offset: 0.4849  time: 1.0666  data_time: 0.0587  lr: 0.00043691  max_mem: 19292M
[10/09 23:12:04] d2.utils.events INFO:  eta: 12:42:00  iter: 6979  total_loss: 4.572  loss_sem_seg: 3.002  loss_relation: 0.2749  loss_center: 0.7629  loss_offset: 0.4154  time: 1.0666  data_time: 0.0641  lr: 0.00043673  max_mem: 19292M
[10/09 23:12:26] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0006999.pth
[10/09 23:12:27] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/torch/serialization.py", line 379, in save
    _save(obj, opened_zipfile, pickle_module, pickle_protocol)
  File "/root/miniconda3/lib/python3.8/site-packages/torch/serialization.py", line 604, in _save
    zip_file.write_record(name, storage.data_ptr(), num_bytes)
OSError: [Errno 28] No space left on device

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/root/Projects/detectron2/detectron2/engine/train_loop.py", line 150, in train
    self.after_step()
  File "/root/Projects/detectron2/detectron2/engine/train_loop.py", line 180, in after_step
    h.after_step()
  File "/root/Projects/detectron2/detectron2/engine/hooks.py", line 206, in after_step
    self.step(self.trainer.iter)
  File "/root/miniconda3/lib/python3.8/site-packages/fvcore/common/checkpoint.py", line 430, in step
    self.checkpointer.save(
  File "/root/miniconda3/lib/python3.8/site-packages/fvcore/common/checkpoint.py", line 126, in save
    torch.save(data, f)
  File "/root/miniconda3/lib/python3.8/site-packages/torch/serialization.py", line 380, in save
    return
  File "/root/miniconda3/lib/python3.8/site-packages/torch/serialization.py", line 259, in __exit__
    self.file_like.write_end_of_file()
RuntimeError: [enforce fail at inline_container.cc:319] . unexpected pos 129820416 vs 129820304
[10/09 23:12:27] d2.engine.hooks INFO: Overall training speed: 6997 iterations in 2:04:23 (1.0667 s / it)
[10/09 23:12:27] d2.engine.hooks INFO: Total training time: 2:09:27 (0:05:03 on hooks)
[10/09 23:12:27] d2.utils.events INFO:  eta: 12:41:38  iter: 6999  total_loss: 4.729  loss_sem_seg: 3.271  loss_relation: 0.263  loss_center: 0.7533  loss_offset: 0.4292  time: 1.0666  data_time: 0.0607  lr: 0.00043654  max_mem: 19292M
[10/09 23:22:21] detectron2 INFO: Rank of current process: 0. World size: 2
[10/09 23:22:21] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.3
detectron2              0.6 @/root/autodl-tmp/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.1
detectron2 arch flags   8.6
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.12.0+cu113 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 Tesla V100S-PCIE-32GB (arch=7.0)
Driver version          470.82.00
CUDA_HOME               /usr/local/cuda
Pillow                  9.1.1
torchvision             0.13.0+cu113 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[10/09 23:22:21] detectron2 INFO: Command line arguments: Namespace(config_file='configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv_custom.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/09 23:22:21] detectron2 INFO: Contents of args.config_file=configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv_custom.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m../Cityscapes-PanopticSegmentation/Base-PanopticDeepLab-OS16.yaml
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;242m# WEIGHTS: "detectron2://DeepLab/R-103.pkl"[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m./relations_output_seg_transformer_resnet101/model_0006999.pth[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m123.675[39m,[38;5;15m [39m[38;5;15m116.280[39m,[38;5;15m [39m[38;5;15m103.530[39m]
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m58.395[39m,[38;5;15m [39m[38;5;15m57.120[39m,[38;5;15m [39m[38;5;15m57.375[39m]
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbuild_resnet_deeplab_backbone[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m,[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m,[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m]
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m1[39m,[38;5;15m [39m[38;5;15m2[39m,[38;5;15m [39m[38;5;15m4[39m]
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdeeplab[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mFalse
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mLOSS_TOP_K[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mSTUFF_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m41
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mPREDICT_INSTANCES[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m  [39m[38;5;197mPSG_RELATION_NET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENCODER_DEPTH[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mTOTAL_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39m56
[38;5;15m    [39m[38;5;197mTOTAL_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m[38;5;15m [39m("psg_train",)
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m[38;5;15m [39m("psg_val",)
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m5e-4
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mRGB[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mGAUSSIAN_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;81m!!python/object/apply:eval[39m[38;5;15m [39m[[38;5;186m"[39m[38;5;186m[int(x[39m[38;5;15m [39m[38;5;186m*[39m[38;5;15m [39m[38;5;186m0.1[39m[38;5;15m [39m[38;5;186m*[39m[38;5;15m [39m[38;5;186m640)[39m[38;5;15m [39m[38;5;186mfor[39m[38;5;15m [39m[38;5;186mx[39m[38;5;15m [39m[38;5;186min[39m[38;5;15m [39m[38;5;186mrange(5,[39m[38;5;15m [39m[38;5;186m16)][39m[38;5;186m"[39m]
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mchoice[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mabsolute[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m(640, 640)
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m./relations_output_seg_transformer_resnet101[39m[38;5;186m"[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m

[10/09 23:22:21] detectron2 INFO: Running with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m10
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39mTrainingSampler
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mpsg_val
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mpsg_train
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSINGLE_CATEGORY_MAX_AREA[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m640
[38;5;15m    [39m-[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39mabsolute
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39mRGB
[38;5;15m  [39m[38;5;197mGAUSSIAN_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mIGNORE_CROWD_IN_SEMANTIC[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mIGNORE_STUFF_IN_OFFSET[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39mpolygon
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m320
[38;5;15m  [39m-[38;5;15m [39m384
[38;5;15m  [39m-[38;5;15m [39m448
[38;5;15m  [39m-[38;5;15m [39m512
[38;5;15m  [39m-[38;5;15m [39m576
[38;5;15m  [39m-[38;5;15m [39m640
[38;5;15m  [39m-[38;5;15m [39m704
[38;5;15m  [39m-[38;5;15m [39m768
[38;5;15m  [39m-[38;5;15m [39m832
[38;5;15m  [39m-[38;5;15m [39m896
[38;5;15m  [39m-[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39mchoice
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39mhorizontal
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m3
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m-90
[38;5;15m      [39m-[38;5;15m [39m0
[38;5;15m      [39m-[38;5;15m [39m90
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m0.5
[38;5;15m      [39m-[38;5;15m [39m1.0
[38;5;15m      [39m-[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mDefaultAnchorGenerator
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m32
[38;5;15m      [39m-[38;5;15m [39m64
[38;5;15m      [39m-[38;5;15m [39m128
[38;5;15m      [39m-[38;5;15m [39m256
[38;5;15m      [39m-[38;5;15m [39m512
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mbuild_resnet_deeplab_backbone
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39mcuda
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39msum
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m  [39m[38;5;197mINS_EMBED_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m6
[38;5;15m    [39m-[38;5;15m [39m12
[38;5;15m    [39m-[38;5;15m [39m18
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mCENTER_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m200.0
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLabInsEmbedHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mSyncBN
[38;5;15m    [39m[38;5;197mOFFSET_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLab
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBENCHMARK_NETWORK_SPEED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCENTER_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m41
[38;5;15m    [39m[38;5;197mPREDICT_INSTANCES[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mSTUFF_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mTOP_K_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m123.675
[38;5;15m  [39m-[38;5;15m [39m116.28
[38;5;15m  [39m-[38;5;15m [39m103.53
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m58.395
[38;5;15m  [39m-[38;5;15m [39m57.12
[38;5;15m  [39m-[38;5;15m [39m57.375
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRPN
[38;5;15m  [39m[38;5;197mPSG_RELATION_NET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mALPHA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mCLS_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mENCODER_DEPTH[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mFEATURE_NAME_LIST[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPSGRelationNet
[38;5;15m    [39m[38;5;197mTOTAL_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mTOTAL_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39m56
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mFrozenBN
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mRES4_DILATION[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m-[38;5;15m [39m2
[38;5;15m    [39m-[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39mdeeplab
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m-[38;5;15m [39mp6
[38;5;15m    [39m-[38;5;15m [39mp7
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.4
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m-[38;5;15m [39m0.6
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m50
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRes5ROIHeads
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mKRCNNConvDeconvUpsampleHead
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m17
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mMaskRCNNConvUpsampleHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39mStandardRPNHead
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.3
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m6000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m12000
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m6
[38;5;15m    [39m-[38;5;15m [39m12
[38;5;15m    [39m-[38;5;15m [39m18
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m255
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mLOSS_TOP_K[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mLOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39mhard_pixel_mining
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLabSemSegHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mSyncBN
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m./relations_output_seg_transformer_resnet101/model_0006999.pth
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m./relations_output_seg_transformer_resnet101
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m0.0005
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39mvalue
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39mWarmupPolyLR
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mNUM_DECAYS[39m[38;5;15m:[39m[38;5;15m [39m3
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39mADAM
[38;5;15m  [39m[38;5;197mPOLY_LR_CONSTANT_ENDING[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mPOLY_LR_POWER[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m  [39m[38;5;197mRESCALE_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m30000
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m0.001
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39mlinear
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m4000
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m400
[38;5;15m    [39m-[38;5;15m [39m500
[38;5;15m    [39m-[38;5;15m [39m600
[38;5;15m    [39m-[38;5;15m [39m700
[38;5;15m    [39m-[38;5;15m [39m800
[38;5;15m    [39m-[38;5;15m [39m900
[38;5;15m    [39m-[38;5;15m [39m1000
[38;5;15m    [39m-[38;5;15m [39m1100
[38;5;15m    [39m-[38;5;15m [39m1200
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m100
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m0

[10/09 23:22:21] detectron2 INFO: Full config saved to ./relations_output_seg_transformer_resnet101/config.yaml
[10/09 23:22:22] d2.utils.env INFO: Using a generated random seed 22300513
[10/09 23:22:25] d2.engine.defaults INFO: Model:
PanopticDeepLab(
  (backbone): ResNet(
    (stem): DeepLabStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
      )
      (conv3): Conv2d(
        64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv1): Conv2d(
          128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): SyncBatchNorm(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): SyncBatchNorm(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 133, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): SyncBatchNorm(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): SyncBatchNorm(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
  (psg_relation_net): PSGRelationNet(
    (map_dict): ModuleDict(
      (res3): Linear(in_features=512, out_features=256, bias=True)
      (res5): Linear(in_features=2048, out_features=256, bias=True)
    )
    (tf_encoder): Transformer(
      (blocks): ModuleList(
        (0): Block(
          (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=256, out_features=768, bias=False)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=768, bias=True)
            (act): GELU(approximate=none)
            (fc2): Linear(in_features=768, out_features=256, bias=True)
            (drop): Dropout(p=0.0, inplace=False)
          )
        )
      )
      (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (pos_drop): Dropout(p=0.0, inplace=False)
    )
    (tf_decoder): Attention(
      (qkv): Linear(in_features=256, out_features=512, bias=True)
      (attn_drop): Dropout(p=0.0, inplace=False)
      (proj_cls): Linear(in_features=256, out_features=256, bias=True)
      (proj_rel): Linear(in_features=256, out_features=256, bias=True)
      (proj_drop): Dropout(p=0.0, inplace=False)
    )
    (cls_fc): Linear(in_features=256, out_features=1, bias=True)
    (rel_fc): Linear(in_features=256, out_features=1, bias=True)
  )
)
[10/09 23:22:25] d2.projects.panoptic_deeplab.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960), max_size=960, sample_style='choice'), RandomCrop(crop_type='absolute', crop_size=[640, 640]), RandomFlip()]
[10/09 23:22:26] d2.data.build INFO: Removed 0 images with no usable annotations. 4500 images left.
[10/09 23:22:26] d2.data.build INFO: Distribution of instances among all 133 categories:
[36m|   category    | #instances   |   category    | #instances   |   category    | #instances   |
|:-------------:|:-------------|:-------------:|:-------------|:-------------:|:-------------|
|    person     | 25660        |    bicycle    | 913          |      car      | 3591         |
|  motorcycle   | 866          |   airplane    | 89           |      bus      | 433          |
|     train     | 179          |     truck     | 537          |     boat      | 269          |
| traffic light | 883          | fire hydrant  | 59           |   stop sign   | 70           |
| parking meter | 75           |     bench     | 805          |     bird      | 420          |
|      cat      | 65           |      dog      | 267          |     horse     | 478          |
|     sheep     | 415          |      cow      | 448          |   elephant    | 219          |
|     bear      | 29           |     zebra     | 137          |    giraffe    | 140          |
|   backpack    | 1070         |   umbrella    | 1038         |    handbag    | 1651         |
|      tie      | 447          |   suitcase    | 359          |    frisbee    | 218          |
|     skis      | 220          |   snowboard   | 98           |  sports ball  | 805          |
|     kite      | 544          | baseball bat  | 512          | baseball gl.. | 621          |
|  skateboard   | 442          |   surfboard   | 257          | tennis racket | 490          |
|    bottle     | 691          |  wine glass   | 257          |      cup      | 573          |
|     fork      | 105          |     knife     | 188          |     spoon     | 90           |
|     bowl      | 229          |    banana     | 157          |     apple     | 73           |
|   sandwich    | 42           |    orange     | 71           |   broccoli    | 9            |
|    carrot     | 52           |    hot dog    | 55           |     pizza     | 130          |
|     donut     | 104          |     cake      | 134          |     chair     | 2464         |
|     couch     | 169          | potted plant  | 313          |      bed      | 52           |
| dining table  | 444          |    toilet     | 24           |      tv       | 151          |
|    laptop     | 201          |     mouse     | 34           |    remote     | 239          |
|   keyboard    | 26           |  cell phone   | 501          |   microwave   | 14           |
|     oven      | 28           |    toaster    | 0            |     sink      | 23           |
| refrigerator  | 30           |     book      | 431          |     clock     | 168          |
|     vase      | 54           |   scissors    | 17           |  teddy bear   | 88           |
|  hair drier   | 5            |  toothbrush   | 28           |    banner     | 431          |
|    blanket    | 49           |    bridge     | 84           |   cardboard   | 115          |
|    counter    | 56           |    curtain    | 121          |  door-stuff   | 283          |
|  floor-wood   | 148          |    flower     | 118          |     fruit     | 29           |
|    gravel     | 112          |     house     | 349          |     light     | 481          |
| mirror-stuff  | 66           |      net      | 140          |    pillow     | 46           |
|   platform    | 132          | playingfield  | 699          |   railroad    | 128          |
|     river     | 66           |     road      | 1178         |     roof      | 286          |
|     sand      | 295          |      sea      | 228          |     shelf     | 91           |
|     snow      | 146          |    stairs     | 237          |     tent      | 149          |
|     towel     | 53           |  wall-brick   | 281          |  wall-stone   | 90           |
|   wall-tile   | 88           |   wall-wood   | 181          |  water-other  | 67           |
| window-blind  | 66           | window-other  | 565          |  tree-merged  | 2047         |
| fence-merged  | 1051         | ceiling-mer.. | 409          | sky-other-m.. | 1874         |
| cabinet-mer.. | 105          | table-merged  | 321          | floor-other.. | 474          |
| pavement-me.. | 1437         | mountain-me.. | 287          | grass-merged  | 1186         |
|  dirt-merged  | 638          | paper-merged  | 283          | food-other-.. | 118          |
| building-ot.. | 1578         |  rock-merged  | 155          | wall-other-.. | 1685         |
|  rug-merged   | 203          |               |              |               |              |
|     total     | 75788        |               |              |               |              |[0m
[10/09 23:22:26] d2.data.build INFO: Using training sampler TrainingSampler
[10/09 23:22:27] d2.data.common INFO: Serializing 4500 elements to byte tensors and concatenating them all ...
[10/09 23:22:27] d2.data.common INFO: Serialized dataset takes 8.84 MiB
[10/09 23:22:27] fvcore.common.checkpoint INFO: [Checkpointer] Loading from ./relations_output_seg_transformer_resnet101/model_0006999.pth ...
[10/09 23:23:21] detectron2 INFO: Rank of current process: 0. World size: 2
[10/09 23:23:22] detectron2 INFO: Environment info:
----------------------  ----------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
numpy                   1.23.3
detectron2              0.6 @/root/autodl-tmp/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.1
detectron2 arch flags   8.6
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.12.0+cu113 @/root/miniconda3/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 Tesla V100S-PCIE-32GB (arch=7.0)
Driver version          470.82.00
CUDA_HOME               /usr/local/cuda
Pillow                  9.1.1
torchvision             0.13.0+cu113 @/root/miniconda3/lib/python3.8/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[10/09 23:23:22] detectron2 INFO: Command line arguments: Namespace(config_file='configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv_custom.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/09 23:23:22] detectron2 INFO: Contents of args.config_file=configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv_custom.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m../Cityscapes-PanopticSegmentation/Base-PanopticDeepLab-OS16.yaml
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;242m# WEIGHTS: "detectron2://DeepLab/R-103.pkl"[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m./relations_output_seg_transformer_resnet101/model_best.pth[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m123.675[39m,[38;5;15m [39m[38;5;15m116.280[39m,[38;5;15m [39m[38;5;15m103.530[39m]
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m58.395[39m,[38;5;15m [39m[38;5;15m57.120[39m,[38;5;15m [39m[38;5;15m57.375[39m]
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbuild_resnet_deeplab_backbone[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;186m"[39m[38;5;186mres2[39m[38;5;186m"[39m,[38;5;15m [39m[38;5;186m"[39m[38;5;186mres3[39m[38;5;186m"[39m,[38;5;15m [39m[38;5;186m"[39m[38;5;186mres5[39m[38;5;186m"[39m]
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m[38;5;15m [39m[[38;5;15m1[39m,[38;5;15m [39m[38;5;15m2[39m,[38;5;15m [39m[38;5;15m4[39m]
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mdeeplab[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mFalse
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mLOSS_TOP_K[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mSTUFF_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m41
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mPREDICT_INSTANCES[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m  [39m[38;5;197mPSG_RELATION_NET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENCODER_DEPTH[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mTOTAL_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39m56
[38;5;15m    [39m[38;5;197mTOTAL_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m[38;5;15m [39m("psg_train",)
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m[38;5;15m [39m("psg_val",)
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m5e-4
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mRGB[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mGAUSSIAN_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;81m!!python/object/apply:eval[39m[38;5;15m [39m[[38;5;186m"[39m[38;5;186m[int(x[39m[38;5;15m [39m[38;5;186m*[39m[38;5;15m [39m[38;5;186m0.1[39m[38;5;15m [39m[38;5;186m*[39m[38;5;15m [39m[38;5;186m640)[39m[38;5;15m [39m[38;5;186mfor[39m[38;5;15m [39m[38;5;186mx[39m[38;5;15m [39m[38;5;186min[39m[38;5;15m [39m[38;5;186mrange(5,[39m[38;5;15m [39m[38;5;186m16)][39m[38;5;186m"[39m]
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mchoice[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mTrue
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mabsolute[39m[38;5;186m"[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m(640, 640)
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m./relations_output_seg_transformer_resnet101[39m[38;5;186m"[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m

[10/09 23:23:22] detectron2 INFO: Running with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m10
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39mTrainingSampler
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mpsg_val
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39mpsg_train
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSINGLE_CATEGORY_MAX_AREA[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m640
[38;5;15m    [39m-[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39mabsolute
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39mRGB
[38;5;15m  [39m[38;5;197mGAUSSIAN_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m8
[38;5;15m  [39m[38;5;197mIGNORE_CROWD_IN_SEMANTIC[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mIGNORE_STUFF_IN_OFFSET[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39mpolygon
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m320
[38;5;15m  [39m-[38;5;15m [39m384
[38;5;15m  [39m-[38;5;15m [39m448
[38;5;15m  [39m-[38;5;15m [39m512
[38;5;15m  [39m-[38;5;15m [39m576
[38;5;15m  [39m-[38;5;15m [39m640
[38;5;15m  [39m-[38;5;15m [39m704
[38;5;15m  [39m-[38;5;15m [39m768
[38;5;15m  [39m-[38;5;15m [39m832
[38;5;15m  [39m-[38;5;15m [39m896
[38;5;15m  [39m-[38;5;15m [39m960
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39mchoice
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39mhorizontal
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m  [39m[38;5;197mSMALL_INSTANCE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m3
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m-90
[38;5;15m      [39m-[38;5;15m [39m0
[38;5;15m      [39m-[38;5;15m [39m90
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m0.5
[38;5;15m      [39m-[38;5;15m [39m1.0
[38;5;15m      [39m-[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mDefaultAnchorGenerator
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m32
[38;5;15m      [39m-[38;5;15m [39m64
[38;5;15m      [39m-[38;5;15m [39m128
[38;5;15m      [39m-[38;5;15m [39m256
[38;5;15m      [39m-[38;5;15m [39m512
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mbuild_resnet_deeplab_backbone
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39mcuda
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39msum
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m  [39m[38;5;197mINS_EMBED_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m6
[38;5;15m    [39m-[38;5;15m [39m12
[38;5;15m    [39m-[38;5;15m [39m18
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mCENTER_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m200.0
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m32
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLabInsEmbedHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mSyncBN
[38;5;15m    [39m[38;5;197mOFFSET_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLab
[38;5;15m  [39m[38;5;197mPANOPTIC_DEEPLAB[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBENCHMARK_NETWORK_SPEED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCENTER_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m41
[38;5;15m    [39m[38;5;197mPREDICT_INSTANCES[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSIZE_DIVISIBILITY[39m[38;5;15m:[39m[38;5;15m [39m640
[38;5;15m    [39m[38;5;197mSTUFF_AREA[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mTOP_K_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m4096
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m123.675
[38;5;15m  [39m-[38;5;15m [39m116.28
[38;5;15m  [39m-[38;5;15m [39m103.53
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m58.395
[38;5;15m  [39m-[38;5;15m [39m57.12
[38;5;15m  [39m-[38;5;15m [39m57.375
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRPN
[38;5;15m  [39m[38;5;197mPSG_RELATION_NET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mALPHA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mCLS_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mENCODER_DEPTH[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mFEATURE_NAME_LIST[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPSGRelationNet
[38;5;15m    [39m[38;5;197mTOTAL_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mTOTAL_RELATIONS[39m[38;5;15m:[39m[38;5;15m [39m56
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m-[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m101
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mFrozenBN
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mRES4_DILATION[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;15m    [39m[38;5;197mRES5_MULTI_GRID[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m-[38;5;15m [39m2
[38;5;15m    [39m-[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m128
[38;5;15m    [39m[38;5;197mSTEM_TYPE[39m[38;5;15m:[39m[38;5;15m [39mdeeplab
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m64
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m-[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mp3
[38;5;15m    [39m-[38;5;15m [39mp4
[38;5;15m    [39m-[38;5;15m [39mp5
[38;5;15m    [39m-[38;5;15m [39mp6
[38;5;15m    [39m-[38;5;15m [39mp7
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.4
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m0.01
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m      [39m-[38;5;15m [39m5.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m20.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m      [39m-[38;5;15m [39m10.0
[38;5;15m    [39m-[38;5;15m [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m30.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m      [39m-[38;5;15m [39m15.0
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m-[38;5;15m [39m0.6
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m1024
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m50
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mRes5ROIHeads
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m80
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.25
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m0.05
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m-[38;5;15m [39m512
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mKRCNNConvDeconvUpsampleHead
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m17
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mMaskRCNNConvUpsampleHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m14
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39mROIAlignV2
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39msmooth_l1
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39mStandardRPNHead
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres4
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0
[38;5;15m    [39m-[38;5;15m [39m-1
[38;5;15m    [39m-[38;5;15m [39m1
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m0.3
[38;5;15m    [39m-[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m0.7
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m0.5
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m2000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m6000
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m12000
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mASPP_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mASPP_DILATIONS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m6
[38;5;15m    [39m-[38;5;15m [39m12
[38;5;15m    [39m-[38;5;15m [39m18
[38;5;15m    [39m[38;5;197mASPP_DROPOUT[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m4
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mHEAD_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m256
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m255
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m-[38;5;15m [39mres5
[38;5;15m    [39m[38;5;197mLOSS_TOP_K[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mLOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39mhard_pixel_mining
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m5.0
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39mPanopticDeepLabSemSegHead
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39mSyncBN
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m133
[38;5;15m    [39m[38;5;197mPROJECT_CHANNELS[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m32
[38;5;15m    [39m-[38;5;15m [39m64
[38;5;15m    [39m[38;5;197mPROJECT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39mres2
[38;5;15m    [39m-[38;5;15m [39mres3
[38;5;15m    [39m[38;5;197mUSE_DEPTHWISE_SEPARABLE_CONV[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m./relations_output_seg_transformer_resnet101/model_best.pth
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m./relations_output_seg_transformer_resnet101
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m-1
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m0.0005
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39mvalue
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m1.0
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m2.0
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m0.1
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m16
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39mWarmupPolyLR
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m50000
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mNUM_DECAYS[39m[38;5;15m:[39m[38;5;15m [39m3
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39mADAM
[38;5;15m  [39m[38;5;197mPOLY_LR_CONSTANT_ENDING[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mPOLY_LR_POWER[39m[38;5;15m:[39m[38;5;15m [39m0.9
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m0
[38;5;15m  [39m[38;5;197mRESCALE_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m-[38;5;15m [39m30000
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m0.001
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39mlinear
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m0.0
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39mtrue
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m4000
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m-[38;5;15m [39m400
[38;5;15m    [39m-[38;5;15m [39m500
[38;5;15m    [39m-[38;5;15m [39m600
[38;5;15m    [39m-[38;5;15m [39m700
[38;5;15m    [39m-[38;5;15m [39m800
[38;5;15m    [39m-[38;5;15m [39m900
[38;5;15m    [39m-[38;5;15m [39m1000
[38;5;15m    [39m-[38;5;15m [39m1100
[38;5;15m    [39m-[38;5;15m [39m1200
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m100
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m1000
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[]
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39mfalse
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m200
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m2
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m0

[10/09 23:23:22] detectron2 INFO: Full config saved to ./relations_output_seg_transformer_resnet101/config.yaml
[10/09 23:23:22] d2.utils.env INFO: Using a generated random seed 22525155
[10/09 23:23:26] d2.engine.defaults INFO: Model:
PanopticDeepLab(
  (backbone): ResNet(
    (stem): DeepLabStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
      )
      (conv3): Conv2d(
        64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv1): Conv2d(
          128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=0.0001)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=0.0001)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=0.0001)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=0.0001)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=0.0001)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=2048, eps=0.0001)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): SyncBatchNorm(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): SyncBatchNorm(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 133, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): SyncBatchNorm(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): SyncBatchNorm(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
  (psg_relation_net): PSGRelationNet(
    (map_dict): ModuleDict(
      (res3): Linear(in_features=512, out_features=256, bias=True)
      (res5): Linear(in_features=2048, out_features=256, bias=True)
    )
    (tf_encoder): Transformer(
      (blocks): ModuleList(
        (0): Block(
          (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (attn): Attention(
            (qkv): Linear(in_features=256, out_features=768, bias=False)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=256, out_features=256, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=256, out_features=768, bias=True)
            (act): GELU(approximate=none)
            (fc2): Linear(in_features=768, out_features=256, bias=True)
            (drop): Dropout(p=0.0, inplace=False)
          )
        )
      )
      (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (pos_drop): Dropout(p=0.0, inplace=False)
    )
    (tf_decoder): Attention(
      (qkv): Linear(in_features=256, out_features=512, bias=True)
      (attn_drop): Dropout(p=0.0, inplace=False)
      (proj_cls): Linear(in_features=256, out_features=256, bias=True)
      (proj_rel): Linear(in_features=256, out_features=256, bias=True)
      (proj_drop): Dropout(p=0.0, inplace=False)
    )
    (cls_fc): Linear(in_features=256, out_features=1, bias=True)
    (rel_fc): Linear(in_features=256, out_features=1, bias=True)
  )
)
[10/09 23:23:26] d2.projects.panoptic_deeplab.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960), max_size=960, sample_style='choice'), RandomCrop(crop_type='absolute', crop_size=[640, 640]), RandomFlip()]
[10/09 23:23:27] d2.data.build INFO: Removed 0 images with no usable annotations. 4500 images left.
[10/09 23:23:27] d2.data.build INFO: Distribution of instances among all 133 categories:
[36m|   category    | #instances   |   category    | #instances   |   category    | #instances   |
|:-------------:|:-------------|:-------------:|:-------------|:-------------:|:-------------|
|    person     | 25660        |    bicycle    | 913          |      car      | 3591         |
|  motorcycle   | 866          |   airplane    | 89           |      bus      | 433          |
|     train     | 179          |     truck     | 537          |     boat      | 269          |
| traffic light | 883          | fire hydrant  | 59           |   stop sign   | 70           |
| parking meter | 75           |     bench     | 805          |     bird      | 420          |
|      cat      | 65           |      dog      | 267          |     horse     | 478          |
|     sheep     | 415          |      cow      | 448          |   elephant    | 219          |
|     bear      | 29           |     zebra     | 137          |    giraffe    | 140          |
|   backpack    | 1070         |   umbrella    | 1038         |    handbag    | 1651         |
|      tie      | 447          |   suitcase    | 359          |    frisbee    | 218          |
|     skis      | 220          |   snowboard   | 98           |  sports ball  | 805          |
|     kite      | 544          | baseball bat  | 512          | baseball gl.. | 621          |
|  skateboard   | 442          |   surfboard   | 257          | tennis racket | 490          |
|    bottle     | 691          |  wine glass   | 257          |      cup      | 573          |
|     fork      | 105          |     knife     | 188          |     spoon     | 90           |
|     bowl      | 229          |    banana     | 157          |     apple     | 73           |
|   sandwich    | 42           |    orange     | 71           |   broccoli    | 9            |
|    carrot     | 52           |    hot dog    | 55           |     pizza     | 130          |
|     donut     | 104          |     cake      | 134          |     chair     | 2464         |
|     couch     | 169          | potted plant  | 313          |      bed      | 52           |
| dining table  | 444          |    toilet     | 24           |      tv       | 151          |
|    laptop     | 201          |     mouse     | 34           |    remote     | 239          |
|   keyboard    | 26           |  cell phone   | 501          |   microwave   | 14           |
|     oven      | 28           |    toaster    | 0            |     sink      | 23           |
| refrigerator  | 30           |     book      | 431          |     clock     | 168          |
|     vase      | 54           |   scissors    | 17           |  teddy bear   | 88           |
|  hair drier   | 5            |  toothbrush   | 28           |    banner     | 431          |
|    blanket    | 49           |    bridge     | 84           |   cardboard   | 115          |
|    counter    | 56           |    curtain    | 121          |  door-stuff   | 283          |
|  floor-wood   | 148          |    flower     | 118          |     fruit     | 29           |
|    gravel     | 112          |     house     | 349          |     light     | 481          |
| mirror-stuff  | 66           |      net      | 140          |    pillow     | 46           |
|   platform    | 132          | playingfield  | 699          |   railroad    | 128          |
|     river     | 66           |     road      | 1178         |     roof      | 286          |
|     sand      | 295          |      sea      | 228          |     shelf     | 91           |
|     snow      | 146          |    stairs     | 237          |     tent      | 149          |
|     towel     | 53           |  wall-brick   | 281          |  wall-stone   | 90           |
|   wall-tile   | 88           |   wall-wood   | 181          |  water-other  | 67           |
| window-blind  | 66           | window-other  | 565          |  tree-merged  | 2047         |
| fence-merged  | 1051         | ceiling-mer.. | 409          | sky-other-m.. | 1874         |
| cabinet-mer.. | 105          | table-merged  | 321          | floor-other.. | 474          |
| pavement-me.. | 1437         | mountain-me.. | 287          | grass-merged  | 1186         |
|  dirt-merged  | 638          | paper-merged  | 283          | food-other-.. | 118          |
| building-ot.. | 1578         |  rock-merged  | 155          | wall-other-.. | 1685         |
|  rug-merged   | 203          |               |              |               |              |
|     total     | 75788        |               |              |               |              |[0m
[10/09 23:23:27] d2.data.build INFO: Using training sampler TrainingSampler
[10/09 23:23:27] d2.data.common INFO: Serializing 4500 elements to byte tensors and concatenating them all ...
[10/09 23:23:27] d2.data.common INFO: Serialized dataset takes 8.84 MiB
[10/09 23:23:27] fvcore.common.checkpoint INFO: [Checkpointer] Loading from ./relations_output_seg_transformer_resnet101/model_best.pth ...
[10/09 23:23:28] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model                                               | Names in Checkpoint| Shapes                                                                                                                                                                                                                                                 |
|:-------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| backbone.res2.0.conv1.*                                      | backbone.res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | (64,) (64,) (64,) (64,) (64,128,1,1)                                                                                                                                                                                                                   |
| backbone.res2.0.conv2.*                                      | backbone.res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (64,) (64,) (64,) (64,) (64,64,3,3)                                                                                                                                                                                                                    |
| backbone.res2.0.conv3.*                                      | backbone.res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,64,1,1)                                                                                                                                                                                                               |
| backbone.res2.0.shortcut.*                                   | backbone.res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,128,1,1)                                                                                                                                                                                                              |
| backbone.res2.1.conv1.*                                      | backbone.res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (64,) (64,) (64,) (64,) (64,256,1,1)                                                                                                                                                                                                                   |
| backbone.res2.1.conv2.*                                      | backbone.res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | (64,) (64,) (64,) (64,) (64,64,3,3)                                                                                                                                                                                                                    |
| backbone.res2.1.conv3.*                                      | backbone.res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,64,1,1)                                                                                                                                                                                                               |
| backbone.res2.2.conv1.*                                      | backbone.res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (64,) (64,) (64,) (64,) (64,256,1,1)                                                                                                                                                                                                                   |
| backbone.res2.2.conv2.*                                      | backbone.res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (64,) (64,) (64,) (64,) (64,64,3,3)                                                                                                                                                                                                                    |
| backbone.res2.2.conv3.*                                      | backbone.res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,64,1,1)                                                                                                                                                                                                               |
| backbone.res3.0.conv1.*                                      | backbone.res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (128,) (128,) (128,) (128,) (128,256,1,1)                                                                                                                                                                                                              |
| backbone.res3.0.conv2.*                                      | backbone.res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (128,) (128,) (128,) (128,) (128,128,3,3)                                                                                                                                                                                                              |
| backbone.res3.0.conv3.*                                      | backbone.res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | (512,) (512,) (512,) (512,) (512,128,1,1)                                                                                                                                                                                                              |
| backbone.res3.0.shortcut.*                                   | backbone.res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (512,) (512,) (512,) (512,) (512,256,1,1)                                                                                                                                                                                                              |
| backbone.res3.1.conv1.*                                      | backbone.res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | (128,) (128,) (128,) (128,) (128,512,1,1)                                                                                                                                                                                                              |
| backbone.res3.1.conv2.*                                      | backbone.res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (128,) (128,) (128,) (128,) (128,128,3,3)                                                                                                                                                                                                              |
| backbone.res3.1.conv3.*                                      | backbone.res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | (512,) (512,) (512,) (512,) (512,128,1,1)                                                                                                                                                                                                              |
| backbone.res3.2.conv1.*                                      | backbone.res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (128,) (128,) (128,) (128,) (128,512,1,1)                                                                                                                                                                                                              |
| backbone.res3.2.conv2.*                                      | backbone.res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (128,) (128,) (128,) (128,) (128,128,3,3)                                                                                                                                                                                                              |
| backbone.res3.2.conv3.*                                      | backbone.res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (512,) (512,) (512,) (512,) (512,128,1,1)                                                                                                                                                                                                              |
| backbone.res3.3.conv1.*                                      | backbone.res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (128,) (128,) (128,) (128,) (128,512,1,1)                                                                                                                                                                                                              |
| backbone.res3.3.conv2.*                                      | backbone.res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (128,) (128,) (128,) (128,) (128,128,3,3)                                                                                                                                                                                                              |
| backbone.res3.3.conv3.*                                      | backbone.res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (512,) (512,) (512,) (512,) (512,128,1,1)                                                                                                                                                                                                              |
| backbone.res4.0.conv1.*                                      | backbone.res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,512,1,1)                                                                                                                                                                                                              |
| backbone.res4.0.conv2.*                                      | backbone.res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.0.conv3.*                                      | backbone.res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.0.shortcut.*                                   | backbone.res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)                                                                                                                                                                                                         |
| backbone.res4.1.conv1.*                                      | backbone.res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.1.conv2.*                                      | backbone.res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.1.conv3.*                                      | backbone.res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.10.conv1.*                                     | backbone.res4.10.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.10.conv2.*                                     | backbone.res4.10.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.10.conv3.*                                     | backbone.res4.10.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.11.conv1.*                                     | backbone.res4.11.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.11.conv2.*                                     | backbone.res4.11.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.11.conv3.*                                     | backbone.res4.11.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.12.conv1.*                                     | backbone.res4.12.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.12.conv2.*                                     | backbone.res4.12.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.12.conv3.*                                     | backbone.res4.12.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.13.conv1.*                                     | backbone.res4.13.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.13.conv2.*                                     | backbone.res4.13.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.13.conv3.*                                     | backbone.res4.13.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.14.conv1.*                                     | backbone.res4.14.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.14.conv2.*                                     | backbone.res4.14.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.14.conv3.*                                     | backbone.res4.14.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.15.conv1.*                                     | backbone.res4.15.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.15.conv2.*                                     | backbone.res4.15.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.15.conv3.*                                     | backbone.res4.15.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.16.conv1.*                                     | backbone.res4.16.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.16.conv2.*                                     | backbone.res4.16.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.16.conv3.*                                     | backbone.res4.16.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.17.conv1.*                                     | backbone.res4.17.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.17.conv2.*                                     | backbone.res4.17.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.17.conv3.*                                     | backbone.res4.17.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.18.conv1.*                                     | backbone.res4.18.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.18.conv2.*                                     | backbone.res4.18.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.18.conv3.*                                     | backbone.res4.18.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.19.conv1.*                                     | backbone.res4.19.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.19.conv2.*                                     | backbone.res4.19.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.19.conv3.*                                     | backbone.res4.19.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.2.conv1.*                                      | backbone.res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.2.conv2.*                                      | backbone.res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.2.conv3.*                                      | backbone.res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.20.conv1.*                                     | backbone.res4.20.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.20.conv2.*                                     | backbone.res4.20.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.20.conv3.*                                     | backbone.res4.20.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.21.conv1.*                                     | backbone.res4.21.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.21.conv2.*                                     | backbone.res4.21.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.21.conv3.*                                     | backbone.res4.21.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.22.conv1.*                                     | backbone.res4.22.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.22.conv2.*                                     | backbone.res4.22.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.22.conv3.*                                     | backbone.res4.22.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.3.conv1.*                                      | backbone.res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.3.conv2.*                                      | backbone.res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.3.conv3.*                                      | backbone.res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.4.conv1.*                                      | backbone.res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.4.conv2.*                                      | backbone.res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.4.conv3.*                                      | backbone.res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.5.conv1.*                                      | backbone.res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.5.conv2.*                                      | backbone.res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.5.conv3.*                                      | backbone.res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.6.conv1.*                                      | backbone.res4.6.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.6.conv2.*                                      | backbone.res4.6.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.6.conv3.*                                      | backbone.res4.6.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.7.conv1.*                                      | backbone.res4.7.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.7.conv2.*                                      | backbone.res4.7.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.7.conv3.*                                      | backbone.res4.7.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.8.conv1.*                                      | backbone.res4.8.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.8.conv2.*                                      | backbone.res4.8.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.8.conv3.*                                      | backbone.res4.8.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res4.9.conv1.*                                      | backbone.res4.9.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,1024,1,1)                                                                                                                                                                                                             |
| backbone.res4.9.conv2.*                                      | backbone.res4.9.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) (256,) (256,) (256,) (256,256,3,3)                                                                                                                                                                                                              |
| backbone.res4.9.conv3.*                                      | backbone.res4.9.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)                                                                                                                                                                                                         |
| backbone.res5.0.conv1.*                                      | backbone.res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (512,) (512,) (512,) (512,) (512,1024,1,1)                                                                                                                                                                                                             |
| backbone.res5.0.conv2.*                                      | backbone.res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (512,) (512,) (512,) (512,) (512,512,3,3)                                                                                                                                                                                                              |
| backbone.res5.0.conv3.*                                      | backbone.res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)                                                                                                                                                                                                         |
| backbone.res5.0.shortcut.*                                   | backbone.res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1)                                                                                                                                                                                                        |
| backbone.res5.1.conv1.*                                      | backbone.res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (512,) (512,) (512,) (512,) (512,2048,1,1)                                                                                                                                                                                                             |
| backbone.res5.1.conv2.*                                      | backbone.res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (512,) (512,) (512,) (512,) (512,512,3,3)                                                                                                                                                                                                              |
| backbone.res5.1.conv3.*                                      | backbone.res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)                                                                                                                                                                                                         |
| backbone.res5.2.conv1.*                                      | backbone.res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (512,) (512,) (512,) (512,) (512,2048,1,1)                                                                                                                                                                                                             |
| backbone.res5.2.conv2.*                                      | backbone.res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | (512,) (512,) (512,) (512,) (512,512,3,3)                                                                                                                                                                                                              |
| backbone.res5.2.conv3.*                                      | backbone.res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)                                                                                                                                                                                                         |
| backbone.stem.conv1.*                                        | backbone.stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (64,) (64,) (64,) (64,) (64,3,3,3)                                                                                                                                                                                                                     |
| backbone.stem.conv2.*                                        | backbone.stem.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}| (64,) (64,) (64,) (64,) (64,64,3,3)                                                                                                                                                                                                                    |
| backbone.stem.conv3.*                                        | backbone.stem.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | (128,) (128,) (128,) (128,) (128,64,3,3)                                                                                                                                                                                                               |
| ins_embed_head.center_head.0.*                               | ins_embed_head.center_head.0.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (128,) () (128,) (128,) (128,) (128,128,3,3)                                                                                                                                                                                                           |
| ins_embed_head.center_head.1.*                               | ins_embed_head.center_head.1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (32,) () (32,) (32,) (32,) (32,128,3,3)                                                                                                                                                                                                                |
| ins_embed_head.center_predictor.*                            | ins_embed_head.center_predictor.{bias,weight}| (1,) (1,32,1,1)                                                                                                                                                                                                                                        |
| ins_embed_head.decoder.res2.fuse_conv.depthwise.*            | ins_embed_head.decoder.res2.fuse_conv.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | (160,) () (160,) (160,) (160,) (160,1,5,5)                                                                                                                                                                                                             |
| ins_embed_head.decoder.res2.fuse_conv.pointwise.*            | ins_embed_head.decoder.res2.fuse_conv.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (128,) () (128,) (128,) (128,) (128,160,1,1)                                                                                                                                                                                                           |
| ins_embed_head.decoder.res2.project_conv.*                   | ins_embed_head.decoder.res2.project_conv.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (32,) () (32,) (32,) (32,) (32,256,1,1)                                                                                                                                                                                                                |
| ins_embed_head.decoder.res3.fuse_conv.depthwise.*            | ins_embed_head.decoder.res3.fuse_conv.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (320,) () (320,) (320,) (320,) (320,1,5,5)                                                                                                                                                                                                             |
| ins_embed_head.decoder.res3.fuse_conv.pointwise.*            | ins_embed_head.decoder.res3.fuse_conv.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (128,) () (128,) (128,) (128,) (128,320,1,1)                                                                                                                                                                                                           |
| ins_embed_head.decoder.res3.project_conv.*                   | ins_embed_head.decoder.res3.project_conv.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (64,) () (64,) (64,) (64,) (64,512,1,1)                                                                                                                                                                                                                |
| ins_embed_head.decoder.res5.project_conv.convs.0.*           | ins_embed_head.decoder.res5.project_conv.convs.0.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | (256,) () (256,) (256,) (256,) (256,2048,1,1)                                                                                                                                                                                                          |
| ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.* | ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3)                                                                                                                                                                                                        |
| ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.* | ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) () (256,) (256,) (256,) (256,2048,1,1)                                                                                                                                                                                                          |
| ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.* | ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3)                                                                                                                                                                                                        |
| ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.* | ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | (256,) () (256,) (256,) (256,) (256,2048,1,1)                                                                                                                                                                                                          |
| ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.* | ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3)                                                                                                                                                                                                        |
| ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.* | ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) () (256,) (256,) (256,) (256,2048,1,1)                                                                                                                                                                                                          |
| ins_embed_head.decoder.res5.project_conv.convs.4.1.*         | ins_embed_head.decoder.res5.project_conv.convs.4.1.{bias,weight}| (256,) (256,2048,1,1)                                                                                                                                                                                                                                  |
| ins_embed_head.decoder.res5.project_conv.project.*           | ins_embed_head.decoder.res5.project_conv.project.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) () (256,) (256,) (256,) (256,1280,1,1)                                                                                                                                                                                                          |
| ins_embed_head.offset_head.depthwise.*                       | ins_embed_head.offset_head.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (128,) () (128,) (128,) (128,) (128,1,5,5)                                                                                                                                                                                                             |
| ins_embed_head.offset_head.pointwise.*                       | ins_embed_head.offset_head.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (32,) () (32,) (32,) (32,) (32,128,1,1)                                                                                                                                                                                                                |
| ins_embed_head.offset_predictor.*                            | ins_embed_head.offset_predictor.{bias,weight}| (2,) (2,32,1,1)                                                                                                                                                                                                                                        |
| psg_relation_net.*                                           | psg_relation_net.{Q_cls,Q_rel,cls_fc.bias,cls_fc.weight,map_dict.res3.bias,map_dict.res3.weight,map_dict.res5.bias,map_dict.res5.weight,rel_fc.bias,rel_fc.weight,tf_decoder.proj_cls.bias,tf_decoder.proj_cls.weight,tf_decoder.proj_rel.bias,tf_decoder.proj_rel.weight,tf_decoder.qkv.bias,tf_decoder.qkv.weight,tf_encoder.blocks.0.attn.proj.bias,tf_encoder.blocks.0.attn.proj.weight,tf_encoder.blocks.0.attn.qkv.weight,tf_encoder.blocks.0.mlp.fc1.bias,tf_encoder.blocks.0.mlp.fc1.weight,tf_encoder.blocks.0.mlp.fc2.bias,tf_encoder.blocks.0.mlp.fc2.weight,tf_encoder.blocks.0.norm1.bias,tf_encoder.blocks.0.norm1.weight,tf_encoder.blocks.0.norm2.bias,tf_encoder.blocks.0.norm2.weight,tf_encoder.norm.bias,tf_encoder.norm.weight,tf_encoder.pos_embed} | (133,256) (56,256) (1,) (1,256) (256,) (256,512) (256,) (256,2048) (1,) (1,256) (256,) (256,256) (256,) (256,256) (512,) (512,256) (256,) (256,256) (768,256) (768,) (768,256) (256,) (256,768) (256,) (256,) (256,) (256,) (256,) (256,) (1,8000,256) |
| sem_seg_head.decoder.res2.fuse_conv.depthwise.*              | sem_seg_head.decoder.res2.fuse_conv.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (288,) () (288,) (288,) (288,) (288,1,5,5)                                                                                                                                                                                                             |
| sem_seg_head.decoder.res2.fuse_conv.pointwise.*              | sem_seg_head.decoder.res2.fuse_conv.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) () (256,) (256,) (256,) (256,288,1,1)                                                                                                                                                                                                           |
| sem_seg_head.decoder.res2.project_conv.*                     | sem_seg_head.decoder.res2.project_conv.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (32,) () (32,) (32,) (32,) (32,256,1,1)                                                                                                                                                                                                                |
| sem_seg_head.decoder.res3.fuse_conv.depthwise.*              | sem_seg_head.decoder.res3.fuse_conv.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (320,) () (320,) (320,) (320,) (320,1,5,5)                                                                                                                                                                                                             |
| sem_seg_head.decoder.res3.fuse_conv.pointwise.*              | sem_seg_head.decoder.res3.fuse_conv.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) () (256,) (256,) (256,) (256,320,1,1)                                                                                                                                                                                                           |
| sem_seg_head.decoder.res3.project_conv.*                     | sem_seg_head.decoder.res3.project_conv.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (64,) () (64,) (64,) (64,) (64,512,1,1)                                                                                                                                                                                                                |
| sem_seg_head.decoder.res5.project_conv.convs.0.*             | sem_seg_head.decoder.res5.project_conv.convs.0.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) () (256,) (256,) (256,) (256,2048,1,1)                                                                                                                                                                                                          |
| sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.*   | sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3)                                                                                                                                                                                                        |
| sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.*   | sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) () (256,) (256,) (256,) (256,2048,1,1)                                                                                                                                                                                                          |
| sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.*   | sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3)                                                                                                                                                                                                        |
| sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.*   | sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) () (256,) (256,) (256,) (256,2048,1,1)                                                                                                                                                                                                          |
| sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.*   | sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (2048,) () (2048,) (2048,) (2048,) (2048,1,3,3)                                                                                                                                                                                                        |
| sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.*   | sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) () (256,) (256,) (256,) (256,2048,1,1)                                                                                                                                                                                                          |
| sem_seg_head.decoder.res5.project_conv.convs.4.1.*           | sem_seg_head.decoder.res5.project_conv.convs.4.1.{bias,weight}| (256,) (256,2048,1,1)                                                                                                                                                                                                                                  |
| sem_seg_head.decoder.res5.project_conv.project.*             | sem_seg_head.decoder.res5.project_conv.project.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) () (256,) (256,) (256,) (256,1280,1,1)                                                                                                                                                                                                          |
| sem_seg_head.head.depthwise.*                                | sem_seg_head.head.depthwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) () (256,) (256,) (256,) (256,1,5,5)                                                                                                                                                                                                             |
| sem_seg_head.head.pointwise.*                                | sem_seg_head.head.pointwise.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}| (256,) () (256,) (256,) (256,) (256,256,1,1)                                                                                                                                                                                                           |
| sem_seg_head.predictor.*                                     | sem_seg_head.predictor.{bias,weight}| (133,) (133,256,1,1)                                                                                                                                                                                                                                   |
[10/09 23:23:29] d2.engine.train_loop INFO: Starting training from iteration 0
[10/09 23:24:05] d2.utils.events INFO:  eta: 14:43:59  iter: 19  total_loss: 4.442  loss_sem_seg: 2.965  loss_relation: 0.2528  loss_center: 0.7578  loss_offset: 0.4701  time: 1.0614  data_time: 0.7448  lr: 9.9871e-06  max_mem: 19293M
[10/09 23:24:26] d2.utils.events INFO:  eta: 14:44:51  iter: 39  total_loss: 4.495  loss_sem_seg: 3.038  loss_relation: 0.2577  loss_center: 0.7184  loss_offset: 0.4527  time: 1.0656  data_time: 0.0654  lr: 1.9966e-05  max_mem: 19293M
[10/09 23:24:48] d2.utils.events INFO:  eta: 14:47:50  iter: 59  total_loss: 4.516  loss_sem_seg: 3.044  loss_relation: 0.2677  loss_center: 0.7509  loss_offset: 0.4339  time: 1.0675  data_time: 0.0618  lr: 2.9939e-05  max_mem: 19293M
[10/09 23:25:09] d2.utils.events INFO:  eta: 14:48:20  iter: 79  total_loss: 4.501  loss_sem_seg: 3.098  loss_relation: 0.2586  loss_center: 0.6918  loss_offset: 0.4809  time: 1.0692  data_time: 0.0589  lr: 3.9904e-05  max_mem: 19293M
[10/09 23:25:31] d2.utils.events INFO:  eta: 14:49:45  iter: 99  total_loss: 4.103  loss_sem_seg: 2.785  loss_relation: 0.2476  loss_center: 0.7226  loss_offset: 0.4409  time: 1.0705  data_time: 0.0619  lr: 4.9861e-05  max_mem: 19293M
[10/09 23:25:52] d2.utils.events INFO:  eta: 14:50:47  iter: 119  total_loss: 4.246  loss_sem_seg: 2.908  loss_relation: 0.2576  loss_center: 0.6955  loss_offset: 0.4243  time: 1.0718  data_time: 0.0650  lr: 5.9812e-05  max_mem: 19293M
[10/09 23:26:14] d2.utils.events INFO:  eta: 14:50:27  iter: 139  total_loss: 4.756  loss_sem_seg: 3.206  loss_relation: 0.2613  loss_center: 0.8301  loss_offset: 0.4681  time: 1.0723  data_time: 0.0608  lr: 6.9756e-05  max_mem: 19293M
[10/09 23:26:35] d2.utils.events INFO:  eta: 14:50:32  iter: 159  total_loss: 4.358  loss_sem_seg: 2.972  loss_relation: 0.2546  loss_center: 0.7211  loss_offset: 0.5042  time: 1.0729  data_time: 0.0668  lr: 7.9692e-05  max_mem: 19293M
[10/09 23:26:57] d2.utils.events INFO:  eta: 14:50:31  iter: 179  total_loss: 4.461  loss_sem_seg: 3.058  loss_relation: 0.2552  loss_center: 0.663  loss_offset: 0.4312  time: 1.0729  data_time: 0.0632  lr: 8.9621e-05  max_mem: 19293M
[10/09 23:27:18] d2.utils.events INFO:  eta: 14:50:08  iter: 199  total_loss: 4.22  loss_sem_seg: 2.913  loss_relation: 0.2591  loss_center: 0.7082  loss_offset: 0.4367  time: 1.0731  data_time: 0.0637  lr: 9.9543e-05  max_mem: 19293M
[10/09 23:27:40] d2.utils.events INFO:  eta: 14:49:31  iter: 219  total_loss: 4.457  loss_sem_seg: 2.938  loss_relation: 0.2561  loss_center: 0.6994  loss_offset: 0.4938  time: 1.0730  data_time: 0.0639  lr: 0.00010946  max_mem: 19293M
[10/09 23:28:01] d2.utils.events INFO:  eta: 14:48:29  iter: 239  total_loss: 4.206  loss_sem_seg: 2.766  loss_relation: 0.2604  loss_center: 0.7142  loss_offset: 0.4225  time: 1.0728  data_time: 0.0624  lr: 0.00011936  max_mem: 19293M
[10/09 23:28:23] d2.utils.events INFO:  eta: 14:47:39  iter: 259  total_loss: 4.607  loss_sem_seg: 3.019  loss_relation: 0.2713  loss_center: 0.6998  loss_offset: 0.4362  time: 1.0727  data_time: 0.0642  lr: 0.00012926  max_mem: 19293M
[10/09 23:28:44] d2.utils.events INFO:  eta: 14:46:43  iter: 279  total_loss: 4.294  loss_sem_seg: 2.832  loss_relation: 0.2671  loss_center: 0.7204  loss_offset: 0.4236  time: 1.0722  data_time: 0.0646  lr: 0.00013916  max_mem: 19293M
[10/09 23:29:05] d2.utils.events INFO:  eta: 14:46:11  iter: 299  total_loss: 4.238  loss_sem_seg: 2.677  loss_relation: 0.2544  loss_center: 0.7197  loss_offset: 0.4374  time: 1.0721  data_time: 0.0610  lr: 0.00014904  max_mem: 19293M
[10/09 23:29:27] d2.utils.events INFO:  eta: 14:45:30  iter: 319  total_loss: 4.098  loss_sem_seg: 2.697  loss_relation: 0.2526  loss_center: 0.65  loss_offset: 0.4238  time: 1.0717  data_time: 0.0619  lr: 0.00015892  max_mem: 19293M
[10/09 23:29:48] d2.utils.events INFO:  eta: 14:44:16  iter: 339  total_loss: 4.109  loss_sem_seg: 2.739  loss_relation: 0.2549  loss_center: 0.6726  loss_offset: 0.4217  time: 1.0711  data_time: 0.0603  lr: 0.00016879  max_mem: 19293M
[10/09 23:30:09] d2.utils.events INFO:  eta: 14:43:26  iter: 359  total_loss: 4.265  loss_sem_seg: 2.831  loss_relation: 0.2562  loss_center: 0.6953  loss_offset: 0.4397  time: 1.0706  data_time: 0.0562  lr: 0.00017866  max_mem: 19293M
[10/09 23:30:31] d2.utils.events INFO:  eta: 14:43:05  iter: 379  total_loss: 4.357  loss_sem_seg: 3.034  loss_relation: 0.2645  loss_center: 0.6837  loss_offset: 0.4177  time: 1.0704  data_time: 0.0593  lr: 0.00018852  max_mem: 19293M
[10/09 23:30:52] d2.utils.events INFO:  eta: 14:43:02  iter: 399  total_loss: 4.524  loss_sem_seg: 2.989  loss_relation: 0.2666  loss_center: 0.7782  loss_offset: 0.4487  time: 1.0703  data_time: 0.0639  lr: 0.00019836  max_mem: 19293M
[10/09 23:31:13] d2.utils.events INFO:  eta: 14:42:45  iter: 419  total_loss: 4.409  loss_sem_seg: 2.912  loss_relation: 0.2581  loss_center: 0.7228  loss_offset: 0.4504  time: 1.0704  data_time: 0.0618  lr: 0.00020821  max_mem: 19293M
[10/09 23:31:35] d2.utils.events INFO:  eta: 14:42:07  iter: 439  total_loss: 4.125  loss_sem_seg: 2.783  loss_relation: 0.2585  loss_center: 0.706  loss_offset: 0.3771  time: 1.0700  data_time: 0.0554  lr: 0.00021804  max_mem: 19293M
[10/09 23:31:56] d2.utils.events INFO:  eta: 14:41:36  iter: 459  total_loss: 4.211  loss_sem_seg: 2.767  loss_relation: 0.2536  loss_center: 0.7895  loss_offset: 0.4219  time: 1.0697  data_time: 0.0600  lr: 0.00022787  max_mem: 19293M
[10/09 23:32:17] d2.utils.events INFO:  eta: 14:41:14  iter: 479  total_loss: 4.119  loss_sem_seg: 2.82  loss_relation: 0.2588  loss_center: 0.6478  loss_offset: 0.402  time: 1.0698  data_time: 0.0660  lr: 0.00023769  max_mem: 19293M
[10/09 23:32:39] d2.utils.events INFO:  eta: 14:40:39  iter: 499  total_loss: 4.328  loss_sem_seg: 2.862  loss_relation: 0.2632  loss_center: 0.6565  loss_offset: 0.4631  time: 1.0694  data_time: 0.0578  lr: 0.00024751  max_mem: 19293M
[10/09 23:33:00] d2.utils.events INFO:  eta: 14:40:22  iter: 519  total_loss: 4.337  loss_sem_seg: 2.803  loss_relation: 0.2661  loss_center: 0.7037  loss_offset: 0.4653  time: 1.0693  data_time: 0.0601  lr: 0.00025731  max_mem: 19293M
[10/09 23:33:21] d2.utils.events INFO:  eta: 14:40:00  iter: 539  total_loss: 4.423  loss_sem_seg: 2.891  loss_relation: 0.2691  loss_center: 0.7168  loss_offset: 0.4964  time: 1.0692  data_time: 0.0580  lr: 0.00026711  max_mem: 19293M
[10/09 23:33:43] d2.utils.events INFO:  eta: 14:39:35  iter: 559  total_loss: 4.636  loss_sem_seg: 3.216  loss_relation: 0.268  loss_center: 0.708  loss_offset: 0.4946  time: 1.0690  data_time: 0.0589  lr: 0.0002769  max_mem: 19293M
[10/09 23:34:04] d2.utils.events INFO:  eta: 14:39:01  iter: 579  total_loss: 4.398  loss_sem_seg: 2.899  loss_relation: 0.249  loss_center: 0.6378  loss_offset: 0.4405  time: 1.0689  data_time: 0.0580  lr: 0.00028669  max_mem: 19293M
[10/09 23:34:25] d2.utils.events INFO:  eta: 14:38:42  iter: 599  total_loss: 4.38  loss_sem_seg: 3.003  loss_relation: 0.2696  loss_center: 0.703  loss_offset: 0.4726  time: 1.0689  data_time: 0.0674  lr: 0.00029647  max_mem: 19293M
[10/09 23:34:47] d2.utils.events INFO:  eta: 14:38:18  iter: 619  total_loss: 4.278  loss_sem_seg: 2.911  loss_relation: 0.2625  loss_center: 0.7091  loss_offset: 0.4387  time: 1.0689  data_time: 0.0633  lr: 0.00030624  max_mem: 19293M
[10/09 23:35:08] d2.utils.events INFO:  eta: 14:37:47  iter: 639  total_loss: 4.501  loss_sem_seg: 3.072  loss_relation: 0.261  loss_center: 0.7687  loss_offset: 0.4798  time: 1.0688  data_time: 0.0606  lr: 0.000316  max_mem: 19293M
[10/09 23:35:29] d2.utils.events INFO:  eta: 14:37:18  iter: 659  total_loss: 4.391  loss_sem_seg: 2.869  loss_relation: 0.2598  loss_center: 0.7243  loss_offset: 0.4667  time: 1.0688  data_time: 0.0671  lr: 0.00032576  max_mem: 19293M
[10/09 23:35:51] d2.utils.events INFO:  eta: 14:37:00  iter: 679  total_loss: 4.286  loss_sem_seg: 2.823  loss_relation: 0.2714  loss_center: 0.7079  loss_offset: 0.4342  time: 1.0688  data_time: 0.0600  lr: 0.00033551  max_mem: 19293M
[10/09 23:36:12] d2.utils.events INFO:  eta: 14:36:34  iter: 699  total_loss: 4.466  loss_sem_seg: 2.927  loss_relation: 0.2653  loss_center: 0.759  loss_offset: 0.4144  time: 1.0686  data_time: 0.0590  lr: 0.00034525  max_mem: 19293M
[10/09 23:36:33] d2.utils.events INFO:  eta: 14:36:14  iter: 719  total_loss: 4.692  loss_sem_seg: 3.21  loss_relation: 0.2646  loss_center: 0.7192  loss_offset: 0.4438  time: 1.0686  data_time: 0.0608  lr: 0.00035498  max_mem: 19293M
[10/09 23:36:55] d2.utils.events INFO:  eta: 14:35:52  iter: 739  total_loss: 4.454  loss_sem_seg: 3.143  loss_relation: 0.2694  loss_center: 0.7191  loss_offset: 0.4559  time: 1.0686  data_time: 0.0629  lr: 0.00036471  max_mem: 19293M
[10/09 23:37:16] d2.utils.events INFO:  eta: 14:35:30  iter: 759  total_loss: 4.931  loss_sem_seg: 3.291  loss_relation: 0.274  loss_center: 0.766  loss_offset: 0.454  time: 1.0686  data_time: 0.0629  lr: 0.00037443  max_mem: 19293M
[10/09 23:37:38] d2.utils.events INFO:  eta: 14:35:10  iter: 779  total_loss: 5.03  loss_sem_seg: 3.465  loss_relation: 0.2736  loss_center: 0.7379  loss_offset: 0.4988  time: 1.0686  data_time: 0.0603  lr: 0.00038414  max_mem: 19293M
[10/09 23:37:59] d2.utils.events INFO:  eta: 14:34:49  iter: 799  total_loss: 5.125  loss_sem_seg: 3.472  loss_relation: 0.2825  loss_center: 0.7752  loss_offset: 0.4866  time: 1.0686  data_time: 0.0620  lr: 0.00039385  max_mem: 19293M
[10/09 23:38:20] d2.utils.events INFO:  eta: 14:34:26  iter: 819  total_loss: 4.986  loss_sem_seg: 3.519  loss_relation: 0.2785  loss_center: 0.8026  loss_offset: 0.4585  time: 1.0684  data_time: 0.0567  lr: 0.00040355  max_mem: 19293M
[10/09 23:38:41] d2.utils.events INFO:  eta: 14:34:04  iter: 839  total_loss: 5.094  loss_sem_seg: 3.499  loss_relation: 0.2747  loss_center: 0.7693  loss_offset: 0.4635  time: 1.0683  data_time: 0.0594  lr: 0.00041324  max_mem: 19293M
[10/09 23:39:03] d2.utils.events INFO:  eta: 14:33:52  iter: 859  total_loss: 4.694  loss_sem_seg: 3.191  loss_relation: 0.2674  loss_center: 0.7725  loss_offset: 0.4991  time: 1.0684  data_time: 0.0607  lr: 0.00042292  max_mem: 19293M
[10/09 23:39:24] d2.utils.events INFO:  eta: 14:33:41  iter: 879  total_loss: 4.678  loss_sem_seg: 3.217  loss_relation: 0.2771  loss_center: 0.7129  loss_offset: 0.466  time: 1.0685  data_time: 0.0647  lr: 0.0004326  max_mem: 19293M
[10/09 23:39:46] d2.utils.events INFO:  eta: 14:33:09  iter: 899  total_loss: 4.632  loss_sem_seg: 3.172  loss_relation: 0.2822  loss_center: 0.7959  loss_offset: 0.4604  time: 1.0685  data_time: 0.0619  lr: 0.00044227  max_mem: 19293M
[10/09 23:40:07] d2.utils.events INFO:  eta: 14:32:44  iter: 919  total_loss: 4.61  loss_sem_seg: 3.201  loss_relation: 0.2671  loss_center: 0.6596  loss_offset: 0.4407  time: 1.0683  data_time: 0.0557  lr: 0.00045193  max_mem: 19293M
[10/09 23:40:28] d2.utils.events INFO:  eta: 14:32:23  iter: 939  total_loss: 4.95  loss_sem_seg: 3.448  loss_relation: 0.2798  loss_center: 0.7195  loss_offset: 0.4622  time: 1.0684  data_time: 0.0688  lr: 0.00046159  max_mem: 19293M
[10/09 23:40:50] d2.utils.events INFO:  eta: 14:31:58  iter: 959  total_loss: 5.077  loss_sem_seg: 3.451  loss_relation: 0.279  loss_center: 0.7398  loss_offset: 0.4959  time: 1.0685  data_time: 0.0649  lr: 0.00047124  max_mem: 19293M
[10/09 23:41:11] d2.utils.events INFO:  eta: 14:31:36  iter: 979  total_loss: 5.034  loss_sem_seg: 3.422  loss_relation: 0.2798  loss_center: 0.7739  loss_offset: 0.5343  time: 1.0685  data_time: 0.0683  lr: 0.00048088  max_mem: 19293M
[10/09 23:41:33] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0000999.pth
[10/09 23:41:40] d2.data.build INFO: Distribution of instances among all 133 categories:
[36m|   category    | #instances   |   category    | #instances   |   category    | #instances   |
|:-------------:|:-------------|:-------------:|:-------------|:-------------:|:-------------|
|    person     | 1980         |    bicycle    | 80           |      car      | 332          |
|  motorcycle   | 51           |   airplane    | 15           |      bus      | 38           |
|     train     | 21           |     truck     | 70           |     boat      | 53           |
| traffic light | 93           | fire hydrant  | 9            |   stop sign   | 8            |
| parking meter | 1            |     bench     | 56           |     bird      | 86           |
|      cat      | 8            |      dog      | 18           |     horse     | 42           |
|     sheep     | 47           |      cow      | 30           |   elephant    | 29           |
|     bear      | 10           |     zebra     | 47           |    giraffe    | 33           |
|   backpack    | 55           |   umbrella    | 44           |    handbag    | 130          |
|      tie      | 33           |   suitcase    | 18           |    frisbee    | 7            |
|     skis      | 44           |   snowboard   | 11           |  sports ball  | 46           |
|     kite      | 94           | baseball bat  | 24           | baseball gl.. | 32           |
|  skateboard   | 37           |   surfboard   | 55           | tennis racket | 30           |
|    bottle     | 77           |  wine glass   | 41           |      cup      | 104          |
|     fork      | 23           |     knife     | 30           |     spoon     | 23           |
|     bowl      | 51           |    banana     | 52           |     apple     | 14           |
|   sandwich    | 5            |    orange     | 13           |   broccoli    | 3            |
|    carrot     | 16           |    hot dog    | 8            |     pizza     | 14           |
|     donut     | 9            |     cake      | 15           |     chair     | 197          |
|     couch     | 17           | potted plant  | 10           |      bed      | 10           |
| dining table  | 45           |    toilet     | 6            |      tv       | 12           |
|    laptop     | 16           |     mouse     | 2            |    remote     | 23           |
|   keyboard    | 2            |  cell phone   | 25           |   microwave   | 0            |
|     oven      | 3            |    toaster    | 0            |     sink      | 7            |
| refrigerator  | 2            |     book      | 74           |     clock     | 11           |
|     vase      | 1            |   scissors    | 0            |  teddy bear   | 33           |
|  hair drier   | 0            |  toothbrush   | 8            |    banner     | 29           |
|    blanket    | 13           |    bridge     | 9            |   cardboard   | 14           |
|    counter    | 7            |    curtain    | 12           |  door-stuff   | 30           |
|  floor-wood   | 16           |    flower     | 9            |     fruit     | 6            |
|    gravel     | 10           |     house     | 33           |     light     | 41           |
| mirror-stuff  | 7            |      net      | 7            |    pillow     | 7            |
|   platform    | 16           | playingfield  | 39           |   railroad    | 17           |
|     river     | 10           |     road      | 101          |     roof      | 20           |
|     sand      | 28           |      sea      | 53           |     shelf     | 19           |
|     snow      | 27           |    stairs     | 16           |     tent      | 11           |
|     towel     | 12           |  wall-brick   | 24           |  wall-stone   | 15           |
|   wall-tile   | 12           |   wall-wood   | 34           |  water-other  | 10           |
| window-blind  | 8            | window-other  | 40           |  tree-merged  | 224          |
| fence-merged  | 91           | ceiling-mer.. | 32           | sky-other-m.. | 233          |
| cabinet-mer.. | 16           | table-merged  | 46           | floor-other.. | 42           |
| pavement-me.. | 134          | mountain-me.. | 31           | grass-merged  | 128          |
|  dirt-merged  | 57           | paper-merged  | 29           | food-other-.. | 24           |
| building-ot.. | 152          |  rock-merged  | 22           | wall-other-.. | 145          |
|  rug-merged   | 14           |               |              |               |              |
|     total     | 7001         |               |              |               |              |[0m
[10/09 23:41:40] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/09 23:41:40] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/09 23:41:40] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/09 23:41:40] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/09 23:41:54] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0001 s/iter. Inference: 0.0791 s/iter. Eval: 0.0284 s/iter. Total: 0.1077 s/iter. ETA=0:00:25
[10/09 23:41:59] d2.evaluation.evaluator INFO: Inference done 60/250. Dataloading: 0.0012 s/iter. Inference: 0.0736 s/iter. Eval: 0.0289 s/iter. Total: 0.1037 s/iter. ETA=0:00:19
[10/09 23:42:04] d2.evaluation.evaluator INFO: Inference done 111/250. Dataloading: 0.0013 s/iter. Inference: 0.0713 s/iter. Eval: 0.0284 s/iter. Total: 0.1011 s/iter. ETA=0:00:14
[10/09 23:42:10] d2.evaluation.evaluator INFO: Inference done 161/250. Dataloading: 0.0014 s/iter. Inference: 0.0712 s/iter. Eval: 0.0284 s/iter. Total: 0.1011 s/iter. ETA=0:00:09
[10/09 23:42:15] d2.evaluation.evaluator INFO: Inference done 215/250. Dataloading: 0.0014 s/iter. Inference: 0.0699 s/iter. Eval: 0.0278 s/iter. Total: 0.0992 s/iter. ETA=0:00:03
[10/09 23:42:18] d2.evaluation.evaluator INFO: Total inference time: 0:00:24.458160 (0.099829 s / iter per device, on 2 devices)
[10/09 23:42:18] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:16 (0.069098 s / iter per device, on 2 devices)
[10/09 23:42:18] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_eval0v0k__99 ...
[10/09 23:42:23] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 11.746797150821823
[10/09 23:42:23] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 10.340 | 41.543 | 14.011 |      129      |
| Things | 7.984  | 37.989 | 11.355 |      76       |
| Stuff  | 13.718 | 46.640 | 17.821 |      53       |
[10/09 23:42:23] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/09 23:42:23] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/09 23:42:23] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/09 23:42:23] d2.evaluation.testing INFO: copypaste: 10.3402,41.5430,14.0113,7.9843,37.9885,11.3548,13.7184,46.6401,17.8206
[10/09 23:42:23] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/09 23:42:23] d2.evaluation.testing INFO: copypaste: mean_recall
[10/09 23:42:23] d2.evaluation.testing INFO: copypaste: 0.1175
[10/09 23:42:23] d2.utils.events INFO:  eta: 14:31:10  iter: 999  total_loss: 5.139  loss_sem_seg: 3.64  loss_relation: 0.29  loss_center: 0.715  loss_offset: 0.5149  time: 1.0684  data_time: 0.0600  lr: 0.00049051  max_mem: 19293M
[10/09 23:42:23] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/09 23:42:30] d2.engine.hooks INFO: Saved first model at 0.11747 @ 999 steps
[10/09 23:42:51] d2.utils.events INFO:  eta: 14:30:53  iter: 1019  total_loss: 5.427  loss_sem_seg: 3.825  loss_relation: 0.2899  loss_center: 0.7819  loss_offset: 0.505  time: 1.0682  data_time: 0.0620  lr: 0.00049082  max_mem: 19293M
[10/09 23:43:13] d2.utils.events INFO:  eta: 14:30:19  iter: 1039  total_loss: 5.324  loss_sem_seg: 3.708  loss_relation: 0.2885  loss_center: 0.7362  loss_offset: 0.5498  time: 1.0681  data_time: 0.0562  lr: 0.00049064  max_mem: 19293M
[10/09 23:43:34] d2.utils.events INFO:  eta: 14:29:54  iter: 1059  total_loss: 5.694  loss_sem_seg: 3.902  loss_relation: 0.288  loss_center: 0.8552  loss_offset: 0.542  time: 1.0680  data_time: 0.0608  lr: 0.00049046  max_mem: 19293M
[10/09 23:43:55] d2.utils.events INFO:  eta: 14:29:29  iter: 1079  total_loss: 5.047  loss_sem_seg: 3.435  loss_relation: 0.2846  loss_center: 0.8193  loss_offset: 0.5159  time: 1.0680  data_time: 0.0636  lr: 0.00049028  max_mem: 19293M
[10/09 23:44:17] d2.utils.events INFO:  eta: 14:28:47  iter: 1099  total_loss: 5.72  loss_sem_seg: 4.005  loss_relation: 0.276  loss_center: 0.818  loss_offset: 0.5065  time: 1.0679  data_time: 0.0624  lr: 0.0004901  max_mem: 19293M
[10/09 23:44:38] d2.utils.events INFO:  eta: 14:28:20  iter: 1119  total_loss: 5.245  loss_sem_seg: 3.658  loss_relation: 0.2735  loss_center: 0.7609  loss_offset: 0.5262  time: 1.0680  data_time: 0.0635  lr: 0.00048992  max_mem: 19293M
[10/09 23:44:59] d2.utils.events INFO:  eta: 14:27:30  iter: 1139  total_loss: 4.834  loss_sem_seg: 3.336  loss_relation: 0.2739  loss_center: 0.7582  loss_offset: 0.488  time: 1.0678  data_time: 0.0566  lr: 0.00048974  max_mem: 19293M
[10/09 23:45:21] d2.utils.events INFO:  eta: 14:26:51  iter: 1159  total_loss: 5.02  loss_sem_seg: 3.556  loss_relation: 0.2755  loss_center: 0.7829  loss_offset: 0.4894  time: 1.0677  data_time: 0.0576  lr: 0.00048956  max_mem: 19293M
[10/09 23:45:42] d2.utils.events INFO:  eta: 14:26:22  iter: 1179  total_loss: 5.419  loss_sem_seg: 3.732  loss_relation: 0.2834  loss_center: 0.8175  loss_offset: 0.4615  time: 1.0677  data_time: 0.0637  lr: 0.00048938  max_mem: 19293M
[10/09 23:46:03] d2.utils.events INFO:  eta: 14:25:59  iter: 1199  total_loss: 5.284  loss_sem_seg: 3.814  loss_relation: 0.2709  loss_center: 0.7159  loss_offset: 0.4951  time: 1.0678  data_time: 0.0639  lr: 0.0004892  max_mem: 19293M
[10/09 23:46:25] d2.utils.events INFO:  eta: 14:25:37  iter: 1219  total_loss: 4.905  loss_sem_seg: 3.242  loss_relation: 0.2721  loss_center: 0.774  loss_offset: 0.4847  time: 1.0677  data_time: 0.0613  lr: 0.00048902  max_mem: 19293M
[10/09 23:46:46] d2.utils.events INFO:  eta: 14:25:16  iter: 1239  total_loss: 4.938  loss_sem_seg: 3.372  loss_relation: 0.272  loss_center: 0.7294  loss_offset: 0.4678  time: 1.0678  data_time: 0.0719  lr: 0.00048884  max_mem: 19293M
[10/09 23:47:07] d2.utils.events INFO:  eta: 14:24:52  iter: 1259  total_loss: 4.802  loss_sem_seg: 3.256  loss_relation: 0.2774  loss_center: 0.7185  loss_offset: 0.5095  time: 1.0676  data_time: 0.0573  lr: 0.00048865  max_mem: 19293M
[10/09 23:47:28] d2.utils.events INFO:  eta: 14:24:30  iter: 1279  total_loss: 4.98  loss_sem_seg: 3.389  loss_relation: 0.2788  loss_center: 0.7957  loss_offset: 0.4831  time: 1.0676  data_time: 0.0591  lr: 0.00048847  max_mem: 19293M
[10/09 23:47:50] d2.utils.events INFO:  eta: 14:24:09  iter: 1299  total_loss: 4.547  loss_sem_seg: 3.174  loss_relation: 0.267  loss_center: 0.7155  loss_offset: 0.4834  time: 1.0676  data_time: 0.0672  lr: 0.00048829  max_mem: 19293M
[10/09 23:48:11] d2.utils.events INFO:  eta: 14:23:41  iter: 1319  total_loss: 4.971  loss_sem_seg: 3.38  loss_relation: 0.27  loss_center: 0.7954  loss_offset: 0.4695  time: 1.0675  data_time: 0.0607  lr: 0.00048811  max_mem: 19293M
[10/09 23:48:32] d2.utils.events INFO:  eta: 14:23:19  iter: 1339  total_loss: 4.986  loss_sem_seg: 3.533  loss_relation: 0.273  loss_center: 0.7421  loss_offset: 0.5016  time: 1.0674  data_time: 0.0575  lr: 0.00048793  max_mem: 19293M
[10/09 23:48:54] d2.utils.events INFO:  eta: 14:23:03  iter: 1359  total_loss: 4.926  loss_sem_seg: 3.43  loss_relation: 0.2771  loss_center: 0.7293  loss_offset: 0.4843  time: 1.0673  data_time: 0.0562  lr: 0.00048775  max_mem: 19293M
[10/09 23:49:15] d2.utils.events INFO:  eta: 14:22:41  iter: 1379  total_loss: 4.907  loss_sem_seg: 3.402  loss_relation: 0.2834  loss_center: 0.7962  loss_offset: 0.4465  time: 1.0673  data_time: 0.0621  lr: 0.00048757  max_mem: 19293M
[10/09 23:49:36] d2.utils.events INFO:  eta: 14:22:13  iter: 1399  total_loss: 4.789  loss_sem_seg: 3.111  loss_relation: 0.274  loss_center: 0.7608  loss_offset: 0.4888  time: 1.0672  data_time: 0.0532  lr: 0.00048739  max_mem: 19293M
[10/09 23:49:57] d2.utils.events INFO:  eta: 14:21:50  iter: 1419  total_loss: 4.599  loss_sem_seg: 3.034  loss_relation: 0.2644  loss_center: 0.7589  loss_offset: 0.45  time: 1.0671  data_time: 0.0604  lr: 0.00048721  max_mem: 19293M
[10/09 23:50:19] d2.utils.events INFO:  eta: 14:21:29  iter: 1439  total_loss: 4.41  loss_sem_seg: 2.993  loss_relation: 0.2718  loss_center: 0.7534  loss_offset: 0.4712  time: 1.0670  data_time: 0.0596  lr: 0.00048703  max_mem: 19293M
[10/09 23:50:40] d2.utils.events INFO:  eta: 14:20:59  iter: 1459  total_loss: 4.48  loss_sem_seg: 3.074  loss_relation: 0.2664  loss_center: 0.7349  loss_offset: 0.475  time: 1.0670  data_time: 0.0644  lr: 0.00048685  max_mem: 19293M
[10/09 23:51:01] d2.utils.events INFO:  eta: 14:20:33  iter: 1479  total_loss: 4.718  loss_sem_seg: 3.358  loss_relation: 0.2709  loss_center: 0.7767  loss_offset: 0.4567  time: 1.0669  data_time: 0.0600  lr: 0.00048667  max_mem: 19293M
[10/09 23:51:22] d2.utils.events INFO:  eta: 14:20:21  iter: 1499  total_loss: 4.683  loss_sem_seg: 3.328  loss_relation: 0.2716  loss_center: 0.7522  loss_offset: 0.4497  time: 1.0668  data_time: 0.0607  lr: 0.00048649  max_mem: 19293M
[10/09 23:51:44] d2.utils.events INFO:  eta: 14:19:53  iter: 1519  total_loss: 4.679  loss_sem_seg: 3.061  loss_relation: 0.2734  loss_center: 0.778  loss_offset: 0.5501  time: 1.0668  data_time: 0.0635  lr: 0.00048631  max_mem: 19293M
[10/09 23:52:05] d2.utils.events INFO:  eta: 14:19:25  iter: 1539  total_loss: 5.073  loss_sem_seg: 3.389  loss_relation: 0.2707  loss_center: 0.8607  loss_offset: 0.4898  time: 1.0668  data_time: 0.0644  lr: 0.00048613  max_mem: 19293M
[10/09 23:52:26] d2.utils.events INFO:  eta: 14:18:47  iter: 1559  total_loss: 4.877  loss_sem_seg: 3.387  loss_relation: 0.2687  loss_center: 0.7659  loss_offset: 0.4502  time: 1.0667  data_time: 0.0593  lr: 0.00048595  max_mem: 19293M
[10/09 23:52:48] d2.utils.events INFO:  eta: 14:18:24  iter: 1579  total_loss: 4.879  loss_sem_seg: 3.43  loss_relation: 0.2694  loss_center: 0.7521  loss_offset: 0.465  time: 1.0667  data_time: 0.0609  lr: 0.00048577  max_mem: 19293M
[10/09 23:53:09] d2.utils.events INFO:  eta: 14:17:59  iter: 1599  total_loss: 4.398  loss_sem_seg: 2.847  loss_relation: 0.2633  loss_center: 0.7759  loss_offset: 0.4532  time: 1.0667  data_time: 0.0609  lr: 0.00048559  max_mem: 19293M
[10/09 23:53:30] d2.utils.events INFO:  eta: 14:17:39  iter: 1619  total_loss: 4.913  loss_sem_seg: 3.462  loss_relation: 0.273  loss_center: 0.7392  loss_offset: 0.5124  time: 1.0666  data_time: 0.0626  lr: 0.00048541  max_mem: 19293M
[10/09 23:53:51] d2.utils.events INFO:  eta: 14:17:17  iter: 1639  total_loss: 4.656  loss_sem_seg: 3.159  loss_relation: 0.2765  loss_center: 0.7263  loss_offset: 0.4754  time: 1.0666  data_time: 0.0606  lr: 0.00048522  max_mem: 19293M
[10/09 23:54:13] d2.utils.events INFO:  eta: 14:16:56  iter: 1659  total_loss: 4.917  loss_sem_seg: 3.371  loss_relation: 0.2761  loss_center: 0.7974  loss_offset: 0.499  time: 1.0665  data_time: 0.0601  lr: 0.00048504  max_mem: 19293M
[10/09 23:54:34] d2.utils.events INFO:  eta: 14:16:21  iter: 1679  total_loss: 4.862  loss_sem_seg: 3.342  loss_relation: 0.2724  loss_center: 0.7299  loss_offset: 0.4384  time: 1.0664  data_time: 0.0562  lr: 0.00048486  max_mem: 19293M
[10/09 23:54:55] d2.utils.events INFO:  eta: 14:16:00  iter: 1699  total_loss: 4.447  loss_sem_seg: 2.946  loss_relation: 0.269  loss_center: 0.6885  loss_offset: 0.4864  time: 1.0664  data_time: 0.0614  lr: 0.00048468  max_mem: 19293M
[10/09 23:55:16] d2.utils.events INFO:  eta: 14:15:26  iter: 1719  total_loss: 4.507  loss_sem_seg: 2.901  loss_relation: 0.2621  loss_center: 0.7719  loss_offset: 0.4668  time: 1.0663  data_time: 0.0593  lr: 0.0004845  max_mem: 19293M
[10/09 23:55:38] d2.utils.events INFO:  eta: 14:15:00  iter: 1739  total_loss: 4.62  loss_sem_seg: 3.062  loss_relation: 0.2681  loss_center: 0.767  loss_offset: 0.4654  time: 1.0663  data_time: 0.0617  lr: 0.00048432  max_mem: 19293M
[10/09 23:55:59] d2.utils.events INFO:  eta: 14:14:43  iter: 1759  total_loss: 4.724  loss_sem_seg: 3.262  loss_relation: 0.273  loss_center: 0.6943  loss_offset: 0.4932  time: 1.0663  data_time: 0.0631  lr: 0.00048414  max_mem: 19293M
[10/09 23:56:20] d2.utils.events INFO:  eta: 14:14:23  iter: 1779  total_loss: 5.06  loss_sem_seg: 3.411  loss_relation: 0.2738  loss_center: 0.7712  loss_offset: 0.4923  time: 1.0663  data_time: 0.0601  lr: 0.00048396  max_mem: 19293M
[10/09 23:56:41] d2.utils.events INFO:  eta: 14:13:56  iter: 1799  total_loss: 4.529  loss_sem_seg: 3.061  loss_relation: 0.2647  loss_center: 0.7297  loss_offset: 0.4678  time: 1.0662  data_time: 0.0606  lr: 0.00048378  max_mem: 19293M
[10/09 23:57:03] d2.utils.events INFO:  eta: 14:13:32  iter: 1819  total_loss: 4.561  loss_sem_seg: 3.089  loss_relation: 0.2698  loss_center: 0.7063  loss_offset: 0.4968  time: 1.0662  data_time: 0.0600  lr: 0.0004836  max_mem: 19293M
[10/09 23:57:24] d2.utils.events INFO:  eta: 14:13:01  iter: 1839  total_loss: 4.903  loss_sem_seg: 3.388  loss_relation: 0.2715  loss_center: 0.7653  loss_offset: 0.4369  time: 1.0661  data_time: 0.0617  lr: 0.00048342  max_mem: 19293M
[10/09 23:57:45] d2.utils.events INFO:  eta: 14:12:35  iter: 1859  total_loss: 4.669  loss_sem_seg: 3.232  loss_relation: 0.2678  loss_center: 0.7457  loss_offset: 0.4923  time: 1.0662  data_time: 0.0676  lr: 0.00048324  max_mem: 19293M
[10/09 23:58:07] d2.utils.events INFO:  eta: 14:11:55  iter: 1879  total_loss: 4.701  loss_sem_seg: 3.21  loss_relation: 0.2659  loss_center: 0.7798  loss_offset: 0.4727  time: 1.0661  data_time: 0.0591  lr: 0.00048306  max_mem: 19293M
[10/09 23:58:28] d2.utils.events INFO:  eta: 14:11:37  iter: 1899  total_loss: 4.397  loss_sem_seg: 2.932  loss_relation: 0.2622  loss_center: 0.7023  loss_offset: 0.4639  time: 1.0661  data_time: 0.0651  lr: 0.00048288  max_mem: 19293M
[10/09 23:58:49] d2.utils.events INFO:  eta: 14:11:18  iter: 1919  total_loss: 4.936  loss_sem_seg: 3.353  loss_relation: 0.2762  loss_center: 0.7838  loss_offset: 0.496  time: 1.0661  data_time: 0.0622  lr: 0.0004827  max_mem: 19293M
[10/09 23:59:11] d2.utils.events INFO:  eta: 14:10:53  iter: 1939  total_loss: 4.911  loss_sem_seg: 3.522  loss_relation: 0.2686  loss_center: 0.6967  loss_offset: 0.4698  time: 1.0661  data_time: 0.0614  lr: 0.00048251  max_mem: 19293M
[10/09 23:59:32] d2.utils.events INFO:  eta: 14:10:36  iter: 1959  total_loss: 4.819  loss_sem_seg: 3.298  loss_relation: 0.2662  loss_center: 0.6999  loss_offset: 0.4805  time: 1.0661  data_time: 0.0608  lr: 0.00048233  max_mem: 19293M
[10/09 23:59:53] d2.utils.events INFO:  eta: 14:10:12  iter: 1979  total_loss: 4.739  loss_sem_seg: 3.311  loss_relation: 0.2687  loss_center: 0.7297  loss_offset: 0.4669  time: 1.0661  data_time: 0.0638  lr: 0.00048215  max_mem: 19293M
[10/10 00:00:14] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0001999.pth
[10/10 00:00:22] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 00:00:22] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 00:00:22] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 00:00:22] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 00:00:36] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0018 s/iter. Inference: 0.0767 s/iter. Eval: 0.0280 s/iter. Total: 0.1066 s/iter. ETA=0:00:25
[10/10 00:00:41] d2.evaluation.evaluator INFO: Inference done 62/250. Dataloading: 0.0015 s/iter. Inference: 0.0697 s/iter. Eval: 0.0287 s/iter. Total: 0.1000 s/iter. ETA=0:00:18
[10/10 00:00:46] d2.evaluation.evaluator INFO: Inference done 118/250. Dataloading: 0.0015 s/iter. Inference: 0.0655 s/iter. Eval: 0.0282 s/iter. Total: 0.0953 s/iter. ETA=0:00:12
[10/10 00:00:51] d2.evaluation.evaluator INFO: Inference done 173/250. Dataloading: 0.0015 s/iter. Inference: 0.0645 s/iter. Eval: 0.0281 s/iter. Total: 0.0942 s/iter. ETA=0:00:07
[10/10 00:00:57] d2.evaluation.evaluator INFO: Inference done 230/250. Dataloading: 0.0015 s/iter. Inference: 0.0636 s/iter. Eval: 0.0277 s/iter. Total: 0.0929 s/iter. ETA=0:00:01
[10/10 00:00:59] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.051678 (0.094088 s / iter per device, on 2 devices)
[10/10 00:00:59] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063395 s / iter per device, on 2 devices)
[10/10 00:00:59] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_eval8j46pspc ...
[10/10 00:01:04] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 12.77911241846114
[10/10 00:01:04] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 10.568 | 39.949 | 14.230 |      129      |
| Things | 8.081  | 40.686 | 11.390 |      76       |
| Stuff  | 14.135 | 38.894 | 18.303 |      53       |
[10/10 00:01:04] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 00:01:04] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 00:01:04] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 00:01:04] d2.evaluation.testing INFO: copypaste: 10.5681,39.9493,14.2303,8.0810,40.6855,11.3902,14.1346,38.8937,18.3028
[10/10 00:01:04] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 00:01:04] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 00:01:04] d2.evaluation.testing INFO: copypaste: 0.1278
[10/10 00:01:04] d2.utils.events INFO:  eta: 14:09:55  iter: 1999  total_loss: 4.519  loss_sem_seg: 3.057  loss_relation: 0.268  loss_center: 0.7597  loss_offset: 0.483  time: 1.0661  data_time: 0.0589  lr: 0.00048197  max_mem: 19293M
[10/10 00:01:04] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/10 00:01:11] d2.engine.hooks INFO: Saved best model as latest eval score for relation_mean_recall/mean_recall is 0.12779, better than last best score 0.11747 @ iteration 999.
[10/10 00:01:32] d2.utils.events INFO:  eta: 14:09:30  iter: 2019  total_loss: 4.642  loss_sem_seg: 3.109  loss_relation: 0.2612  loss_center: 0.746  loss_offset: 0.4629  time: 1.0660  data_time: 0.0645  lr: 0.00048179  max_mem: 19293M
[10/10 00:01:53] d2.utils.events INFO:  eta: 14:09:13  iter: 2039  total_loss: 4.507  loss_sem_seg: 3.148  loss_relation: 0.2665  loss_center: 0.7135  loss_offset: 0.4546  time: 1.0660  data_time: 0.0643  lr: 0.00048161  max_mem: 19293M
[10/10 00:02:14] d2.utils.events INFO:  eta: 14:08:55  iter: 2059  total_loss: 4.638  loss_sem_seg: 3.077  loss_relation: 0.2677  loss_center: 0.7182  loss_offset: 0.4499  time: 1.0660  data_time: 0.0580  lr: 0.00048143  max_mem: 19293M
[10/10 00:02:36] d2.utils.events INFO:  eta: 14:08:38  iter: 2079  total_loss: 4.351  loss_sem_seg: 2.893  loss_relation: 0.2672  loss_center: 0.7425  loss_offset: 0.4511  time: 1.0660  data_time: 0.0597  lr: 0.00048125  max_mem: 19293M
[10/10 00:02:57] d2.utils.events INFO:  eta: 14:08:20  iter: 2099  total_loss: 4.323  loss_sem_seg: 2.904  loss_relation: 0.2738  loss_center: 0.7351  loss_offset: 0.4415  time: 1.0660  data_time: 0.0620  lr: 0.00048107  max_mem: 19293M
[10/10 00:03:18] d2.utils.events INFO:  eta: 14:07:47  iter: 2119  total_loss: 4.624  loss_sem_seg: 3.151  loss_relation: 0.2694  loss_center: 0.7215  loss_offset: 0.5085  time: 1.0660  data_time: 0.0603  lr: 0.00048089  max_mem: 19293M
[10/10 00:03:40] d2.utils.events INFO:  eta: 14:07:38  iter: 2139  total_loss: 5.006  loss_sem_seg: 3.395  loss_relation: 0.2789  loss_center: 0.7568  loss_offset: 0.533  time: 1.0660  data_time: 0.0609  lr: 0.00048071  max_mem: 19293M
[10/10 00:04:01] d2.utils.events INFO:  eta: 14:07:18  iter: 2159  total_loss: 5.375  loss_sem_seg: 3.653  loss_relation: 0.2885  loss_center: 0.7827  loss_offset: 0.4928  time: 1.0660  data_time: 0.0637  lr: 0.00048053  max_mem: 19293M
[10/10 00:04:22] d2.utils.events INFO:  eta: 14:06:58  iter: 2179  total_loss: 4.945  loss_sem_seg: 3.469  loss_relation: 0.2819  loss_center: 0.7441  loss_offset: 0.4971  time: 1.0660  data_time: 0.0594  lr: 0.00048035  max_mem: 19293M
[10/10 00:04:44] d2.utils.events INFO:  eta: 14:06:31  iter: 2199  total_loss: 4.952  loss_sem_seg: 3.412  loss_relation: 0.2746  loss_center: 0.7952  loss_offset: 0.5305  time: 1.0660  data_time: 0.0616  lr: 0.00048016  max_mem: 19293M
[10/10 00:05:05] d2.utils.events INFO:  eta: 14:05:55  iter: 2219  total_loss: 4.996  loss_sem_seg: 3.416  loss_relation: 0.2679  loss_center: 0.8117  loss_offset: 0.473  time: 1.0660  data_time: 0.0569  lr: 0.00047998  max_mem: 19293M
[10/10 00:05:26] d2.utils.events INFO:  eta: 14:05:30  iter: 2239  total_loss: 4.724  loss_sem_seg: 3.144  loss_relation: 0.2723  loss_center: 0.7505  loss_offset: 0.5402  time: 1.0659  data_time: 0.0627  lr: 0.0004798  max_mem: 19293M
[10/10 00:05:47] d2.utils.events INFO:  eta: 14:05:09  iter: 2259  total_loss: 4.658  loss_sem_seg: 3.183  loss_relation: 0.2638  loss_center: 0.756  loss_offset: 0.491  time: 1.0659  data_time: 0.0607  lr: 0.00047962  max_mem: 19293M
[10/10 00:06:09] d2.utils.events INFO:  eta: 14:04:47  iter: 2279  total_loss: 4.48  loss_sem_seg: 3.021  loss_relation: 0.2616  loss_center: 0.7317  loss_offset: 0.4479  time: 1.0659  data_time: 0.0637  lr: 0.00047944  max_mem: 19293M
[10/10 00:06:30] d2.utils.events INFO:  eta: 14:04:15  iter: 2299  total_loss: 4.357  loss_sem_seg: 2.917  loss_relation: 0.2617  loss_center: 0.7212  loss_offset: 0.482  time: 1.0658  data_time: 0.0548  lr: 0.00047926  max_mem: 19293M
[10/10 00:06:51] d2.utils.events INFO:  eta: 14:04:09  iter: 2319  total_loss: 4.191  loss_sem_seg: 2.854  loss_relation: 0.2658  loss_center: 0.7009  loss_offset: 0.4687  time: 1.0658  data_time: 0.0598  lr: 0.00047908  max_mem: 19293M
[10/10 00:07:13] d2.utils.events INFO:  eta: 14:03:58  iter: 2339  total_loss: 4.286  loss_sem_seg: 2.707  loss_relation: 0.2621  loss_center: 0.7123  loss_offset: 0.439  time: 1.0658  data_time: 0.0633  lr: 0.0004789  max_mem: 19293M
[10/10 00:07:34] d2.utils.events INFO:  eta: 14:03:40  iter: 2359  total_loss: 4.431  loss_sem_seg: 2.805  loss_relation: 0.2634  loss_center: 0.8687  loss_offset: 0.4237  time: 1.0658  data_time: 0.0611  lr: 0.00047872  max_mem: 19293M
[10/10 00:07:55] d2.utils.events INFO:  eta: 14:03:07  iter: 2379  total_loss: 4.328  loss_sem_seg: 2.891  loss_relation: 0.2675  loss_center: 0.6774  loss_offset: 0.4173  time: 1.0658  data_time: 0.0647  lr: 0.00047854  max_mem: 19293M
[10/10 00:08:16] d2.utils.events INFO:  eta: 14:02:37  iter: 2399  total_loss: 4.462  loss_sem_seg: 2.929  loss_relation: 0.274  loss_center: 0.7138  loss_offset: 0.4685  time: 1.0658  data_time: 0.0611  lr: 0.00047836  max_mem: 19293M
[10/10 00:08:38] d2.utils.events INFO:  eta: 14:02:19  iter: 2419  total_loss: 4.538  loss_sem_seg: 3.008  loss_relation: 0.2622  loss_center: 0.8198  loss_offset: 0.4319  time: 1.0657  data_time: 0.0580  lr: 0.00047818  max_mem: 19293M
[10/10 00:08:59] d2.utils.events INFO:  eta: 14:01:44  iter: 2439  total_loss: 4.614  loss_sem_seg: 3.135  loss_relation: 0.2673  loss_center: 0.7564  loss_offset: 0.4464  time: 1.0657  data_time: 0.0582  lr: 0.00047799  max_mem: 19293M
[10/10 00:09:20] d2.utils.events INFO:  eta: 14:01:28  iter: 2459  total_loss: 4.391  loss_sem_seg: 3.106  loss_relation: 0.2571  loss_center: 0.718  loss_offset: 0.4555  time: 1.0657  data_time: 0.0629  lr: 0.00047781  max_mem: 19293M
[10/10 00:09:41] d2.utils.events INFO:  eta: 14:01:09  iter: 2479  total_loss: 4.302  loss_sem_seg: 2.913  loss_relation: 0.2542  loss_center: 0.7165  loss_offset: 0.423  time: 1.0657  data_time: 0.0645  lr: 0.00047763  max_mem: 19293M
[10/10 00:10:03] d2.utils.events INFO:  eta: 14:00:37  iter: 2499  total_loss: 4.335  loss_sem_seg: 2.916  loss_relation: 0.2685  loss_center: 0.7158  loss_offset: 0.4822  time: 1.0656  data_time: 0.0568  lr: 0.00047745  max_mem: 19293M
[10/10 00:10:24] d2.utils.events INFO:  eta: 14:00:21  iter: 2519  total_loss: 4.59  loss_sem_seg: 3.031  loss_relation: 0.2754  loss_center: 0.7796  loss_offset: 0.4782  time: 1.0656  data_time: 0.0609  lr: 0.00047727  max_mem: 19293M
[10/10 00:10:45] d2.utils.events INFO:  eta: 14:00:00  iter: 2539  total_loss: 4.529  loss_sem_seg: 3.1  loss_relation: 0.2634  loss_center: 0.8011  loss_offset: 0.4759  time: 1.0656  data_time: 0.0627  lr: 0.00047709  max_mem: 19293M
[10/10 00:11:06] d2.utils.events INFO:  eta: 13:59:44  iter: 2559  total_loss: 4.345  loss_sem_seg: 2.951  loss_relation: 0.2614  loss_center: 0.7  loss_offset: 0.4217  time: 1.0656  data_time: 0.0603  lr: 0.00047691  max_mem: 19293M
[10/10 00:11:28] d2.utils.events INFO:  eta: 13:59:23  iter: 2579  total_loss: 4.396  loss_sem_seg: 2.946  loss_relation: 0.2645  loss_center: 0.7797  loss_offset: 0.4497  time: 1.0655  data_time: 0.0598  lr: 0.00047673  max_mem: 19293M
[10/10 00:11:49] d2.utils.events INFO:  eta: 13:58:59  iter: 2599  total_loss: 4.354  loss_sem_seg: 2.812  loss_relation: 0.2745  loss_center: 0.7692  loss_offset: 0.4532  time: 1.0655  data_time: 0.0631  lr: 0.00047655  max_mem: 19293M
[10/10 00:12:10] d2.utils.events INFO:  eta: 13:58:35  iter: 2619  total_loss: 4.397  loss_sem_seg: 2.932  loss_relation: 0.2578  loss_center: 0.6999  loss_offset: 0.4676  time: 1.0655  data_time: 0.0613  lr: 0.00047637  max_mem: 19293M
[10/10 00:12:31] d2.utils.events INFO:  eta: 13:58:14  iter: 2639  total_loss: 4.275  loss_sem_seg: 2.767  loss_relation: 0.259  loss_center: 0.7305  loss_offset: 0.4809  time: 1.0655  data_time: 0.0594  lr: 0.00047619  max_mem: 19293M
[10/10 00:12:53] d2.utils.events INFO:  eta: 13:57:45  iter: 2659  total_loss: 4.286  loss_sem_seg: 2.914  loss_relation: 0.2557  loss_center: 0.6848  loss_offset: 0.4639  time: 1.0654  data_time: 0.0588  lr: 0.000476  max_mem: 19293M
[10/10 00:13:14] d2.utils.events INFO:  eta: 13:57:27  iter: 2679  total_loss: 4.334  loss_sem_seg: 2.841  loss_relation: 0.267  loss_center: 0.7713  loss_offset: 0.4767  time: 1.0654  data_time: 0.0601  lr: 0.00047582  max_mem: 19293M
[10/10 00:13:35] d2.utils.events INFO:  eta: 13:57:04  iter: 2699  total_loss: 4.376  loss_sem_seg: 2.836  loss_relation: 0.2622  loss_center: 0.7957  loss_offset: 0.4526  time: 1.0654  data_time: 0.0611  lr: 0.00047564  max_mem: 19293M
[10/10 00:13:56] d2.utils.events INFO:  eta: 13:56:41  iter: 2719  total_loss: 4.295  loss_sem_seg: 2.781  loss_relation: 0.2614  loss_center: 0.7281  loss_offset: 0.4227  time: 1.0653  data_time: 0.0572  lr: 0.00047546  max_mem: 19293M
[10/10 00:14:18] d2.utils.events INFO:  eta: 13:56:28  iter: 2739  total_loss: 4.043  loss_sem_seg: 2.703  loss_relation: 0.2559  loss_center: 0.7466  loss_offset: 0.3961  time: 1.0654  data_time: 0.0617  lr: 0.00047528  max_mem: 19293M
[10/10 00:14:39] d2.utils.events INFO:  eta: 13:55:58  iter: 2759  total_loss: 4.626  loss_sem_seg: 3.119  loss_relation: 0.2709  loss_center: 0.7515  loss_offset: 0.4571  time: 1.0653  data_time: 0.0589  lr: 0.0004751  max_mem: 19293M
[10/10 00:15:00] d2.utils.events INFO:  eta: 13:55:29  iter: 2779  total_loss: 4.556  loss_sem_seg: 3.118  loss_relation: 0.2701  loss_center: 0.7025  loss_offset: 0.4905  time: 1.0653  data_time: 0.0609  lr: 0.00047492  max_mem: 19293M
[10/10 00:15:22] d2.utils.events INFO:  eta: 13:55:13  iter: 2799  total_loss: 4.71  loss_sem_seg: 3.17  loss_relation: 0.2613  loss_center: 0.727  loss_offset: 0.4826  time: 1.0653  data_time: 0.0588  lr: 0.00047474  max_mem: 19293M
[10/10 00:15:43] d2.utils.events INFO:  eta: 13:54:55  iter: 2819  total_loss: 4.593  loss_sem_seg: 3.073  loss_relation: 0.2611  loss_center: 0.7348  loss_offset: 0.4827  time: 1.0653  data_time: 0.0683  lr: 0.00047456  max_mem: 19293M
[10/10 00:16:04] d2.utils.events INFO:  eta: 13:54:42  iter: 2839  total_loss: 4.458  loss_sem_seg: 2.943  loss_relation: 0.2677  loss_center: 0.8011  loss_offset: 0.4646  time: 1.0654  data_time: 0.0639  lr: 0.00047437  max_mem: 19293M
[10/10 00:16:26] d2.utils.events INFO:  eta: 13:54:08  iter: 2859  total_loss: 4.265  loss_sem_seg: 2.767  loss_relation: 0.2623  loss_center: 0.6825  loss_offset: 0.4565  time: 1.0653  data_time: 0.0620  lr: 0.00047419  max_mem: 19293M
[10/10 00:16:47] d2.utils.events INFO:  eta: 13:53:47  iter: 2879  total_loss: 4.232  loss_sem_seg: 2.673  loss_relation: 0.261  loss_center: 0.6704  loss_offset: 0.4572  time: 1.0653  data_time: 0.0550  lr: 0.00047401  max_mem: 19293M
[10/10 00:17:08] d2.utils.events INFO:  eta: 13:53:21  iter: 2899  total_loss: 4.446  loss_sem_seg: 2.854  loss_relation: 0.2586  loss_center: 0.736  loss_offset: 0.4614  time: 1.0653  data_time: 0.0595  lr: 0.00047383  max_mem: 19293M
[10/10 00:17:29] d2.utils.events INFO:  eta: 13:53:00  iter: 2919  total_loss: 4.378  loss_sem_seg: 2.786  loss_relation: 0.2704  loss_center: 0.7739  loss_offset: 0.4731  time: 1.0652  data_time: 0.0604  lr: 0.00047365  max_mem: 19293M
[10/10 00:17:50] d2.utils.events INFO:  eta: 13:52:37  iter: 2939  total_loss: 4.342  loss_sem_seg: 2.777  loss_relation: 0.2637  loss_center: 0.772  loss_offset: 0.4937  time: 1.0652  data_time: 0.0574  lr: 0.00047347  max_mem: 19293M
[10/10 00:18:12] d2.utils.events INFO:  eta: 13:52:17  iter: 2959  total_loss: 3.997  loss_sem_seg: 2.487  loss_relation: 0.2609  loss_center: 0.7359  loss_offset: 0.4627  time: 1.0652  data_time: 0.0650  lr: 0.00047329  max_mem: 19293M
[10/10 00:18:33] d2.utils.events INFO:  eta: 13:51:54  iter: 2979  total_loss: 4.36  loss_sem_seg: 2.918  loss_relation: 0.2607  loss_center: 0.7244  loss_offset: 0.4181  time: 1.0652  data_time: 0.0606  lr: 0.00047311  max_mem: 19293M
[10/10 00:18:54] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0002999.pth
[10/10 00:19:02] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 00:19:02] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 00:19:02] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 00:19:02] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 00:19:16] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0001 s/iter. Inference: 0.0753 s/iter. Eval: 0.0281 s/iter. Total: 0.1035 s/iter. ETA=0:00:24
[10/10 00:19:21] d2.evaluation.evaluator INFO: Inference done 61/250. Dataloading: 0.0012 s/iter. Inference: 0.0708 s/iter. Eval: 0.0289 s/iter. Total: 0.1010 s/iter. ETA=0:00:19
[10/10 00:19:26] d2.evaluation.evaluator INFO: Inference done 116/250. Dataloading: 0.0014 s/iter. Inference: 0.0661 s/iter. Eval: 0.0284 s/iter. Total: 0.0960 s/iter. ETA=0:00:12
[10/10 00:19:31] d2.evaluation.evaluator INFO: Inference done 171/250. Dataloading: 0.0014 s/iter. Inference: 0.0652 s/iter. Eval: 0.0282 s/iter. Total: 0.0948 s/iter. ETA=0:00:07
[10/10 00:19:36] d2.evaluation.evaluator INFO: Inference done 227/250. Dataloading: 0.0014 s/iter. Inference: 0.0643 s/iter. Eval: 0.0278 s/iter. Total: 0.0936 s/iter. ETA=0:00:02
[10/10 00:19:38] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.094169 (0.094262 s / iter per device, on 2 devices)
[10/10 00:19:38] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063877 s / iter per device, on 2 devices)
[10/10 00:19:38] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalrew038uo ...
[10/10 00:19:43] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 12.577863376632992
[10/10 00:19:43] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.298 | 43.256 | 15.147 |      129      |
| Things | 8.357  | 39.157 | 11.601 |      76       |
| Stuff  | 15.515 | 49.133 | 20.232 |      53       |
[10/10 00:19:43] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 00:19:43] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 00:19:43] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 00:19:43] d2.evaluation.testing INFO: copypaste: 11.2980,43.2555,15.1471,8.3568,39.1569,11.6010,15.5154,49.1327,20.2321
[10/10 00:19:43] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 00:19:43] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 00:19:43] d2.evaluation.testing INFO: copypaste: 0.1258
[10/10 00:19:43] d2.utils.events INFO:  eta: 13:51:29  iter: 2999  total_loss: 4.163  loss_sem_seg: 2.733  loss_relation: 0.2617  loss_center: 0.7736  loss_offset: 0.4546  time: 1.0652  data_time: 0.0549  lr: 0.00047293  max_mem: 19293M
[10/10 00:19:43] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.12578, not better than best score 0.12779 @ iteration 1999.
[10/10 00:20:05] d2.utils.events INFO:  eta: 13:51:12  iter: 3019  total_loss: 4.488  loss_sem_seg: 2.885  loss_relation: 0.2611  loss_center: 0.716  loss_offset: 0.4862  time: 1.0652  data_time: 0.0672  lr: 0.00047275  max_mem: 19293M
[10/10 00:20:26] d2.utils.events INFO:  eta: 13:50:49  iter: 3039  total_loss: 4.369  loss_sem_seg: 2.965  loss_relation: 0.2535  loss_center: 0.7619  loss_offset: 0.4279  time: 1.0652  data_time: 0.0590  lr: 0.00047256  max_mem: 19293M
[10/10 00:20:47] d2.utils.events INFO:  eta: 13:50:27  iter: 3059  total_loss: 4.319  loss_sem_seg: 2.822  loss_relation: 0.2633  loss_center: 0.7366  loss_offset: 0.4351  time: 1.0651  data_time: 0.0600  lr: 0.00047238  max_mem: 19293M
[10/10 00:21:09] d2.utils.events INFO:  eta: 13:50:06  iter: 3079  total_loss: 4.345  loss_sem_seg: 2.943  loss_relation: 0.255  loss_center: 0.7138  loss_offset: 0.484  time: 1.0651  data_time: 0.0593  lr: 0.0004722  max_mem: 19293M
[10/10 00:21:30] d2.utils.events INFO:  eta: 13:49:44  iter: 3099  total_loss: 4.691  loss_sem_seg: 3.273  loss_relation: 0.2543  loss_center: 0.7254  loss_offset: 0.4273  time: 1.0651  data_time: 0.0610  lr: 0.00047202  max_mem: 19293M
[10/10 00:21:51] d2.utils.events INFO:  eta: 13:49:22  iter: 3119  total_loss: 4.153  loss_sem_seg: 2.697  loss_relation: 0.2511  loss_center: 0.7546  loss_offset: 0.4584  time: 1.0651  data_time: 0.0609  lr: 0.00047184  max_mem: 19293M
[10/10 00:22:12] d2.utils.events INFO:  eta: 13:48:57  iter: 3139  total_loss: 3.89  loss_sem_seg: 2.45  loss_relation: 0.2546  loss_center: 0.7687  loss_offset: 0.4297  time: 1.0651  data_time: 0.0613  lr: 0.00047166  max_mem: 19293M
[10/10 00:22:34] d2.utils.events INFO:  eta: 13:48:40  iter: 3159  total_loss: 3.819  loss_sem_seg: 2.582  loss_relation: 0.2527  loss_center: 0.6639  loss_offset: 0.4282  time: 1.0651  data_time: 0.0648  lr: 0.00047148  max_mem: 19293M
[10/10 00:22:55] d2.utils.events INFO:  eta: 13:48:19  iter: 3179  total_loss: 4.037  loss_sem_seg: 2.504  loss_relation: 0.2555  loss_center: 0.6926  loss_offset: 0.5099  time: 1.0651  data_time: 0.0637  lr: 0.0004713  max_mem: 19293M
[10/10 00:23:16] d2.utils.events INFO:  eta: 13:47:53  iter: 3199  total_loss: 4.303  loss_sem_seg: 2.826  loss_relation: 0.2597  loss_center: 0.7802  loss_offset: 0.4459  time: 1.0651  data_time: 0.0577  lr: 0.00047111  max_mem: 19293M
[10/10 00:23:38] d2.utils.events INFO:  eta: 13:47:32  iter: 3219  total_loss: 3.97  loss_sem_seg: 2.493  loss_relation: 0.2449  loss_center: 0.8002  loss_offset: 0.4113  time: 1.0651  data_time: 0.0600  lr: 0.00047093  max_mem: 19293M
[10/10 00:23:59] d2.utils.events INFO:  eta: 13:47:09  iter: 3239  total_loss: 4.266  loss_sem_seg: 2.84  loss_relation: 0.2596  loss_center: 0.7849  loss_offset: 0.4655  time: 1.0651  data_time: 0.0613  lr: 0.00047075  max_mem: 19293M
[10/10 00:24:20] d2.utils.events INFO:  eta: 13:46:38  iter: 3259  total_loss: 4.183  loss_sem_seg: 2.694  loss_relation: 0.2585  loss_center: 0.6688  loss_offset: 0.4375  time: 1.0650  data_time: 0.0552  lr: 0.00047057  max_mem: 19293M
[10/10 00:24:41] d2.utils.events INFO:  eta: 13:46:20  iter: 3279  total_loss: 4.822  loss_sem_seg: 3.247  loss_relation: 0.2734  loss_center: 0.8186  loss_offset: 0.4799  time: 1.0650  data_time: 0.0630  lr: 0.00047039  max_mem: 19293M
[10/10 00:25:03] d2.utils.events INFO:  eta: 13:46:09  iter: 3299  total_loss: 4.406  loss_sem_seg: 2.962  loss_relation: 0.2647  loss_center: 0.7614  loss_offset: 0.4372  time: 1.0651  data_time: 0.0625  lr: 0.00047021  max_mem: 19293M
[10/10 00:25:24] d2.utils.events INFO:  eta: 13:45:27  iter: 3319  total_loss: 4.31  loss_sem_seg: 2.923  loss_relation: 0.2738  loss_center: 0.7051  loss_offset: 0.4382  time: 1.0650  data_time: 0.0597  lr: 0.00047003  max_mem: 19293M
[10/10 00:25:45] d2.utils.events INFO:  eta: 13:45:04  iter: 3339  total_loss: 4.209  loss_sem_seg: 2.665  loss_relation: 0.2626  loss_center: 0.7748  loss_offset: 0.4712  time: 1.0650  data_time: 0.0600  lr: 0.00046985  max_mem: 19293M
[10/10 00:26:07] d2.utils.events INFO:  eta: 13:44:45  iter: 3359  total_loss: 4.083  loss_sem_seg: 2.645  loss_relation: 0.2558  loss_center: 0.7705  loss_offset: 0.4523  time: 1.0650  data_time: 0.0661  lr: 0.00046966  max_mem: 19293M
[10/10 00:26:28] d2.utils.events INFO:  eta: 13:44:19  iter: 3379  total_loss: 4.542  loss_sem_seg: 3.163  loss_relation: 0.2541  loss_center: 0.6644  loss_offset: 0.4308  time: 1.0650  data_time: 0.0599  lr: 0.00046948  max_mem: 19293M
[10/10 00:26:49] d2.utils.events INFO:  eta: 13:44:02  iter: 3399  total_loss: 4.145  loss_sem_seg: 2.727  loss_relation: 0.2522  loss_center: 0.7242  loss_offset: 0.5002  time: 1.0650  data_time: 0.0618  lr: 0.0004693  max_mem: 19293M
[10/10 00:27:10] d2.utils.events INFO:  eta: 13:43:38  iter: 3419  total_loss: 4.315  loss_sem_seg: 2.926  loss_relation: 0.2567  loss_center: 0.7761  loss_offset: 0.4414  time: 1.0650  data_time: 0.0594  lr: 0.00046912  max_mem: 19293M
[10/10 00:27:32] d2.utils.events INFO:  eta: 13:43:17  iter: 3439  total_loss: 3.957  loss_sem_seg: 2.501  loss_relation: 0.2496  loss_center: 0.7293  loss_offset: 0.4656  time: 1.0649  data_time: 0.0533  lr: 0.00046894  max_mem: 19293M
[10/10 00:27:53] d2.utils.events INFO:  eta: 13:42:58  iter: 3459  total_loss: 4.334  loss_sem_seg: 2.885  loss_relation: 0.2578  loss_center: 0.7583  loss_offset: 0.4538  time: 1.0649  data_time: 0.0639  lr: 0.00046876  max_mem: 19293M
[10/10 00:28:14] d2.utils.events INFO:  eta: 13:42:37  iter: 3479  total_loss: 4.12  loss_sem_seg: 2.658  loss_relation: 0.2544  loss_center: 0.723  loss_offset: 0.4582  time: 1.0649  data_time: 0.0640  lr: 0.00046858  max_mem: 19293M
[10/10 00:28:35] d2.utils.events INFO:  eta: 13:42:16  iter: 3499  total_loss: 4.063  loss_sem_seg: 2.664  loss_relation: 0.2493  loss_center: 0.699  loss_offset: 0.4407  time: 1.0649  data_time: 0.0563  lr: 0.0004684  max_mem: 19293M
[10/10 00:28:57] d2.utils.events INFO:  eta: 13:41:58  iter: 3519  total_loss: 4.355  loss_sem_seg: 2.945  loss_relation: 0.2671  loss_center: 0.7818  loss_offset: 0.4481  time: 1.0649  data_time: 0.0640  lr: 0.00046821  max_mem: 19293M
[10/10 00:29:18] d2.utils.events INFO:  eta: 13:41:31  iter: 3539  total_loss: 4.349  loss_sem_seg: 2.948  loss_relation: 0.2629  loss_center: 0.7099  loss_offset: 0.435  time: 1.0648  data_time: 0.0558  lr: 0.00046803  max_mem: 19293M
[10/10 00:29:39] d2.utils.events INFO:  eta: 13:41:08  iter: 3559  total_loss: 4.475  loss_sem_seg: 3.018  loss_relation: 0.2576  loss_center: 0.7155  loss_offset: 0.4789  time: 1.0648  data_time: 0.0593  lr: 0.00046785  max_mem: 19293M
[10/10 00:30:00] d2.utils.events INFO:  eta: 13:40:43  iter: 3579  total_loss: 4.579  loss_sem_seg: 3.066  loss_relation: 0.2601  loss_center: 0.7319  loss_offset: 0.4436  time: 1.0648  data_time: 0.0559  lr: 0.00046767  max_mem: 19293M
[10/10 00:30:21] d2.utils.events INFO:  eta: 13:40:24  iter: 3599  total_loss: 4.499  loss_sem_seg: 2.985  loss_relation: 0.2633  loss_center: 0.7424  loss_offset: 0.4555  time: 1.0648  data_time: 0.0630  lr: 0.00046749  max_mem: 19293M
[10/10 00:30:43] d2.utils.events INFO:  eta: 13:39:58  iter: 3619  total_loss: 4.424  loss_sem_seg: 2.981  loss_relation: 0.266  loss_center: 0.6899  loss_offset: 0.4474  time: 1.0647  data_time: 0.0574  lr: 0.00046731  max_mem: 19293M
[10/10 00:31:04] d2.utils.events INFO:  eta: 13:39:41  iter: 3639  total_loss: 4.67  loss_sem_seg: 3.16  loss_relation: 0.2659  loss_center: 0.7353  loss_offset: 0.4822  time: 1.0647  data_time: 0.0598  lr: 0.00046713  max_mem: 19293M
[10/10 00:31:25] d2.utils.events INFO:  eta: 13:39:25  iter: 3659  total_loss: 4.121  loss_sem_seg: 2.607  loss_relation: 0.2538  loss_center: 0.7387  loss_offset: 0.4667  time: 1.0647  data_time: 0.0566  lr: 0.00046695  max_mem: 19293M
[10/10 00:31:46] d2.utils.events INFO:  eta: 13:39:03  iter: 3679  total_loss: 4.222  loss_sem_seg: 2.722  loss_relation: 0.2575  loss_center: 0.747  loss_offset: 0.4558  time: 1.0647  data_time: 0.0594  lr: 0.00046676  max_mem: 19293M
[10/10 00:32:08] d2.utils.events INFO:  eta: 13:38:41  iter: 3699  total_loss: 4.203  loss_sem_seg: 2.819  loss_relation: 0.2608  loss_center: 0.731  loss_offset: 0.4441  time: 1.0647  data_time: 0.0628  lr: 0.00046658  max_mem: 19293M
[10/10 00:32:29] d2.utils.events INFO:  eta: 13:38:23  iter: 3719  total_loss: 4.399  loss_sem_seg: 2.877  loss_relation: 0.2607  loss_center: 0.7247  loss_offset: 0.4936  time: 1.0647  data_time: 0.0577  lr: 0.0004664  max_mem: 19293M
[10/10 00:32:50] d2.utils.events INFO:  eta: 13:37:56  iter: 3739  total_loss: 4.055  loss_sem_seg: 2.626  loss_relation: 0.2458  loss_center: 0.6972  loss_offset: 0.483  time: 1.0646  data_time: 0.0625  lr: 0.00046622  max_mem: 19293M
[10/10 00:33:11] d2.utils.events INFO:  eta: 13:37:40  iter: 3759  total_loss: 4.121  loss_sem_seg: 2.539  loss_relation: 0.2634  loss_center: 0.7337  loss_offset: 0.4373  time: 1.0647  data_time: 0.0652  lr: 0.00046604  max_mem: 19293M
[10/10 00:33:33] d2.utils.events INFO:  eta: 13:37:19  iter: 3779  total_loss: 3.891  loss_sem_seg: 2.449  loss_relation: 0.2461  loss_center: 0.7061  loss_offset: 0.4347  time: 1.0647  data_time: 0.0640  lr: 0.00046586  max_mem: 19293M
[10/10 00:33:54] d2.utils.events INFO:  eta: 13:36:54  iter: 3799  total_loss: 4.082  loss_sem_seg: 2.526  loss_relation: 0.2428  loss_center: 0.7303  loss_offset: 0.4339  time: 1.0646  data_time: 0.0599  lr: 0.00046568  max_mem: 19293M
[10/10 00:34:15] d2.utils.events INFO:  eta: 13:36:28  iter: 3819  total_loss: 4.102  loss_sem_seg: 2.813  loss_relation: 0.2622  loss_center: 0.7465  loss_offset: 0.4481  time: 1.0646  data_time: 0.0568  lr: 0.00046549  max_mem: 19293M
[10/10 00:34:36] d2.utils.events INFO:  eta: 13:36:04  iter: 3839  total_loss: 4.618  loss_sem_seg: 3.197  loss_relation: 0.2523  loss_center: 0.7397  loss_offset: 0.4491  time: 1.0646  data_time: 0.0623  lr: 0.00046531  max_mem: 19293M
[10/10 00:34:58] d2.utils.events INFO:  eta: 13:35:44  iter: 3859  total_loss: 4.285  loss_sem_seg: 2.853  loss_relation: 0.2571  loss_center: 0.7702  loss_offset: 0.4154  time: 1.0645  data_time: 0.0615  lr: 0.00046513  max_mem: 19293M
[10/10 00:35:19] d2.utils.events INFO:  eta: 13:35:28  iter: 3879  total_loss: 4.398  loss_sem_seg: 2.754  loss_relation: 0.2565  loss_center: 0.8093  loss_offset: 0.4444  time: 1.0646  data_time: 0.0661  lr: 0.00046495  max_mem: 19293M
[10/10 00:35:40] d2.utils.events INFO:  eta: 13:35:09  iter: 3899  total_loss: 4.317  loss_sem_seg: 2.778  loss_relation: 0.2558  loss_center: 0.8469  loss_offset: 0.4577  time: 1.0646  data_time: 0.0618  lr: 0.00046477  max_mem: 19293M
[10/10 00:36:02] d2.utils.events INFO:  eta: 13:34:50  iter: 3919  total_loss: 4.292  loss_sem_seg: 2.749  loss_relation: 0.2564  loss_center: 0.7006  loss_offset: 0.4197  time: 1.0646  data_time: 0.0618  lr: 0.00046459  max_mem: 19293M
[10/10 00:36:23] d2.utils.events INFO:  eta: 13:34:29  iter: 3939  total_loss: 4.53  loss_sem_seg: 2.974  loss_relation: 0.2648  loss_center: 0.7283  loss_offset: 0.4774  time: 1.0646  data_time: 0.0627  lr: 0.00046441  max_mem: 19293M
[10/10 00:36:44] d2.utils.events INFO:  eta: 13:34:02  iter: 3959  total_loss: 4.349  loss_sem_seg: 2.706  loss_relation: 0.2467  loss_center: 0.7844  loss_offset: 0.4323  time: 1.0646  data_time: 0.0598  lr: 0.00046422  max_mem: 19293M
[10/10 00:37:05] d2.utils.events INFO:  eta: 13:33:41  iter: 3979  total_loss: 3.957  loss_sem_seg: 2.521  loss_relation: 0.2475  loss_center: 0.6938  loss_offset: 0.4346  time: 1.0645  data_time: 0.0566  lr: 0.00046404  max_mem: 19293M
[10/10 00:37:26] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0003999.pth
[10/10 00:37:28] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 00:37:28] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 00:37:28] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 00:37:28] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 00:37:43] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0007 s/iter. Inference: 0.0717 s/iter. Eval: 0.0286 s/iter. Total: 0.1010 s/iter. ETA=0:00:24
[10/10 00:37:48] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0011 s/iter. Inference: 0.0671 s/iter. Eval: 0.0286 s/iter. Total: 0.0970 s/iter. ETA=0:00:18
[10/10 00:37:53] d2.evaluation.evaluator INFO: Inference done 119/250. Dataloading: 0.0013 s/iter. Inference: 0.0639 s/iter. Eval: 0.0281 s/iter. Total: 0.0933 s/iter. ETA=0:00:12
[10/10 00:37:58] d2.evaluation.evaluator INFO: Inference done 172/250. Dataloading: 0.0014 s/iter. Inference: 0.0642 s/iter. Eval: 0.0283 s/iter. Total: 0.0939 s/iter. ETA=0:00:07
[10/10 00:38:03] d2.evaluation.evaluator INFO: Inference done 228/250. Dataloading: 0.0014 s/iter. Inference: 0.0635 s/iter. Eval: 0.0279 s/iter. Total: 0.0929 s/iter. ETA=0:00:02
[10/10 00:38:05] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.150702 (0.094493 s / iter per device, on 2 devices)
[10/10 00:38:05] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063653 s / iter per device, on 2 devices)
[10/10 00:38:05] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_eval4u9f2d9d ...
[10/10 00:38:11] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 14.070790213297252
[10/10 00:38:11] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.351 | 40.532 | 15.576 |      129      |
| Things | 8.907  | 37.181 | 12.577 |      76       |
| Stuff  | 14.855 | 45.337 | 19.877 |      53       |
[10/10 00:38:11] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 00:38:11] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 00:38:11] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 00:38:11] d2.evaluation.testing INFO: copypaste: 11.3509,40.5317,15.5765,8.9072,37.1805,12.5772,14.8550,45.3371,19.8773
[10/10 00:38:11] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 00:38:11] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 00:38:11] d2.evaluation.testing INFO: copypaste: 0.1407
[10/10 00:38:11] d2.utils.events INFO:  eta: 13:33:20  iter: 3999  total_loss: 4.024  loss_sem_seg: 2.609  loss_relation: 0.2568  loss_center: 0.7828  loss_offset: 0.4258  time: 1.0645  data_time: 0.0615  lr: 0.00046386  max_mem: 19293M
[10/10 00:38:11] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/10 00:38:17] d2.engine.hooks INFO: Saved best model as latest eval score for relation_mean_recall/mean_recall is 0.14071, better than last best score 0.12779 @ iteration 1999.
[10/10 00:38:38] d2.utils.events INFO:  eta: 13:32:51  iter: 4019  total_loss: 4.199  loss_sem_seg: 2.738  loss_relation: 0.2448  loss_center: 0.7221  loss_offset: 0.494  time: 1.0645  data_time: 0.0590  lr: 0.00046368  max_mem: 19293M
[10/10 00:39:00] d2.utils.events INFO:  eta: 13:32:19  iter: 4039  total_loss: 4.095  loss_sem_seg: 2.616  loss_relation: 0.2516  loss_center: 0.7248  loss_offset: 0.4324  time: 1.0645  data_time: 0.0574  lr: 0.0004635  max_mem: 19293M
[10/10 00:39:21] d2.utils.events INFO:  eta: 13:31:52  iter: 4059  total_loss: 3.782  loss_sem_seg: 2.283  loss_relation: 0.2499  loss_center: 0.6798  loss_offset: 0.4609  time: 1.0645  data_time: 0.0600  lr: 0.00046332  max_mem: 19293M
[10/10 00:39:42] d2.utils.events INFO:  eta: 13:31:30  iter: 4079  total_loss: 4.173  loss_sem_seg: 2.785  loss_relation: 0.252  loss_center: 0.7501  loss_offset: 0.4233  time: 1.0645  data_time: 0.0615  lr: 0.00046313  max_mem: 19293M
[10/10 00:40:04] d2.utils.events INFO:  eta: 13:31:09  iter: 4099  total_loss: 4.038  loss_sem_seg: 2.578  loss_relation: 0.2567  loss_center: 0.7008  loss_offset: 0.4524  time: 1.0645  data_time: 0.0623  lr: 0.00046295  max_mem: 19293M
[10/10 00:40:25] d2.utils.events INFO:  eta: 13:30:52  iter: 4119  total_loss: 4.3  loss_sem_seg: 2.736  loss_relation: 0.2405  loss_center: 0.7681  loss_offset: 0.4715  time: 1.0645  data_time: 0.0571  lr: 0.00046277  max_mem: 19293M
[10/10 00:40:46] d2.utils.events INFO:  eta: 13:30:27  iter: 4139  total_loss: 4.136  loss_sem_seg: 2.767  loss_relation: 0.2584  loss_center: 0.6734  loss_offset: 0.4542  time: 1.0645  data_time: 0.0575  lr: 0.00046259  max_mem: 19293M
[10/10 00:41:07] d2.utils.events INFO:  eta: 13:29:58  iter: 4159  total_loss: 4.132  loss_sem_seg: 2.776  loss_relation: 0.2587  loss_center: 0.7458  loss_offset: 0.4584  time: 1.0644  data_time: 0.0588  lr: 0.00046241  max_mem: 19293M
[10/10 00:41:29] d2.utils.events INFO:  eta: 13:29:37  iter: 4179  total_loss: 3.898  loss_sem_seg: 2.543  loss_relation: 0.2513  loss_center: 0.7168  loss_offset: 0.4354  time: 1.0645  data_time: 0.0631  lr: 0.00046223  max_mem: 19293M
[10/10 00:41:50] d2.utils.events INFO:  eta: 13:29:15  iter: 4199  total_loss: 4.225  loss_sem_seg: 2.832  loss_relation: 0.2572  loss_center: 0.7139  loss_offset: 0.4651  time: 1.0644  data_time: 0.0575  lr: 0.00046205  max_mem: 19293M
[10/10 00:42:11] d2.utils.events INFO:  eta: 13:28:55  iter: 4219  total_loss: 4.194  loss_sem_seg: 2.826  loss_relation: 0.2528  loss_center: 0.6759  loss_offset: 0.4413  time: 1.0644  data_time: 0.0618  lr: 0.00046186  max_mem: 19293M
[10/10 00:42:33] d2.utils.events INFO:  eta: 13:28:49  iter: 4239  total_loss: 4.071  loss_sem_seg: 2.627  loss_relation: 0.2407  loss_center: 0.736  loss_offset: 0.4353  time: 1.0645  data_time: 0.0654  lr: 0.00046168  max_mem: 19293M
[10/10 00:42:54] d2.utils.events INFO:  eta: 13:28:36  iter: 4259  total_loss: 3.931  loss_sem_seg: 2.519  loss_relation: 0.2439  loss_center: 0.6974  loss_offset: 0.4459  time: 1.0644  data_time: 0.0568  lr: 0.0004615  max_mem: 19293M
[10/10 00:43:15] d2.utils.events INFO:  eta: 13:28:17  iter: 4279  total_loss: 3.829  loss_sem_seg: 2.577  loss_relation: 0.2553  loss_center: 0.7292  loss_offset: 0.4245  time: 1.0645  data_time: 0.0647  lr: 0.00046132  max_mem: 19293M
[10/10 00:43:37] d2.utils.events INFO:  eta: 13:27:47  iter: 4299  total_loss: 4.074  loss_sem_seg: 2.631  loss_relation: 0.2514  loss_center: 0.6725  loss_offset: 0.4794  time: 1.0644  data_time: 0.0576  lr: 0.00046114  max_mem: 19293M
[10/10 00:43:58] d2.utils.events INFO:  eta: 13:27:26  iter: 4319  total_loss: 4.08  loss_sem_seg: 2.617  loss_relation: 0.2513  loss_center: 0.7076  loss_offset: 0.4719  time: 1.0644  data_time: 0.0556  lr: 0.00046096  max_mem: 19293M
[10/10 00:44:19] d2.utils.events INFO:  eta: 13:27:05  iter: 4339  total_loss: 4.035  loss_sem_seg: 2.572  loss_relation: 0.2504  loss_center: 0.7311  loss_offset: 0.4285  time: 1.0644  data_time: 0.0580  lr: 0.00046077  max_mem: 19293M
[10/10 00:44:40] d2.utils.events INFO:  eta: 13:26:28  iter: 4359  total_loss: 4.014  loss_sem_seg: 2.675  loss_relation: 0.253  loss_center: 0.7937  loss_offset: 0.4375  time: 1.0644  data_time: 0.0581  lr: 0.00046059  max_mem: 19293M
[10/10 00:45:01] d2.utils.events INFO:  eta: 13:26:18  iter: 4379  total_loss: 4.098  loss_sem_seg: 2.607  loss_relation: 0.2604  loss_center: 0.7124  loss_offset: 0.4406  time: 1.0644  data_time: 0.0608  lr: 0.00046041  max_mem: 19293M
[10/10 00:45:23] d2.utils.events INFO:  eta: 13:26:01  iter: 4399  total_loss: 3.967  loss_sem_seg: 2.498  loss_relation: 0.2516  loss_center: 0.7189  loss_offset: 0.4732  time: 1.0644  data_time: 0.0639  lr: 0.00046023  max_mem: 19293M
[10/10 00:45:44] d2.utils.events INFO:  eta: 13:25:36  iter: 4419  total_loss: 3.913  loss_sem_seg: 2.508  loss_relation: 0.2556  loss_center: 0.7463  loss_offset: 0.4488  time: 1.0644  data_time: 0.0610  lr: 0.00046005  max_mem: 19293M
[10/10 00:46:05] d2.utils.events INFO:  eta: 13:25:13  iter: 4439  total_loss: 4.123  loss_sem_seg: 2.636  loss_relation: 0.2599  loss_center: 0.7566  loss_offset: 0.4357  time: 1.0643  data_time: 0.0570  lr: 0.00045987  max_mem: 19293M
[10/10 00:46:27] d2.utils.events INFO:  eta: 13:24:56  iter: 4459  total_loss: 4.186  loss_sem_seg: 2.727  loss_relation: 0.2464  loss_center: 0.7333  loss_offset: 0.4629  time: 1.0643  data_time: 0.0632  lr: 0.00045968  max_mem: 19293M
[10/10 00:46:48] d2.utils.events INFO:  eta: 13:24:30  iter: 4479  total_loss: 3.876  loss_sem_seg: 2.476  loss_relation: 0.2507  loss_center: 0.7024  loss_offset: 0.4467  time: 1.0643  data_time: 0.0646  lr: 0.0004595  max_mem: 19293M
[10/10 00:47:09] d2.utils.events INFO:  eta: 13:24:11  iter: 4499  total_loss: 4.032  loss_sem_seg: 2.691  loss_relation: 0.2528  loss_center: 0.6837  loss_offset: 0.4307  time: 1.0643  data_time: 0.0621  lr: 0.00045932  max_mem: 19293M
[10/10 00:47:30] d2.utils.events INFO:  eta: 13:23:40  iter: 4519  total_loss: 4.274  loss_sem_seg: 2.815  loss_relation: 0.2593  loss_center: 0.6912  loss_offset: 0.4543  time: 1.0643  data_time: 0.0658  lr: 0.00045914  max_mem: 19293M
[10/10 00:47:52] d2.utils.events INFO:  eta: 13:23:29  iter: 4539  total_loss: 4.154  loss_sem_seg: 2.667  loss_relation: 0.2577  loss_center: 0.7753  loss_offset: 0.4562  time: 1.0643  data_time: 0.0593  lr: 0.00045896  max_mem: 19293M
[10/10 00:48:13] d2.utils.events INFO:  eta: 13:23:11  iter: 4559  total_loss: 3.966  loss_sem_seg: 2.476  loss_relation: 0.2594  loss_center: 0.7831  loss_offset: 0.4416  time: 1.0643  data_time: 0.0612  lr: 0.00045878  max_mem: 19293M
[10/10 00:48:34] d2.utils.events INFO:  eta: 13:22:54  iter: 4579  total_loss: 4.115  loss_sem_seg: 2.65  loss_relation: 0.2548  loss_center: 0.7412  loss_offset: 0.3829  time: 1.0643  data_time: 0.0579  lr: 0.00045859  max_mem: 19293M
[10/10 00:48:56] d2.utils.events INFO:  eta: 13:22:27  iter: 4599  total_loss: 3.914  loss_sem_seg: 2.531  loss_relation: 0.2555  loss_center: 0.7093  loss_offset: 0.4346  time: 1.0643  data_time: 0.0628  lr: 0.00045841  max_mem: 19293M
[10/10 00:49:17] d2.utils.events INFO:  eta: 13:22:12  iter: 4619  total_loss: 3.889  loss_sem_seg: 2.571  loss_relation: 0.2529  loss_center: 0.7325  loss_offset: 0.4382  time: 1.0643  data_time: 0.0641  lr: 0.00045823  max_mem: 19293M
[10/10 00:49:38] d2.utils.events INFO:  eta: 13:21:45  iter: 4639  total_loss: 4.109  loss_sem_seg: 2.625  loss_relation: 0.2546  loss_center: 0.7297  loss_offset: 0.4284  time: 1.0643  data_time: 0.0591  lr: 0.00045805  max_mem: 19293M
[10/10 00:49:59] d2.utils.events INFO:  eta: 13:21:09  iter: 4659  total_loss: 4.238  loss_sem_seg: 2.861  loss_relation: 0.261  loss_center: 0.6936  loss_offset: 0.4284  time: 1.0643  data_time: 0.0541  lr: 0.00045787  max_mem: 19293M
[10/10 00:50:20] d2.utils.events INFO:  eta: 13:21:03  iter: 4679  total_loss: 4.111  loss_sem_seg: 2.682  loss_relation: 0.2537  loss_center: 0.7073  loss_offset: 0.4432  time: 1.0643  data_time: 0.0592  lr: 0.00045768  max_mem: 19293M
[10/10 00:50:42] d2.utils.events INFO:  eta: 13:20:39  iter: 4699  total_loss: 4.16  loss_sem_seg: 2.659  loss_relation: 0.2535  loss_center: 0.7333  loss_offset: 0.4836  time: 1.0643  data_time: 0.0606  lr: 0.0004575  max_mem: 19293M
[10/10 00:51:03] d2.utils.events INFO:  eta: 13:20:07  iter: 4719  total_loss: 4.162  loss_sem_seg: 2.81  loss_relation: 0.2539  loss_center: 0.7846  loss_offset: 0.4385  time: 1.0642  data_time: 0.0618  lr: 0.00045732  max_mem: 19293M
[10/10 00:51:24] d2.utils.events INFO:  eta: 13:19:57  iter: 4739  total_loss: 3.977  loss_sem_seg: 2.49  loss_relation: 0.2467  loss_center: 0.7017  loss_offset: 0.4637  time: 1.0643  data_time: 0.0634  lr: 0.00045714  max_mem: 19293M
[10/10 00:51:46] d2.utils.events INFO:  eta: 13:19:25  iter: 4759  total_loss: 4.051  loss_sem_seg: 2.68  loss_relation: 0.247  loss_center: 0.7184  loss_offset: 0.4665  time: 1.0643  data_time: 0.0624  lr: 0.00045696  max_mem: 19293M
[10/10 00:52:07] d2.utils.events INFO:  eta: 13:19:04  iter: 4779  total_loss: 3.956  loss_sem_seg: 2.558  loss_relation: 0.2502  loss_center: 0.7483  loss_offset: 0.4555  time: 1.0643  data_time: 0.0637  lr: 0.00045678  max_mem: 19293M
[10/10 00:52:28] d2.utils.events INFO:  eta: 13:18:49  iter: 4799  total_loss: 3.924  loss_sem_seg: 2.349  loss_relation: 0.2421  loss_center: 0.7064  loss_offset: 0.4519  time: 1.0642  data_time: 0.0621  lr: 0.00045659  max_mem: 19293M
[10/10 00:52:49] d2.utils.events INFO:  eta: 13:18:41  iter: 4819  total_loss: 3.885  loss_sem_seg: 2.544  loss_relation: 0.2385  loss_center: 0.6464  loss_offset: 0.4083  time: 1.0643  data_time: 0.0650  lr: 0.00045641  max_mem: 19293M
[10/10 00:53:11] d2.utils.events INFO:  eta: 13:18:16  iter: 4839  total_loss: 3.825  loss_sem_seg: 2.468  loss_relation: 0.2414  loss_center: 0.699  loss_offset: 0.4361  time: 1.0643  data_time: 0.0605  lr: 0.00045623  max_mem: 19293M
[10/10 00:53:32] d2.utils.events INFO:  eta: 13:17:57  iter: 4859  total_loss: 4.008  loss_sem_seg: 2.511  loss_relation: 0.2524  loss_center: 0.7323  loss_offset: 0.4294  time: 1.0642  data_time: 0.0566  lr: 0.00045605  max_mem: 19293M
[10/10 00:53:53] d2.utils.events INFO:  eta: 13:17:28  iter: 4879  total_loss: 3.82  loss_sem_seg: 2.486  loss_relation: 0.2552  loss_center: 0.7541  loss_offset: 0.4131  time: 1.0642  data_time: 0.0565  lr: 0.00045587  max_mem: 19293M
[10/10 00:54:14] d2.utils.events INFO:  eta: 13:17:06  iter: 4899  total_loss: 3.698  loss_sem_seg: 2.258  loss_relation: 0.243  loss_center: 0.7314  loss_offset: 0.4374  time: 1.0642  data_time: 0.0587  lr: 0.00045568  max_mem: 19293M
[10/10 00:54:36] d2.utils.events INFO:  eta: 13:16:35  iter: 4919  total_loss: 3.789  loss_sem_seg: 2.484  loss_relation: 0.2546  loss_center: 0.8077  loss_offset: 0.4326  time: 1.0642  data_time: 0.0638  lr: 0.0004555  max_mem: 19293M
[10/10 00:54:57] d2.utils.events INFO:  eta: 13:16:14  iter: 4939  total_loss: 3.937  loss_sem_seg: 2.53  loss_relation: 0.2374  loss_center: 0.7107  loss_offset: 0.4356  time: 1.0642  data_time: 0.0625  lr: 0.00045532  max_mem: 19293M
[10/10 00:55:18] d2.utils.events INFO:  eta: 13:16:12  iter: 4959  total_loss: 3.836  loss_sem_seg: 2.394  loss_relation: 0.2431  loss_center: 0.7527  loss_offset: 0.4238  time: 1.0642  data_time: 0.0643  lr: 0.00045514  max_mem: 19293M
[10/10 00:55:39] d2.utils.events INFO:  eta: 13:15:38  iter: 4979  total_loss: 3.781  loss_sem_seg: 2.285  loss_relation: 0.2478  loss_center: 0.7048  loss_offset: 0.4049  time: 1.0642  data_time: 0.0536  lr: 0.00045496  max_mem: 19293M
[10/10 00:56:01] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0004999.pth
[10/10 00:56:08] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 00:56:08] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 00:56:08] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 00:56:08] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 00:56:23] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0020 s/iter. Inference: 0.0741 s/iter. Eval: 0.0288 s/iter. Total: 0.1048 s/iter. ETA=0:00:25
[10/10 00:56:28] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0012 s/iter. Inference: 0.0672 s/iter. Eval: 0.0286 s/iter. Total: 0.0971 s/iter. ETA=0:00:18
[10/10 00:56:33] d2.evaluation.evaluator INFO: Inference done 118/250. Dataloading: 0.0014 s/iter. Inference: 0.0648 s/iter. Eval: 0.0282 s/iter. Total: 0.0944 s/iter. ETA=0:00:12
[10/10 00:56:38] d2.evaluation.evaluator INFO: Inference done 172/250. Dataloading: 0.0014 s/iter. Inference: 0.0645 s/iter. Eval: 0.0282 s/iter. Total: 0.0942 s/iter. ETA=0:00:07
[10/10 00:56:43] d2.evaluation.evaluator INFO: Inference done 230/250. Dataloading: 0.0014 s/iter. Inference: 0.0634 s/iter. Eval: 0.0277 s/iter. Total: 0.0925 s/iter. ETA=0:00:01
[10/10 00:56:45] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.939184 (0.093629 s / iter per device, on 2 devices)
[10/10 00:56:45] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063124 s / iter per device, on 2 devices)
[10/10 00:56:45] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalhr64t1vr ...
[10/10 00:56:50] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 14.523288284347133
[10/10 00:56:50] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.753 | 44.702 | 15.908 |      129      |
| Things | 9.593  | 42.221 | 13.434 |      76       |
| Stuff  | 14.850 | 48.260 | 19.457 |      53       |
[10/10 00:56:50] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 00:56:50] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 00:56:50] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 00:56:50] d2.evaluation.testing INFO: copypaste: 11.7527,44.7024,15.9085,9.5931,42.2214,13.4337,14.8496,48.2600,19.4573
[10/10 00:56:50] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 00:56:50] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 00:56:50] d2.evaluation.testing INFO: copypaste: 0.1452
[10/10 00:56:50] d2.utils.events INFO:  eta: 13:15:20  iter: 4999  total_loss: 3.88  loss_sem_seg: 2.521  loss_relation: 0.2468  loss_center: 0.6914  loss_offset: 0.4118  time: 1.0642  data_time: 0.0656  lr: 0.00045478  max_mem: 19293M
[10/10 00:56:50] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/10 00:56:57] d2.engine.hooks INFO: Saved best model as latest eval score for relation_mean_recall/mean_recall is 0.14523, better than last best score 0.14071 @ iteration 3999.
[10/10 00:57:18] d2.utils.events INFO:  eta: 13:15:02  iter: 5019  total_loss: 3.79  loss_sem_seg: 2.407  loss_relation: 0.243  loss_center: 0.6699  loss_offset: 0.4387  time: 1.0642  data_time: 0.0626  lr: 0.00045459  max_mem: 19293M
[10/10 00:57:40] d2.utils.events INFO:  eta: 13:14:49  iter: 5039  total_loss: 3.837  loss_sem_seg: 2.328  loss_relation: 0.2424  loss_center: 0.6731  loss_offset: 0.4442  time: 1.0642  data_time: 0.0644  lr: 0.00045441  max_mem: 19293M
[10/10 00:58:01] d2.utils.events INFO:  eta: 13:14:35  iter: 5059  total_loss: 3.98  loss_sem_seg: 2.505  loss_relation: 0.25  loss_center: 0.6753  loss_offset: 0.4274  time: 1.0642  data_time: 0.0644  lr: 0.00045423  max_mem: 19293M
[10/10 00:58:22] d2.utils.events INFO:  eta: 13:14:20  iter: 5079  total_loss: 3.765  loss_sem_seg: 2.3  loss_relation: 0.2491  loss_center: 0.7566  loss_offset: 0.4521  time: 1.0642  data_time: 0.0650  lr: 0.00045405  max_mem: 19293M
[10/10 00:58:44] d2.utils.events INFO:  eta: 13:13:58  iter: 5099  total_loss: 3.787  loss_sem_seg: 2.409  loss_relation: 0.2401  loss_center: 0.7099  loss_offset: 0.4252  time: 1.0642  data_time: 0.0568  lr: 0.00045387  max_mem: 19293M
[10/10 00:59:05] d2.utils.events INFO:  eta: 13:13:39  iter: 5119  total_loss: 3.786  loss_sem_seg: 2.38  loss_relation: 0.2431  loss_center: 0.7159  loss_offset: 0.4487  time: 1.0642  data_time: 0.0642  lr: 0.00045368  max_mem: 19293M
[10/10 00:59:26] d2.utils.events INFO:  eta: 13:13:21  iter: 5139  total_loss: 3.675  loss_sem_seg: 2.317  loss_relation: 0.2515  loss_center: 0.6883  loss_offset: 0.414  time: 1.0643  data_time: 0.0699  lr: 0.0004535  max_mem: 19293M
[10/10 00:59:48] d2.utils.events INFO:  eta: 13:13:04  iter: 5159  total_loss: 3.659  loss_sem_seg: 2.344  loss_relation: 0.2479  loss_center: 0.7228  loss_offset: 0.4524  time: 1.0643  data_time: 0.0617  lr: 0.00045332  max_mem: 19293M
[10/10 01:00:09] d2.utils.events INFO:  eta: 13:12:36  iter: 5179  total_loss: 3.682  loss_sem_seg: 2.225  loss_relation: 0.2474  loss_center: 0.7324  loss_offset: 0.4161  time: 1.0643  data_time: 0.0601  lr: 0.00045314  max_mem: 19293M
[10/10 01:00:30] d2.utils.events INFO:  eta: 13:12:18  iter: 5199  total_loss: 3.77  loss_sem_seg: 2.346  loss_relation: 0.2445  loss_center: 0.7126  loss_offset: 0.4406  time: 1.0643  data_time: 0.0625  lr: 0.00045296  max_mem: 19293M
[10/10 01:00:52] d2.utils.events INFO:  eta: 13:12:01  iter: 5219  total_loss: 3.934  loss_sem_seg: 2.469  loss_relation: 0.2518  loss_center: 0.6947  loss_offset: 0.4592  time: 1.0643  data_time: 0.0603  lr: 0.00045277  max_mem: 19293M
[10/10 01:01:13] d2.utils.events INFO:  eta: 13:11:36  iter: 5239  total_loss: 4.045  loss_sem_seg: 2.58  loss_relation: 0.2435  loss_center: 0.7823  loss_offset: 0.4506  time: 1.0642  data_time: 0.0563  lr: 0.00045259  max_mem: 19293M
[10/10 01:01:34] d2.utils.events INFO:  eta: 13:11:09  iter: 5259  total_loss: 3.655  loss_sem_seg: 2.287  loss_relation: 0.2421  loss_center: 0.7444  loss_offset: 0.4084  time: 1.0642  data_time: 0.0571  lr: 0.00045241  max_mem: 19293M
[10/10 01:01:55] d2.utils.events INFO:  eta: 13:10:40  iter: 5279  total_loss: 3.762  loss_sem_seg: 2.392  loss_relation: 0.2439  loss_center: 0.6964  loss_offset: 0.4178  time: 1.0642  data_time: 0.0587  lr: 0.00045223  max_mem: 19293M
[10/10 01:02:17] d2.utils.events INFO:  eta: 13:10:28  iter: 5299  total_loss: 4.038  loss_sem_seg: 2.633  loss_relation: 0.2455  loss_center: 0.7003  loss_offset: 0.3833  time: 1.0642  data_time: 0.0649  lr: 0.00045205  max_mem: 19293M
[10/10 01:02:38] d2.utils.events INFO:  eta: 13:10:09  iter: 5319  total_loss: 3.952  loss_sem_seg: 2.45  loss_relation: 0.2548  loss_center: 0.7107  loss_offset: 0.4298  time: 1.0642  data_time: 0.0604  lr: 0.00045186  max_mem: 19293M
[10/10 01:02:59] d2.utils.events INFO:  eta: 13:09:55  iter: 5339  total_loss: 3.852  loss_sem_seg: 2.368  loss_relation: 0.2456  loss_center: 0.7325  loss_offset: 0.4388  time: 1.0642  data_time: 0.0634  lr: 0.00045168  max_mem: 19293M
[10/10 01:03:20] d2.utils.events INFO:  eta: 13:09:38  iter: 5359  total_loss: 3.738  loss_sem_seg: 2.266  loss_relation: 0.2423  loss_center: 0.7648  loss_offset: 0.4369  time: 1.0642  data_time: 0.0602  lr: 0.0004515  max_mem: 19293M
[10/10 01:03:42] d2.utils.events INFO:  eta: 13:09:17  iter: 5379  total_loss: 3.71  loss_sem_seg: 2.281  loss_relation: 0.2372  loss_center: 0.7265  loss_offset: 0.4377  time: 1.0642  data_time: 0.0614  lr: 0.00045132  max_mem: 19293M
[10/10 01:04:03] d2.utils.events INFO:  eta: 13:08:55  iter: 5399  total_loss: 3.797  loss_sem_seg: 2.295  loss_relation: 0.2299  loss_center: 0.6644  loss_offset: 0.4316  time: 1.0642  data_time: 0.0608  lr: 0.00045114  max_mem: 19293M
[10/10 01:04:24] d2.utils.events INFO:  eta: 13:08:35  iter: 5419  total_loss: 3.848  loss_sem_seg: 2.506  loss_relation: 0.241  loss_center: 0.6724  loss_offset: 0.4152  time: 1.0642  data_time: 0.0603  lr: 0.00045095  max_mem: 19293M
[10/10 01:04:45] d2.utils.events INFO:  eta: 13:08:24  iter: 5439  total_loss: 3.883  loss_sem_seg: 2.445  loss_relation: 0.2435  loss_center: 0.7353  loss_offset: 0.415  time: 1.0642  data_time: 0.0601  lr: 0.00045077  max_mem: 19293M
[10/10 01:05:07] d2.utils.events INFO:  eta: 13:07:52  iter: 5459  total_loss: 4.013  loss_sem_seg: 2.579  loss_relation: 0.2371  loss_center: 0.7359  loss_offset: 0.4334  time: 1.0642  data_time: 0.0650  lr: 0.00045059  max_mem: 19293M
[10/10 01:05:28] d2.utils.events INFO:  eta: 13:07:32  iter: 5479  total_loss: 3.788  loss_sem_seg: 2.365  loss_relation: 0.2407  loss_center: 0.7602  loss_offset: 0.4012  time: 1.0642  data_time: 0.0608  lr: 0.00045041  max_mem: 19293M
[10/10 01:05:49] d2.utils.events INFO:  eta: 13:07:13  iter: 5499  total_loss: 3.836  loss_sem_seg: 2.424  loss_relation: 0.2406  loss_center: 0.6908  loss_offset: 0.3984  time: 1.0642  data_time: 0.0603  lr: 0.00045023  max_mem: 19293M
[10/10 01:06:11] d2.utils.events INFO:  eta: 13:06:50  iter: 5519  total_loss: 3.89  loss_sem_seg: 2.433  loss_relation: 0.2527  loss_center: 0.7319  loss_offset: 0.4144  time: 1.0642  data_time: 0.0564  lr: 0.00045004  max_mem: 19293M
[10/10 01:06:32] d2.utils.events INFO:  eta: 13:06:38  iter: 5539  total_loss: 3.92  loss_sem_seg: 2.48  loss_relation: 0.2387  loss_center: 0.7073  loss_offset: 0.4105  time: 1.0642  data_time: 0.0625  lr: 0.00044986  max_mem: 19293M
[10/10 01:06:53] d2.utils.events INFO:  eta: 13:06:06  iter: 5559  total_loss: 3.815  loss_sem_seg: 2.35  loss_relation: 0.238  loss_center: 0.7093  loss_offset: 0.4006  time: 1.0641  data_time: 0.0557  lr: 0.00044968  max_mem: 19293M
[10/10 01:07:14] d2.utils.events INFO:  eta: 13:05:46  iter: 5579  total_loss: 3.75  loss_sem_seg: 2.304  loss_relation: 0.2444  loss_center: 0.6536  loss_offset: 0.4673  time: 1.0641  data_time: 0.0648  lr: 0.0004495  max_mem: 19293M
[10/10 01:07:35] d2.utils.events INFO:  eta: 13:05:27  iter: 5599  total_loss: 3.844  loss_sem_seg: 2.433  loss_relation: 0.2487  loss_center: 0.7863  loss_offset: 0.4063  time: 1.0641  data_time: 0.0608  lr: 0.00044931  max_mem: 19293M
[10/10 01:07:57] d2.utils.events INFO:  eta: 13:05:16  iter: 5619  total_loss: 3.894  loss_sem_seg: 2.451  loss_relation: 0.2527  loss_center: 0.7368  loss_offset: 0.4633  time: 1.0641  data_time: 0.0613  lr: 0.00044913  max_mem: 19293M
[10/10 01:08:18] d2.utils.events INFO:  eta: 13:04:58  iter: 5639  total_loss: 3.734  loss_sem_seg: 2.418  loss_relation: 0.2416  loss_center: 0.7481  loss_offset: 0.4078  time: 1.0641  data_time: 0.0622  lr: 0.00044895  max_mem: 19293M
[10/10 01:08:39] d2.utils.events INFO:  eta: 13:04:44  iter: 5659  total_loss: 3.791  loss_sem_seg: 2.392  loss_relation: 0.2421  loss_center: 0.7163  loss_offset: 0.4273  time: 1.0641  data_time: 0.0604  lr: 0.00044877  max_mem: 19293M
[10/10 01:09:01] d2.utils.events INFO:  eta: 13:04:06  iter: 5679  total_loss: 3.643  loss_sem_seg: 2.264  loss_relation: 0.2304  loss_center: 0.6543  loss_offset: 0.4602  time: 1.0641  data_time: 0.0597  lr: 0.00044859  max_mem: 19293M
[10/10 01:09:22] d2.utils.events INFO:  eta: 13:03:49  iter: 5699  total_loss: 3.599  loss_sem_seg: 2.218  loss_relation: 0.235  loss_center: 0.7449  loss_offset: 0.3972  time: 1.0641  data_time: 0.0607  lr: 0.0004484  max_mem: 19293M
[10/10 01:09:43] d2.utils.events INFO:  eta: 13:03:29  iter: 5719  total_loss: 3.491  loss_sem_seg: 2.185  loss_relation: 0.2322  loss_center: 0.6735  loss_offset: 0.3885  time: 1.0641  data_time: 0.0611  lr: 0.00044822  max_mem: 19293M
[10/10 01:10:05] d2.utils.events INFO:  eta: 13:03:12  iter: 5739  total_loss: 3.732  loss_sem_seg: 2.495  loss_relation: 0.2323  loss_center: 0.7241  loss_offset: 0.4307  time: 1.0642  data_time: 0.0682  lr: 0.00044804  max_mem: 19293M
[10/10 01:10:26] d2.utils.events INFO:  eta: 13:02:51  iter: 5759  total_loss: 3.627  loss_sem_seg: 2.237  loss_relation: 0.2415  loss_center: 0.6645  loss_offset: 0.4313  time: 1.0641  data_time: 0.0575  lr: 0.00044786  max_mem: 19293M
[10/10 01:10:47] d2.utils.events INFO:  eta: 13:02:28  iter: 5779  total_loss: 3.587  loss_sem_seg: 2.222  loss_relation: 0.2428  loss_center: 0.6783  loss_offset: 0.4001  time: 1.0641  data_time: 0.0598  lr: 0.00044767  max_mem: 19293M
[10/10 01:11:08] d2.utils.events INFO:  eta: 13:02:25  iter: 5799  total_loss: 3.866  loss_sem_seg: 2.419  loss_relation: 0.2454  loss_center: 0.7985  loss_offset: 0.42  time: 1.0641  data_time: 0.0674  lr: 0.00044749  max_mem: 19293M
[10/10 01:11:30] d2.utils.events INFO:  eta: 13:01:55  iter: 5819  total_loss: 3.609  loss_sem_seg: 2.236  loss_relation: 0.2353  loss_center: 0.6402  loss_offset: 0.4489  time: 1.0641  data_time: 0.0611  lr: 0.00044731  max_mem: 19293M
[10/10 01:11:51] d2.utils.events INFO:  eta: 13:01:45  iter: 5839  total_loss: 3.77  loss_sem_seg: 2.341  loss_relation: 0.2386  loss_center: 0.7275  loss_offset: 0.4354  time: 1.0641  data_time: 0.0609  lr: 0.00044713  max_mem: 19293M
[10/10 01:12:12] d2.utils.events INFO:  eta: 13:01:26  iter: 5859  total_loss: 3.96  loss_sem_seg: 2.5  loss_relation: 0.237  loss_center: 0.7075  loss_offset: 0.4265  time: 1.0641  data_time: 0.0623  lr: 0.00044695  max_mem: 19293M
[10/10 01:12:33] d2.utils.events INFO:  eta: 13:01:13  iter: 5879  total_loss: 3.724  loss_sem_seg: 2.304  loss_relation: 0.2389  loss_center: 0.7539  loss_offset: 0.4156  time: 1.0641  data_time: 0.0629  lr: 0.00044676  max_mem: 19293M
[10/10 01:12:55] d2.utils.events INFO:  eta: 13:01:02  iter: 5899  total_loss: 3.895  loss_sem_seg: 2.504  loss_relation: 0.2432  loss_center: 0.74  loss_offset: 0.4436  time: 1.0641  data_time: 0.0642  lr: 0.00044658  max_mem: 19293M
[10/10 01:13:16] d2.utils.events INFO:  eta: 13:00:43  iter: 5919  total_loss: 3.588  loss_sem_seg: 2.284  loss_relation: 0.2424  loss_center: 0.7157  loss_offset: 0.4361  time: 1.0641  data_time: 0.0634  lr: 0.0004464  max_mem: 19293M
[10/10 01:13:37] d2.utils.events INFO:  eta: 13:00:16  iter: 5939  total_loss: 3.544  loss_sem_seg: 2.233  loss_relation: 0.2334  loss_center: 0.6992  loss_offset: 0.4252  time: 1.0641  data_time: 0.0595  lr: 0.00044622  max_mem: 19293M
[10/10 01:13:59] d2.utils.events INFO:  eta: 12:59:44  iter: 5959  total_loss: 3.568  loss_sem_seg: 2.196  loss_relation: 0.2379  loss_center: 0.7612  loss_offset: 0.4134  time: 1.0641  data_time: 0.0581  lr: 0.00044603  max_mem: 19293M
[10/10 01:14:20] d2.utils.events INFO:  eta: 12:59:40  iter: 5979  total_loss: 3.462  loss_sem_seg: 2.135  loss_relation: 0.2335  loss_center: 0.6278  loss_offset: 0.4456  time: 1.0641  data_time: 0.0601  lr: 0.00044585  max_mem: 19293M
[10/10 01:14:41] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0005999.pth
[10/10 01:14:49] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 01:14:49] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 01:14:49] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 01:14:49] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 01:15:03] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0009 s/iter. Inference: 0.0743 s/iter. Eval: 0.0282 s/iter. Total: 0.1035 s/iter. ETA=0:00:24
[10/10 01:15:08] d2.evaluation.evaluator INFO: Inference done 65/250. Dataloading: 0.0011 s/iter. Inference: 0.0653 s/iter. Eval: 0.0285 s/iter. Total: 0.0950 s/iter. ETA=0:00:17
[10/10 01:15:13] d2.evaluation.evaluator INFO: Inference done 121/250. Dataloading: 0.0012 s/iter. Inference: 0.0629 s/iter. Eval: 0.0281 s/iter. Total: 0.0923 s/iter. ETA=0:00:11
[10/10 01:15:18] d2.evaluation.evaluator INFO: Inference done 175/250. Dataloading: 0.0013 s/iter. Inference: 0.0632 s/iter. Eval: 0.0281 s/iter. Total: 0.0927 s/iter. ETA=0:00:06
[10/10 01:15:23] d2.evaluation.evaluator INFO: Inference done 232/250. Dataloading: 0.0014 s/iter. Inference: 0.0624 s/iter. Eval: 0.0276 s/iter. Total: 0.0915 s/iter. ETA=0:00:01
[10/10 01:15:25] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.737015 (0.092804 s / iter per device, on 2 devices)
[10/10 01:15:25] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062411 s / iter per device, on 2 devices)
[10/10 01:15:25] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_eval1i_f8vfm ...
[10/10 01:15:30] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 14.315884422797003
[10/10 01:15:30] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.259 | 43.384 | 15.223 |      130      |
| Things | 8.699  | 40.342 | 12.261 |      77       |
| Stuff  | 14.977 | 47.804 | 19.527 |      53       |
[10/10 01:15:30] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 01:15:30] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 01:15:30] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 01:15:30] d2.evaluation.testing INFO: copypaste: 11.2587,43.3840,15.2230,8.6991,40.3417,12.2605,14.9775,47.8040,19.5270
[10/10 01:15:30] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 01:15:30] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 01:15:30] d2.evaluation.testing INFO: copypaste: 0.1432
[10/10 01:15:30] d2.utils.events INFO:  eta: 12:59:12  iter: 5999  total_loss: 3.521  loss_sem_seg: 2.173  loss_relation: 0.2368  loss_center: 0.645  loss_offset: 0.3925  time: 1.0641  data_time: 0.0577  lr: 0.00044567  max_mem: 19293M
[10/10 01:15:30] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.14316, not better than best score 0.14523 @ iteration 4999.
[10/10 01:15:51] d2.utils.events INFO:  eta: 12:58:49  iter: 6019  total_loss: 3.58  loss_sem_seg: 2.333  loss_relation: 0.2381  loss_center: 0.6601  loss_offset: 0.3934  time: 1.0641  data_time: 0.0645  lr: 0.00044549  max_mem: 19293M
[10/10 01:16:13] d2.utils.events INFO:  eta: 12:58:26  iter: 6039  total_loss: 3.848  loss_sem_seg: 2.448  loss_relation: 0.2412  loss_center: 0.7229  loss_offset: 0.4298  time: 1.0641  data_time: 0.0617  lr: 0.00044531  max_mem: 19293M
[10/10 01:16:34] d2.utils.events INFO:  eta: 12:57:58  iter: 6059  total_loss: 4.037  loss_sem_seg: 2.53  loss_relation: 0.2404  loss_center: 0.7684  loss_offset: 0.4598  time: 1.0641  data_time: 0.0620  lr: 0.00044512  max_mem: 19293M
[10/10 01:16:56] d2.utils.events INFO:  eta: 12:57:33  iter: 6079  total_loss: 3.788  loss_sem_seg: 2.451  loss_relation: 0.2391  loss_center: 0.7006  loss_offset: 0.4764  time: 1.0641  data_time: 0.0617  lr: 0.00044494  max_mem: 19293M
[10/10 01:17:17] d2.utils.events INFO:  eta: 12:57:14  iter: 6099  total_loss: 3.594  loss_sem_seg: 2.289  loss_relation: 0.2352  loss_center: 0.7087  loss_offset: 0.4163  time: 1.0641  data_time: 0.0658  lr: 0.00044476  max_mem: 19293M
[10/10 01:17:38] d2.utils.events INFO:  eta: 12:56:52  iter: 6119  total_loss: 3.665  loss_sem_seg: 2.305  loss_relation: 0.2398  loss_center: 0.7268  loss_offset: 0.4251  time: 1.0641  data_time: 0.0601  lr: 0.00044458  max_mem: 19293M
[10/10 01:18:00] d2.utils.events INFO:  eta: 12:56:31  iter: 6139  total_loss: 3.725  loss_sem_seg: 2.35  loss_relation: 0.2414  loss_center: 0.7086  loss_offset: 0.3929  time: 1.0642  data_time: 0.0670  lr: 0.00044439  max_mem: 19293M
[10/10 01:18:21] d2.utils.events INFO:  eta: 12:56:06  iter: 6159  total_loss: 3.664  loss_sem_seg: 2.39  loss_relation: 0.2388  loss_center: 0.6706  loss_offset: 0.44  time: 1.0642  data_time: 0.0568  lr: 0.00044421  max_mem: 19293M
[10/10 01:18:42] d2.utils.events INFO:  eta: 12:55:48  iter: 6179  total_loss: 3.738  loss_sem_seg: 2.336  loss_relation: 0.2398  loss_center: 0.714  loss_offset: 0.4391  time: 1.0642  data_time: 0.0649  lr: 0.00044403  max_mem: 19293M
[10/10 01:19:04] d2.utils.events INFO:  eta: 12:55:28  iter: 6199  total_loss: 3.603  loss_sem_seg: 2.225  loss_relation: 0.2343  loss_center: 0.6933  loss_offset: 0.4367  time: 1.0642  data_time: 0.0621  lr: 0.00044385  max_mem: 19293M
[10/10 01:19:25] d2.utils.events INFO:  eta: 12:55:12  iter: 6219  total_loss: 3.448  loss_sem_seg: 2.202  loss_relation: 0.2307  loss_center: 0.6779  loss_offset: 0.4069  time: 1.0642  data_time: 0.0676  lr: 0.00044366  max_mem: 19293M
[10/10 01:19:46] d2.utils.events INFO:  eta: 12:54:45  iter: 6239  total_loss: 3.301  loss_sem_seg: 1.906  loss_relation: 0.2295  loss_center: 0.6633  loss_offset: 0.447  time: 1.0642  data_time: 0.0575  lr: 0.00044348  max_mem: 19293M
[10/10 01:20:07] d2.utils.events INFO:  eta: 12:54:23  iter: 6259  total_loss: 3.33  loss_sem_seg: 1.936  loss_relation: 0.2394  loss_center: 0.7025  loss_offset: 0.4231  time: 1.0642  data_time: 0.0626  lr: 0.0004433  max_mem: 19293M
[10/10 01:20:29] d2.utils.events INFO:  eta: 12:54:08  iter: 6279  total_loss: 3.531  loss_sem_seg: 2.133  loss_relation: 0.2317  loss_center: 0.7608  loss_offset: 0.3967  time: 1.0642  data_time: 0.0622  lr: 0.00044312  max_mem: 19293M
[10/10 01:20:50] d2.utils.events INFO:  eta: 12:53:45  iter: 6299  total_loss: 3.565  loss_sem_seg: 2.232  loss_relation: 0.2416  loss_center: 0.6595  loss_offset: 0.4156  time: 1.0642  data_time: 0.0633  lr: 0.00044293  max_mem: 19293M
[10/10 01:21:11] d2.utils.events INFO:  eta: 12:53:31  iter: 6319  total_loss: 3.793  loss_sem_seg: 2.322  loss_relation: 0.238  loss_center: 0.7858  loss_offset: 0.4304  time: 1.0642  data_time: 0.0622  lr: 0.00044275  max_mem: 19293M
[10/10 01:21:33] d2.utils.events INFO:  eta: 12:53:07  iter: 6339  total_loss: 3.703  loss_sem_seg: 2.329  loss_relation: 0.2457  loss_center: 0.6509  loss_offset: 0.4107  time: 1.0642  data_time: 0.0643  lr: 0.00044257  max_mem: 19293M
[10/10 01:21:54] d2.utils.events INFO:  eta: 12:52:43  iter: 6359  total_loss: 3.554  loss_sem_seg: 2.196  loss_relation: 0.2382  loss_center: 0.704  loss_offset: 0.3957  time: 1.0642  data_time: 0.0622  lr: 0.00044239  max_mem: 19293M
[10/10 01:22:15] d2.utils.events INFO:  eta: 12:52:16  iter: 6379  total_loss: 3.564  loss_sem_seg: 2.186  loss_relation: 0.2315  loss_center: 0.6748  loss_offset: 0.4257  time: 1.0642  data_time: 0.0555  lr: 0.0004422  max_mem: 19293M
[10/10 01:22:37] d2.utils.events INFO:  eta: 12:51:56  iter: 6399  total_loss: 3.49  loss_sem_seg: 2.149  loss_relation: 0.2334  loss_center: 0.6732  loss_offset: 0.4077  time: 1.0642  data_time: 0.0595  lr: 0.00044202  max_mem: 19293M
[10/10 01:22:58] d2.utils.events INFO:  eta: 12:51:30  iter: 6419  total_loss: 3.579  loss_sem_seg: 2.219  loss_relation: 0.2232  loss_center: 0.7475  loss_offset: 0.4127  time: 1.0642  data_time: 0.0641  lr: 0.00044184  max_mem: 19293M
[10/10 01:23:19] d2.utils.events INFO:  eta: 12:51:11  iter: 6439  total_loss: 3.671  loss_sem_seg: 2.341  loss_relation: 0.2429  loss_center: 0.667  loss_offset: 0.4511  time: 1.0642  data_time: 0.0610  lr: 0.00044166  max_mem: 19293M
[10/10 01:23:40] d2.utils.events INFO:  eta: 12:50:51  iter: 6459  total_loss: 3.859  loss_sem_seg: 2.439  loss_relation: 0.2469  loss_center: 0.7316  loss_offset: 0.4388  time: 1.0642  data_time: 0.0600  lr: 0.00044147  max_mem: 19293M
[10/10 01:24:02] d2.utils.events INFO:  eta: 12:50:25  iter: 6479  total_loss: 3.735  loss_sem_seg: 2.271  loss_relation: 0.2406  loss_center: 0.7128  loss_offset: 0.4136  time: 1.0642  data_time: 0.0582  lr: 0.00044129  max_mem: 19293M
[10/10 01:24:23] d2.utils.events INFO:  eta: 12:50:00  iter: 6499  total_loss: 3.463  loss_sem_seg: 2.141  loss_relation: 0.2336  loss_center: 0.7023  loss_offset: 0.4048  time: 1.0642  data_time: 0.0619  lr: 0.00044111  max_mem: 19293M
[10/10 01:24:44] d2.utils.events INFO:  eta: 12:49:47  iter: 6519  total_loss: 3.525  loss_sem_seg: 2.071  loss_relation: 0.2315  loss_center: 0.7132  loss_offset: 0.3933  time: 1.0642  data_time: 0.0640  lr: 0.00044093  max_mem: 19293M
[10/10 01:25:05] d2.utils.events INFO:  eta: 12:49:08  iter: 6539  total_loss: 3.377  loss_sem_seg: 2.051  loss_relation: 0.2202  loss_center: 0.6416  loss_offset: 0.3744  time: 1.0642  data_time: 0.0615  lr: 0.00044074  max_mem: 19293M
[10/10 01:25:27] d2.utils.events INFO:  eta: 12:48:56  iter: 6559  total_loss: 3.32  loss_sem_seg: 2.038  loss_relation: 0.2272  loss_center: 0.7186  loss_offset: 0.4142  time: 1.0642  data_time: 0.0612  lr: 0.00044056  max_mem: 19293M
[10/10 01:25:48] d2.utils.events INFO:  eta: 12:48:31  iter: 6579  total_loss: 3.455  loss_sem_seg: 2.12  loss_relation: 0.2333  loss_center: 0.7524  loss_offset: 0.4224  time: 1.0642  data_time: 0.0631  lr: 0.00044038  max_mem: 19293M
[10/10 01:26:09] d2.utils.events INFO:  eta: 12:48:02  iter: 6599  total_loss: 3.403  loss_sem_seg: 2.049  loss_relation: 0.2289  loss_center: 0.716  loss_offset: 0.4085  time: 1.0641  data_time: 0.0606  lr: 0.0004402  max_mem: 19293M
[10/10 01:26:30] d2.utils.events INFO:  eta: 12:47:33  iter: 6619  total_loss: 3.508  loss_sem_seg: 2.161  loss_relation: 0.2324  loss_center: 0.6907  loss_offset: 0.4176  time: 1.0641  data_time: 0.0579  lr: 0.00044001  max_mem: 19293M
[10/10 01:26:52] d2.utils.events INFO:  eta: 12:47:12  iter: 6639  total_loss: 3.449  loss_sem_seg: 2.064  loss_relation: 0.2302  loss_center: 0.683  loss_offset: 0.3941  time: 1.0641  data_time: 0.0625  lr: 0.00043983  max_mem: 19293M
[10/10 01:27:13] d2.utils.events INFO:  eta: 12:46:45  iter: 6659  total_loss: 3.722  loss_sem_seg: 2.307  loss_relation: 0.2447  loss_center: 0.6856  loss_offset: 0.4283  time: 1.0641  data_time: 0.0543  lr: 0.00043965  max_mem: 19293M
[10/10 01:27:34] d2.utils.events INFO:  eta: 12:46:31  iter: 6679  total_loss: 3.864  loss_sem_seg: 2.44  loss_relation: 0.2454  loss_center: 0.7689  loss_offset: 0.4465  time: 1.0641  data_time: 0.0610  lr: 0.00043947  max_mem: 19293M
[10/10 01:27:55] d2.utils.events INFO:  eta: 12:46:05  iter: 6699  total_loss: 4.129  loss_sem_seg: 2.77  loss_relation: 0.245  loss_center: 0.729  loss_offset: 0.4347  time: 1.0641  data_time: 0.0589  lr: 0.00043928  max_mem: 19293M
[10/10 01:28:17] d2.utils.events INFO:  eta: 12:45:36  iter: 6719  total_loss: 4.739  loss_sem_seg: 3.189  loss_relation: 0.2681  loss_center: 0.7361  loss_offset: 0.4593  time: 1.0641  data_time: 0.0561  lr: 0.0004391  max_mem: 19293M
[10/10 01:28:38] d2.utils.events INFO:  eta: 12:45:06  iter: 6739  total_loss: 4.386  loss_sem_seg: 2.849  loss_relation: 0.2595  loss_center: 0.7563  loss_offset: 0.4463  time: 1.0641  data_time: 0.0594  lr: 0.00043892  max_mem: 19293M
[10/10 01:28:59] d2.utils.events INFO:  eta: 12:44:50  iter: 6759  total_loss: 4.107  loss_sem_seg: 2.756  loss_relation: 0.2473  loss_center: 0.7029  loss_offset: 0.4554  time: 1.0641  data_time: 0.0609  lr: 0.00043874  max_mem: 19293M
[10/10 01:29:21] d2.utils.events INFO:  eta: 12:44:39  iter: 6779  total_loss: 4.128  loss_sem_seg: 2.655  loss_relation: 0.2369  loss_center: 0.7166  loss_offset: 0.4302  time: 1.0641  data_time: 0.0653  lr: 0.00043855  max_mem: 19293M
[10/10 01:29:42] d2.utils.events INFO:  eta: 12:44:01  iter: 6799  total_loss: 3.917  loss_sem_seg: 2.505  loss_relation: 0.2343  loss_center: 0.6898  loss_offset: 0.4049  time: 1.0641  data_time: 0.0593  lr: 0.00043837  max_mem: 19293M
[10/10 01:30:03] d2.utils.events INFO:  eta: 12:43:36  iter: 6819  total_loss: 3.759  loss_sem_seg: 2.384  loss_relation: 0.2396  loss_center: 0.7218  loss_offset: 0.4117  time: 1.0641  data_time: 0.0603  lr: 0.00043819  max_mem: 19293M
[10/10 01:30:24] d2.utils.events INFO:  eta: 12:43:17  iter: 6839  total_loss: 3.864  loss_sem_seg: 2.459  loss_relation: 0.2349  loss_center: 0.6853  loss_offset: 0.4376  time: 1.0641  data_time: 0.0602  lr: 0.00043801  max_mem: 19293M
[10/10 01:30:45] d2.utils.events INFO:  eta: 12:42:57  iter: 6859  total_loss: 3.55  loss_sem_seg: 2.145  loss_relation: 0.2275  loss_center: 0.6871  loss_offset: 0.4633  time: 1.0641  data_time: 0.0594  lr: 0.00043782  max_mem: 19293M
[10/10 01:31:07] d2.utils.events INFO:  eta: 12:42:24  iter: 6879  total_loss: 3.625  loss_sem_seg: 2.248  loss_relation: 0.2327  loss_center: 0.6732  loss_offset: 0.4356  time: 1.0641  data_time: 0.0582  lr: 0.00043764  max_mem: 19293M
[10/10 01:31:28] d2.utils.events INFO:  eta: 12:41:57  iter: 6899  total_loss: 3.682  loss_sem_seg: 2.242  loss_relation: 0.2348  loss_center: 0.6686  loss_offset: 0.4425  time: 1.0641  data_time: 0.0620  lr: 0.00043746  max_mem: 19293M
[10/10 01:31:49] d2.utils.events INFO:  eta: 12:41:33  iter: 6919  total_loss: 3.671  loss_sem_seg: 2.263  loss_relation: 0.2393  loss_center: 0.6889  loss_offset: 0.4503  time: 1.0641  data_time: 0.0632  lr: 0.00043727  max_mem: 19293M
[10/10 01:32:10] d2.utils.events INFO:  eta: 12:41:16  iter: 6939  total_loss: 3.603  loss_sem_seg: 2.185  loss_relation: 0.233  loss_center: 0.7374  loss_offset: 0.4242  time: 1.0640  data_time: 0.0537  lr: 0.00043709  max_mem: 19293M
[10/10 01:32:32] d2.utils.events INFO:  eta: 12:40:57  iter: 6959  total_loss: 3.742  loss_sem_seg: 2.242  loss_relation: 0.2402  loss_center: 0.7573  loss_offset: 0.4182  time: 1.0640  data_time: 0.0586  lr: 0.00043691  max_mem: 19293M
[10/10 01:32:53] d2.utils.events INFO:  eta: 12:40:36  iter: 6979  total_loss: 3.631  loss_sem_seg: 2.352  loss_relation: 0.2302  loss_center: 0.783  loss_offset: 0.4233  time: 1.0640  data_time: 0.0625  lr: 0.00043673  max_mem: 19293M
[10/10 01:33:14] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0006999.pth
[10/10 01:33:22] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 01:33:22] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 01:33:22] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 01:33:22] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 01:33:37] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0021 s/iter. Inference: 0.0715 s/iter. Eval: 0.0283 s/iter. Total: 0.1019 s/iter. ETA=0:00:24
[10/10 01:33:42] d2.evaluation.evaluator INFO: Inference done 64/250. Dataloading: 0.0012 s/iter. Inference: 0.0660 s/iter. Eval: 0.0286 s/iter. Total: 0.0959 s/iter. ETA=0:00:17
[10/10 01:33:47] d2.evaluation.evaluator INFO: Inference done 120/250. Dataloading: 0.0014 s/iter. Inference: 0.0630 s/iter. Eval: 0.0283 s/iter. Total: 0.0928 s/iter. ETA=0:00:12
[10/10 01:33:52] d2.evaluation.evaluator INFO: Inference done 174/250. Dataloading: 0.0014 s/iter. Inference: 0.0634 s/iter. Eval: 0.0283 s/iter. Total: 0.0931 s/iter. ETA=0:00:07
[10/10 01:33:57] d2.evaluation.evaluator INFO: Inference done 232/250. Dataloading: 0.0014 s/iter. Inference: 0.0625 s/iter. Eval: 0.0278 s/iter. Total: 0.0917 s/iter. ETA=0:00:01
[10/10 01:33:59] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.782382 (0.092989 s / iter per device, on 2 devices)
[10/10 01:33:59] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062417 s / iter per device, on 2 devices)
[10/10 01:33:59] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalf_dhgvwx ...
[10/10 01:34:04] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 14.895989390980862
[10/10 01:34:04] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.619 | 42.602 | 15.638 |      129      |
| Things | 8.938  | 40.545 | 12.329 |      76       |
| Stuff  | 15.463 | 45.553 | 20.383 |      53       |
[10/10 01:34:04] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 01:34:04] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 01:34:04] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 01:34:04] d2.evaluation.testing INFO: copypaste: 11.6185,42.6025,15.6377,8.9376,40.5448,12.3288,15.4629,45.5531,20.3825
[10/10 01:34:04] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 01:34:04] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 01:34:04] d2.evaluation.testing INFO: copypaste: 0.1490
[10/10 01:34:04] d2.utils.events INFO:  eta: 12:40:23  iter: 6999  total_loss: 3.701  loss_sem_seg: 2.26  loss_relation: 0.2457  loss_center: 0.695  loss_offset: 0.4268  time: 1.0641  data_time: 0.0672  lr: 0.00043654  max_mem: 19293M
[10/10 01:34:04] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/10 01:34:10] d2.engine.hooks INFO: Saved best model as latest eval score for relation_mean_recall/mean_recall is 0.14896, better than last best score 0.14523 @ iteration 4999.
[10/10 01:34:32] d2.utils.events INFO:  eta: 12:40:09  iter: 7019  total_loss: 3.706  loss_sem_seg: 2.267  loss_relation: 0.2338  loss_center: 0.7064  loss_offset: 0.4265  time: 1.0640  data_time: 0.0657  lr: 0.00043636  max_mem: 19293M
[10/10 01:34:53] d2.utils.events INFO:  eta: 12:39:47  iter: 7039  total_loss: 3.349  loss_sem_seg: 2.045  loss_relation: 0.2337  loss_center: 0.6779  loss_offset: 0.4334  time: 1.0640  data_time: 0.0613  lr: 0.00043618  max_mem: 19293M
[10/10 01:35:14] d2.utils.events INFO:  eta: 12:39:23  iter: 7059  total_loss: 3.221  loss_sem_seg: 1.97  loss_relation: 0.223  loss_center: 0.6517  loss_offset: 0.4181  time: 1.0640  data_time: 0.0600  lr: 0.000436  max_mem: 19293M
[10/10 01:35:35] d2.utils.events INFO:  eta: 12:39:05  iter: 7079  total_loss: 3.382  loss_sem_seg: 2.094  loss_relation: 0.223  loss_center: 0.671  loss_offset: 0.4012  time: 1.0640  data_time: 0.0552  lr: 0.00043581  max_mem: 19293M
[10/10 01:35:57] d2.utils.events INFO:  eta: 12:38:43  iter: 7099  total_loss: 3.355  loss_sem_seg: 1.98  loss_relation: 0.2309  loss_center: 0.6834  loss_offset: 0.4013  time: 1.0640  data_time: 0.0590  lr: 0.00043563  max_mem: 19293M
[10/10 01:36:18] d2.utils.events INFO:  eta: 12:38:20  iter: 7119  total_loss: 3.399  loss_sem_seg: 2.172  loss_relation: 0.2334  loss_center: 0.6979  loss_offset: 0.4254  time: 1.0640  data_time: 0.0582  lr: 0.00043545  max_mem: 19293M
[10/10 01:36:39] d2.utils.events INFO:  eta: 12:38:06  iter: 7139  total_loss: 3.414  loss_sem_seg: 2.038  loss_relation: 0.2306  loss_center: 0.7449  loss_offset: 0.4219  time: 1.0640  data_time: 0.0600  lr: 0.00043526  max_mem: 19293M
[10/10 01:37:01] d2.utils.events INFO:  eta: 12:37:56  iter: 7159  total_loss: 3.456  loss_sem_seg: 2.027  loss_relation: 0.2265  loss_center: 0.7165  loss_offset: 0.437  time: 1.0640  data_time: 0.0636  lr: 0.00043508  max_mem: 19293M
[10/10 01:37:22] d2.utils.events INFO:  eta: 12:37:34  iter: 7179  total_loss: 3.56  loss_sem_seg: 2.142  loss_relation: 0.2261  loss_center: 0.6791  loss_offset: 0.4212  time: 1.0641  data_time: 0.0645  lr: 0.0004349  max_mem: 19293M
[10/10 01:37:44] d2.utils.events INFO:  eta: 12:37:13  iter: 7199  total_loss: 3.693  loss_sem_seg: 2.159  loss_relation: 0.2242  loss_center: 0.7291  loss_offset: 0.4648  time: 1.0641  data_time: 0.0616  lr: 0.00043472  max_mem: 19293M
[10/10 01:38:05] d2.utils.events INFO:  eta: 12:36:50  iter: 7219  total_loss: 3.792  loss_sem_seg: 2.368  loss_relation: 0.2468  loss_center: 0.7271  loss_offset: 0.4249  time: 1.0641  data_time: 0.0655  lr: 0.00043453  max_mem: 19293M
[10/10 01:38:26] d2.utils.events INFO:  eta: 12:36:31  iter: 7239  total_loss: 3.549  loss_sem_seg: 2.369  loss_relation: 0.2376  loss_center: 0.709  loss_offset: 0.408  time: 1.0641  data_time: 0.0600  lr: 0.00043435  max_mem: 19293M
[10/10 01:38:48] d2.utils.events INFO:  eta: 12:36:19  iter: 7259  total_loss: 3.488  loss_sem_seg: 2.081  loss_relation: 0.2313  loss_center: 0.6834  loss_offset: 0.4042  time: 1.0641  data_time: 0.0585  lr: 0.00043417  max_mem: 19293M
[10/10 01:39:09] d2.utils.events INFO:  eta: 12:36:02  iter: 7279  total_loss: 3.528  loss_sem_seg: 2.173  loss_relation: 0.2378  loss_center: 0.6977  loss_offset: 0.3833  time: 1.0641  data_time: 0.0661  lr: 0.00043398  max_mem: 19293M
[10/10 01:39:30] d2.utils.events INFO:  eta: 12:35:48  iter: 7299  total_loss: 3.552  loss_sem_seg: 2.245  loss_relation: 0.2332  loss_center: 0.6976  loss_offset: 0.3973  time: 1.0641  data_time: 0.0616  lr: 0.0004338  max_mem: 19293M
[10/10 01:39:52] d2.utils.events INFO:  eta: 12:35:20  iter: 7319  total_loss: 3.619  loss_sem_seg: 2.286  loss_relation: 0.2253  loss_center: 0.7068  loss_offset: 0.4298  time: 1.0641  data_time: 0.0571  lr: 0.00043362  max_mem: 19293M
[10/10 01:40:13] d2.utils.events INFO:  eta: 12:34:58  iter: 7339  total_loss: 3.421  loss_sem_seg: 2.017  loss_relation: 0.2245  loss_center: 0.7162  loss_offset: 0.4358  time: 1.0641  data_time: 0.0594  lr: 0.00043344  max_mem: 19293M
[10/10 01:40:34] d2.utils.events INFO:  eta: 12:34:32  iter: 7359  total_loss: 3.234  loss_sem_seg: 1.99  loss_relation: 0.2267  loss_center: 0.7012  loss_offset: 0.3819  time: 1.0641  data_time: 0.0686  lr: 0.00043325  max_mem: 19293M
[10/10 01:40:56] d2.utils.events INFO:  eta: 12:34:20  iter: 7379  total_loss: 3.326  loss_sem_seg: 2.073  loss_relation: 0.2241  loss_center: 0.7069  loss_offset: 0.4053  time: 1.0641  data_time: 0.0659  lr: 0.00043307  max_mem: 19293M
[10/10 01:41:17] d2.utils.events INFO:  eta: 12:33:55  iter: 7399  total_loss: 3.564  loss_sem_seg: 2.088  loss_relation: 0.2231  loss_center: 0.735  loss_offset: 0.3957  time: 1.0641  data_time: 0.0602  lr: 0.00043289  max_mem: 19293M
[10/10 01:41:38] d2.utils.events INFO:  eta: 12:33:42  iter: 7419  total_loss: 3.213  loss_sem_seg: 1.982  loss_relation: 0.2201  loss_center: 0.6574  loss_offset: 0.4162  time: 1.0641  data_time: 0.0634  lr: 0.0004327  max_mem: 19293M
[10/10 01:41:59] d2.utils.events INFO:  eta: 12:33:21  iter: 7439  total_loss: 3.335  loss_sem_seg: 2.027  loss_relation: 0.2275  loss_center: 0.7313  loss_offset: 0.4181  time: 1.0641  data_time: 0.0596  lr: 0.00043252  max_mem: 19293M
[10/10 01:42:21] d2.utils.events INFO:  eta: 12:33:03  iter: 7459  total_loss: 3.291  loss_sem_seg: 1.975  loss_relation: 0.2353  loss_center: 0.6499  loss_offset: 0.3795  time: 1.0641  data_time: 0.0620  lr: 0.00043234  max_mem: 19293M
[10/10 01:42:42] d2.utils.events INFO:  eta: 12:32:44  iter: 7479  total_loss: 3.412  loss_sem_seg: 2.075  loss_relation: 0.2271  loss_center: 0.6667  loss_offset: 0.3873  time: 1.0641  data_time: 0.0596  lr: 0.00043216  max_mem: 19293M
[10/10 01:43:03] d2.utils.events INFO:  eta: 12:32:27  iter: 7499  total_loss: 3.428  loss_sem_seg: 2.065  loss_relation: 0.2235  loss_center: 0.7102  loss_offset: 0.4182  time: 1.0641  data_time: 0.0633  lr: 0.00043197  max_mem: 19293M
[10/10 01:43:25] d2.utils.events INFO:  eta: 12:32:03  iter: 7519  total_loss: 3.334  loss_sem_seg: 1.979  loss_relation: 0.2172  loss_center: 0.6942  loss_offset: 0.4197  time: 1.0641  data_time: 0.0655  lr: 0.00043179  max_mem: 19293M
[10/10 01:43:46] d2.utils.events INFO:  eta: 12:31:46  iter: 7539  total_loss: 3.264  loss_sem_seg: 1.903  loss_relation: 0.2302  loss_center: 0.6691  loss_offset: 0.4239  time: 1.0641  data_time: 0.0637  lr: 0.00043161  max_mem: 19293M
[10/10 01:44:07] d2.utils.events INFO:  eta: 12:31:24  iter: 7559  total_loss: 3.223  loss_sem_seg: 1.996  loss_relation: 0.2201  loss_center: 0.6652  loss_offset: 0.4014  time: 1.0641  data_time: 0.0572  lr: 0.00043142  max_mem: 19293M
[10/10 01:44:28] d2.utils.events INFO:  eta: 12:30:58  iter: 7579  total_loss: 3.802  loss_sem_seg: 2.366  loss_relation: 0.2405  loss_center: 0.7238  loss_offset: 0.3958  time: 1.0641  data_time: 0.0597  lr: 0.00043124  max_mem: 19293M
[10/10 01:44:50] d2.utils.events INFO:  eta: 12:30:38  iter: 7599  total_loss: 3.43  loss_sem_seg: 2.049  loss_relation: 0.2214  loss_center: 0.6938  loss_offset: 0.3963  time: 1.0641  data_time: 0.0606  lr: 0.00043106  max_mem: 19293M
[10/10 01:45:11] d2.utils.events INFO:  eta: 12:30:15  iter: 7619  total_loss: 3.499  loss_sem_seg: 2.109  loss_relation: 0.2214  loss_center: 0.7096  loss_offset: 0.4512  time: 1.0641  data_time: 0.0548  lr: 0.00043087  max_mem: 19293M
[10/10 01:45:32] d2.utils.events INFO:  eta: 12:29:54  iter: 7639  total_loss: 3.273  loss_sem_seg: 1.94  loss_relation: 0.227  loss_center: 0.6455  loss_offset: 0.3971  time: 1.0641  data_time: 0.0583  lr: 0.00043069  max_mem: 19293M
[10/10 01:45:53] d2.utils.events INFO:  eta: 12:29:37  iter: 7659  total_loss: 3.316  loss_sem_seg: 2.046  loss_relation: 0.2268  loss_center: 0.698  loss_offset: 0.3706  time: 1.0641  data_time: 0.0595  lr: 0.00043051  max_mem: 19293M
[10/10 01:46:14] d2.utils.events INFO:  eta: 12:29:17  iter: 7679  total_loss: 3.225  loss_sem_seg: 1.928  loss_relation: 0.2211  loss_center: 0.6234  loss_offset: 0.4039  time: 1.0641  data_time: 0.0577  lr: 0.00043033  max_mem: 19293M
[10/10 01:46:36] d2.utils.events INFO:  eta: 12:28:55  iter: 7699  total_loss: 3.313  loss_sem_seg: 1.933  loss_relation: 0.2213  loss_center: 0.6551  loss_offset: 0.3961  time: 1.0641  data_time: 0.0565  lr: 0.00043014  max_mem: 19293M
[10/10 01:46:57] d2.utils.events INFO:  eta: 12:28:39  iter: 7719  total_loss: 3.337  loss_sem_seg: 2.028  loss_relation: 0.2242  loss_center: 0.6667  loss_offset: 0.4011  time: 1.0641  data_time: 0.0617  lr: 0.00042996  max_mem: 19293M
[10/10 01:47:18] d2.utils.events INFO:  eta: 12:28:15  iter: 7739  total_loss: 3.45  loss_sem_seg: 2.104  loss_relation: 0.2311  loss_center: 0.7419  loss_offset: 0.3934  time: 1.0641  data_time: 0.0632  lr: 0.00042978  max_mem: 19293M
[10/10 01:47:40] d2.utils.events INFO:  eta: 12:27:55  iter: 7759  total_loss: 3.385  loss_sem_seg: 1.995  loss_relation: 0.2298  loss_center: 0.7058  loss_offset: 0.4327  time: 1.0641  data_time: 0.0616  lr: 0.00042959  max_mem: 19293M
[10/10 01:48:01] d2.utils.events INFO:  eta: 12:27:32  iter: 7779  total_loss: 3.488  loss_sem_seg: 2.166  loss_relation: 0.2211  loss_center: 0.6931  loss_offset: 0.4202  time: 1.0641  data_time: 0.0631  lr: 0.00042941  max_mem: 19293M
[10/10 01:48:22] d2.utils.events INFO:  eta: 12:27:10  iter: 7799  total_loss: 3.653  loss_sem_seg: 2.367  loss_relation: 0.2355  loss_center: 0.697  loss_offset: 0.4178  time: 1.0640  data_time: 0.0580  lr: 0.00042923  max_mem: 19293M
[10/10 01:48:43] d2.utils.events INFO:  eta: 12:26:50  iter: 7819  total_loss: 3.522  loss_sem_seg: 2.161  loss_relation: 0.2288  loss_center: 0.6589  loss_offset: 0.4089  time: 1.0640  data_time: 0.0640  lr: 0.00042904  max_mem: 19293M
[10/10 01:49:05] d2.utils.events INFO:  eta: 12:26:27  iter: 7839  total_loss: 3.573  loss_sem_seg: 2.105  loss_relation: 0.2243  loss_center: 0.7291  loss_offset: 0.4028  time: 1.0641  data_time: 0.0616  lr: 0.00042886  max_mem: 19293M
[10/10 01:49:26] d2.utils.events INFO:  eta: 12:26:05  iter: 7859  total_loss: 3.543  loss_sem_seg: 2.127  loss_relation: 0.2342  loss_center: 0.6975  loss_offset: 0.3749  time: 1.0641  data_time: 0.0664  lr: 0.00042868  max_mem: 19293M
[10/10 01:49:47] d2.utils.events INFO:  eta: 12:25:45  iter: 7879  total_loss: 3.49  loss_sem_seg: 2.092  loss_relation: 0.2269  loss_center: 0.7469  loss_offset: 0.4217  time: 1.0640  data_time: 0.0589  lr: 0.0004285  max_mem: 19293M
[10/10 01:50:08] d2.utils.events INFO:  eta: 12:25:22  iter: 7899  total_loss: 3.241  loss_sem_seg: 1.901  loss_relation: 0.2157  loss_center: 0.7036  loss_offset: 0.3836  time: 1.0640  data_time: 0.0590  lr: 0.00042831  max_mem: 19293M
[10/10 01:50:30] d2.utils.events INFO:  eta: 12:25:01  iter: 7919  total_loss: 2.99  loss_sem_seg: 1.778  loss_relation: 0.2228  loss_center: 0.6093  loss_offset: 0.3688  time: 1.0640  data_time: 0.0595  lr: 0.00042813  max_mem: 19293M
[10/10 01:50:51] d2.utils.events INFO:  eta: 12:24:41  iter: 7939  total_loss: 3.214  loss_sem_seg: 1.91  loss_relation: 0.2191  loss_center: 0.7132  loss_offset: 0.4072  time: 1.0640  data_time: 0.0601  lr: 0.00042795  max_mem: 19293M
[10/10 01:51:12] d2.utils.events INFO:  eta: 12:24:20  iter: 7959  total_loss: 3.376  loss_sem_seg: 2.092  loss_relation: 0.2219  loss_center: 0.6874  loss_offset: 0.4303  time: 1.0640  data_time: 0.0573  lr: 0.00042776  max_mem: 19293M
[10/10 01:51:33] d2.utils.events INFO:  eta: 12:23:59  iter: 7979  total_loss: 3.442  loss_sem_seg: 2.086  loss_relation: 0.222  loss_center: 0.7115  loss_offset: 0.4475  time: 1.0640  data_time: 0.0657  lr: 0.00042758  max_mem: 19293M
[10/10 01:51:55] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0007999.pth
[10/10 01:51:56] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 01:51:56] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 01:51:56] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 01:51:56] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 01:52:11] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0020 s/iter. Inference: 0.0662 s/iter. Eval: 0.0280 s/iter. Total: 0.0962 s/iter. ETA=0:00:22
[10/10 01:52:16] d2.evaluation.evaluator INFO: Inference done 64/250. Dataloading: 0.0013 s/iter. Inference: 0.0656 s/iter. Eval: 0.0282 s/iter. Total: 0.0952 s/iter. ETA=0:00:17
[10/10 01:52:21] d2.evaluation.evaluator INFO: Inference done 120/250. Dataloading: 0.0013 s/iter. Inference: 0.0636 s/iter. Eval: 0.0281 s/iter. Total: 0.0931 s/iter. ETA=0:00:12
[10/10 01:52:26] d2.evaluation.evaluator INFO: Inference done 175/250. Dataloading: 0.0014 s/iter. Inference: 0.0632 s/iter. Eval: 0.0282 s/iter. Total: 0.0929 s/iter. ETA=0:00:06
[10/10 01:52:31] d2.evaluation.evaluator INFO: Inference done 232/250. Dataloading: 0.0014 s/iter. Inference: 0.0625 s/iter. Eval: 0.0278 s/iter. Total: 0.0917 s/iter. ETA=0:00:01
[10/10 01:52:33] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.856672 (0.093293 s / iter per device, on 2 devices)
[10/10 01:52:33] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062638 s / iter per device, on 2 devices)
[10/10 01:52:33] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalk2xavgpk ...
[10/10 01:52:38] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 15.04158335245096
[10/10 01:52:38] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.147 | 42.632 | 14.961 |      130      |
| Things | 8.738  | 40.005 | 12.195 |      77       |
| Stuff  | 14.646 | 46.448 | 18.979 |      53       |
[10/10 01:52:38] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 01:52:38] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 01:52:38] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 01:52:38] d2.evaluation.testing INFO: copypaste: 11.1468,42.6318,14.9606,8.7381,40.0051,12.1947,14.6462,46.4480,18.9790
[10/10 01:52:38] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 01:52:38] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 01:52:38] d2.evaluation.testing INFO: copypaste: 0.1504
[10/10 01:52:38] d2.utils.events INFO:  eta: 12:23:34  iter: 7999  total_loss: 3.459  loss_sem_seg: 2.049  loss_relation: 0.2257  loss_center: 0.7238  loss_offset: 0.4203  time: 1.0640  data_time: 0.0581  lr: 0.0004274  max_mem: 19293M
[10/10 01:52:38] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/10 01:52:45] d2.engine.hooks INFO: Saved best model as latest eval score for relation_mean_recall/mean_recall is 0.15042, better than last best score 0.14896 @ iteration 6999.
[10/10 01:53:06] d2.utils.events INFO:  eta: 12:23:12  iter: 8019  total_loss: 3.558  loss_sem_seg: 2.211  loss_relation: 0.2272  loss_center: 0.6819  loss_offset: 0.3815  time: 1.0640  data_time: 0.0625  lr: 0.00042721  max_mem: 19293M
[10/10 01:53:28] d2.utils.events INFO:  eta: 12:22:45  iter: 8039  total_loss: 3.365  loss_sem_seg: 2.064  loss_relation: 0.2241  loss_center: 0.7043  loss_offset: 0.3775  time: 1.0640  data_time: 0.0588  lr: 0.00042703  max_mem: 19293M
[10/10 01:53:49] d2.utils.events INFO:  eta: 12:22:24  iter: 8059  total_loss: 3.421  loss_sem_seg: 2.071  loss_relation: 0.2255  loss_center: 0.7035  loss_offset: 0.4153  time: 1.0640  data_time: 0.0591  lr: 0.00042685  max_mem: 19293M
[10/10 01:54:10] d2.utils.events INFO:  eta: 12:22:03  iter: 8079  total_loss: 3.338  loss_sem_seg: 2.034  loss_relation: 0.2253  loss_center: 0.6745  loss_offset: 0.4491  time: 1.0640  data_time: 0.0613  lr: 0.00042666  max_mem: 19293M
[10/10 01:54:31] d2.utils.events INFO:  eta: 12:21:40  iter: 8099  total_loss: 3.357  loss_sem_seg: 2.032  loss_relation: 0.2367  loss_center: 0.6622  loss_offset: 0.4097  time: 1.0640  data_time: 0.0596  lr: 0.00042648  max_mem: 19293M
[10/10 01:54:53] d2.utils.events INFO:  eta: 12:21:13  iter: 8119  total_loss: 3.317  loss_sem_seg: 1.972  loss_relation: 0.2208  loss_center: 0.6993  loss_offset: 0.3888  time: 1.0640  data_time: 0.0554  lr: 0.0004263  max_mem: 19293M
[10/10 01:55:14] d2.utils.events INFO:  eta: 12:20:45  iter: 8139  total_loss: 3.521  loss_sem_seg: 2.124  loss_relation: 0.2236  loss_center: 0.7196  loss_offset: 0.3877  time: 1.0640  data_time: 0.0597  lr: 0.00042611  max_mem: 19293M
[10/10 01:55:35] d2.utils.events INFO:  eta: 12:20:06  iter: 8159  total_loss: 3.558  loss_sem_seg: 2.158  loss_relation: 0.2292  loss_center: 0.6776  loss_offset: 0.3931  time: 1.0640  data_time: 0.0555  lr: 0.00042593  max_mem: 19293M
[10/10 01:55:56] d2.utils.events INFO:  eta: 12:19:42  iter: 8179  total_loss: 3.187  loss_sem_seg: 1.905  loss_relation: 0.2062  loss_center: 0.6476  loss_offset: 0.4387  time: 1.0640  data_time: 0.0582  lr: 0.00042575  max_mem: 19293M
[10/10 01:56:18] d2.utils.events INFO:  eta: 12:19:20  iter: 8199  total_loss: 3.002  loss_sem_seg: 1.752  loss_relation: 0.218  loss_center: 0.668  loss_offset: 0.3488  time: 1.0640  data_time: 0.0587  lr: 0.00042556  max_mem: 19293M
[10/10 01:56:39] d2.utils.events INFO:  eta: 12:18:59  iter: 8219  total_loss: 3.229  loss_sem_seg: 1.896  loss_relation: 0.2103  loss_center: 0.6977  loss_offset: 0.4115  time: 1.0640  data_time: 0.0604  lr: 0.00042538  max_mem: 19293M
[10/10 01:57:00] d2.utils.events INFO:  eta: 12:18:38  iter: 8239  total_loss: 3.145  loss_sem_seg: 1.894  loss_relation: 0.2256  loss_center: 0.6682  loss_offset: 0.3886  time: 1.0640  data_time: 0.0595  lr: 0.0004252  max_mem: 19293M
[10/10 01:57:21] d2.utils.events INFO:  eta: 12:18:15  iter: 8259  total_loss: 3.337  loss_sem_seg: 1.928  loss_relation: 0.2223  loss_center: 0.7157  loss_offset: 0.3882  time: 1.0639  data_time: 0.0621  lr: 0.00042501  max_mem: 19293M
[10/10 01:57:43] d2.utils.events INFO:  eta: 12:17:47  iter: 8279  total_loss: 3.189  loss_sem_seg: 1.897  loss_relation: 0.2209  loss_center: 0.7151  loss_offset: 0.3876  time: 1.0640  data_time: 0.0611  lr: 0.00042483  max_mem: 19293M
[10/10 01:58:04] d2.utils.events INFO:  eta: 12:17:19  iter: 8299  total_loss: 3.311  loss_sem_seg: 1.984  loss_relation: 0.2273  loss_center: 0.7402  loss_offset: 0.3881  time: 1.0640  data_time: 0.0621  lr: 0.00042465  max_mem: 19293M
[10/10 01:58:25] d2.utils.events INFO:  eta: 12:16:56  iter: 8319  total_loss: 3.146  loss_sem_seg: 1.862  loss_relation: 0.2189  loss_center: 0.6892  loss_offset: 0.4251  time: 1.0639  data_time: 0.0598  lr: 0.00042446  max_mem: 19293M
[10/10 01:58:46] d2.utils.events INFO:  eta: 12:16:34  iter: 8339  total_loss: 3.317  loss_sem_seg: 2.062  loss_relation: 0.2111  loss_center: 0.6239  loss_offset: 0.4105  time: 1.0639  data_time: 0.0582  lr: 0.00042428  max_mem: 19293M
[10/10 01:59:08] d2.utils.events INFO:  eta: 12:16:11  iter: 8359  total_loss: 3.23  loss_sem_seg: 1.852  loss_relation: 0.2173  loss_center: 0.6798  loss_offset: 0.3922  time: 1.0639  data_time: 0.0598  lr: 0.0004241  max_mem: 19293M
[10/10 01:59:29] d2.utils.events INFO:  eta: 12:15:51  iter: 8379  total_loss: 3.437  loss_sem_seg: 2.111  loss_relation: 0.2198  loss_center: 0.6836  loss_offset: 0.4126  time: 1.0639  data_time: 0.0627  lr: 0.00042391  max_mem: 19293M
[10/10 01:59:50] d2.utils.events INFO:  eta: 12:15:32  iter: 8399  total_loss: 3.282  loss_sem_seg: 1.978  loss_relation: 0.2191  loss_center: 0.6376  loss_offset: 0.3968  time: 1.0639  data_time: 0.0613  lr: 0.00042373  max_mem: 19293M
[10/10 02:00:11] d2.utils.events INFO:  eta: 12:15:09  iter: 8419  total_loss: 3.502  loss_sem_seg: 2.17  loss_relation: 0.2237  loss_center: 0.7651  loss_offset: 0.423  time: 1.0639  data_time: 0.0605  lr: 0.00042355  max_mem: 19293M
[10/10 02:00:33] d2.utils.events INFO:  eta: 12:14:49  iter: 8439  total_loss: 3.252  loss_sem_seg: 1.94  loss_relation: 0.2228  loss_center: 0.6401  loss_offset: 0.3959  time: 1.0639  data_time: 0.0625  lr: 0.00042336  max_mem: 19293M
[10/10 02:00:54] d2.utils.events INFO:  eta: 12:14:26  iter: 8459  total_loss: 3.231  loss_sem_seg: 1.92  loss_relation: 0.2136  loss_center: 0.6972  loss_offset: 0.4097  time: 1.0639  data_time: 0.0663  lr: 0.00042318  max_mem: 19293M
[10/10 02:01:15] d2.utils.events INFO:  eta: 12:14:05  iter: 8479  total_loss: 3.296  loss_sem_seg: 1.999  loss_relation: 0.2153  loss_center: 0.7034  loss_offset: 0.3991  time: 1.0639  data_time: 0.0625  lr: 0.000423  max_mem: 19293M
[10/10 02:01:37] d2.utils.events INFO:  eta: 12:13:37  iter: 8499  total_loss: 2.882  loss_sem_seg: 1.684  loss_relation: 0.2046  loss_center: 0.613  loss_offset: 0.3917  time: 1.0639  data_time: 0.0583  lr: 0.00042281  max_mem: 19293M
[10/10 02:01:58] d2.utils.events INFO:  eta: 12:13:21  iter: 8519  total_loss: 3.253  loss_sem_seg: 1.94  loss_relation: 0.2231  loss_center: 0.6949  loss_offset: 0.3914  time: 1.0639  data_time: 0.0610  lr: 0.00042263  max_mem: 19293M
[10/10 02:02:19] d2.utils.events INFO:  eta: 12:12:54  iter: 8539  total_loss: 3.272  loss_sem_seg: 1.943  loss_relation: 0.2212  loss_center: 0.6467  loss_offset: 0.3843  time: 1.0639  data_time: 0.0571  lr: 0.00042245  max_mem: 19293M
[10/10 02:02:40] d2.utils.events INFO:  eta: 12:12:32  iter: 8559  total_loss: 3.291  loss_sem_seg: 1.994  loss_relation: 0.2205  loss_center: 0.7069  loss_offset: 0.416  time: 1.0639  data_time: 0.0604  lr: 0.00042226  max_mem: 19293M
[10/10 02:03:02] d2.utils.events INFO:  eta: 12:12:17  iter: 8579  total_loss: 3.208  loss_sem_seg: 1.933  loss_relation: 0.2146  loss_center: 0.656  loss_offset: 0.4056  time: 1.0639  data_time: 0.0637  lr: 0.00042208  max_mem: 19293M
[10/10 02:03:23] d2.utils.events INFO:  eta: 12:11:56  iter: 8599  total_loss: 3.252  loss_sem_seg: 1.974  loss_relation: 0.2142  loss_center: 0.663  loss_offset: 0.3943  time: 1.0639  data_time: 0.0623  lr: 0.0004219  max_mem: 19293M
[10/10 02:03:44] d2.utils.events INFO:  eta: 12:11:29  iter: 8619  total_loss: 3.158  loss_sem_seg: 1.8  loss_relation: 0.2134  loss_center: 0.6998  loss_offset: 0.4073  time: 1.0639  data_time: 0.0618  lr: 0.00042171  max_mem: 19293M
[10/10 02:04:05] d2.utils.events INFO:  eta: 12:11:07  iter: 8639  total_loss: 3.303  loss_sem_seg: 1.949  loss_relation: 0.2151  loss_center: 0.6616  loss_offset: 0.3957  time: 1.0639  data_time: 0.0595  lr: 0.00042153  max_mem: 19293M
[10/10 02:04:27] d2.utils.events INFO:  eta: 12:10:49  iter: 8659  total_loss: 3.439  loss_sem_seg: 2.123  loss_relation: 0.2194  loss_center: 0.6529  loss_offset: 0.4078  time: 1.0639  data_time: 0.0595  lr: 0.00042135  max_mem: 19293M
[10/10 02:04:48] d2.utils.events INFO:  eta: 12:10:32  iter: 8679  total_loss: 3.533  loss_sem_seg: 2.122  loss_relation: 0.2337  loss_center: 0.6789  loss_offset: 0.4116  time: 1.0639  data_time: 0.0617  lr: 0.00042116  max_mem: 19293M
[10/10 02:05:09] d2.utils.events INFO:  eta: 12:10:15  iter: 8699  total_loss: 3.368  loss_sem_seg: 1.964  loss_relation: 0.2266  loss_center: 0.6748  loss_offset: 0.425  time: 1.0639  data_time: 0.0623  lr: 0.00042098  max_mem: 19293M
[10/10 02:05:30] d2.utils.events INFO:  eta: 12:09:51  iter: 8719  total_loss: 3.3  loss_sem_seg: 1.918  loss_relation: 0.2204  loss_center: 0.6555  loss_offset: 0.3864  time: 1.0639  data_time: 0.0574  lr: 0.0004208  max_mem: 19293M
[10/10 02:05:52] d2.utils.events INFO:  eta: 12:09:33  iter: 8739  total_loss: 3.216  loss_sem_seg: 1.954  loss_relation: 0.2104  loss_center: 0.651  loss_offset: 0.3853  time: 1.0639  data_time: 0.0580  lr: 0.00042061  max_mem: 19293M
[10/10 02:06:13] d2.utils.events INFO:  eta: 12:09:10  iter: 8759  total_loss: 3.251  loss_sem_seg: 1.925  loss_relation: 0.2086  loss_center: 0.6634  loss_offset: 0.3755  time: 1.0639  data_time: 0.0606  lr: 0.00042043  max_mem: 19293M
[10/10 02:06:34] d2.utils.events INFO:  eta: 12:08:49  iter: 8779  total_loss: 3.158  loss_sem_seg: 1.86  loss_relation: 0.2055  loss_center: 0.6642  loss_offset: 0.4048  time: 1.0639  data_time: 0.0569  lr: 0.00042025  max_mem: 19293M
[10/10 02:06:55] d2.utils.events INFO:  eta: 12:08:28  iter: 8799  total_loss: 3.189  loss_sem_seg: 1.917  loss_relation: 0.2102  loss_center: 0.6494  loss_offset: 0.4148  time: 1.0639  data_time: 0.0578  lr: 0.00042006  max_mem: 19293M
[10/10 02:07:17] d2.utils.events INFO:  eta: 12:08:12  iter: 8819  total_loss: 3.315  loss_sem_seg: 1.88  loss_relation: 0.2166  loss_center: 0.7761  loss_offset: 0.3835  time: 1.0639  data_time: 0.0637  lr: 0.00041988  max_mem: 19293M
[10/10 02:07:38] d2.utils.events INFO:  eta: 12:07:48  iter: 8839  total_loss: 3.166  loss_sem_seg: 1.844  loss_relation: 0.2127  loss_center: 0.6354  loss_offset: 0.3913  time: 1.0639  data_time: 0.0604  lr: 0.0004197  max_mem: 19293M
[10/10 02:07:59] d2.utils.events INFO:  eta: 12:07:29  iter: 8859  total_loss: 3.385  loss_sem_seg: 1.996  loss_relation: 0.2203  loss_center: 0.6957  loss_offset: 0.436  time: 1.0639  data_time: 0.0657  lr: 0.00041951  max_mem: 19293M
[10/10 02:08:21] d2.utils.events INFO:  eta: 12:07:14  iter: 8879  total_loss: 3.213  loss_sem_seg: 1.907  loss_relation: 0.2156  loss_center: 0.6442  loss_offset: 0.4034  time: 1.0639  data_time: 0.0620  lr: 0.00041933  max_mem: 19293M
[10/10 02:08:42] d2.utils.events INFO:  eta: 12:06:52  iter: 8899  total_loss: 3.346  loss_sem_seg: 2.078  loss_relation: 0.2243  loss_center: 0.6476  loss_offset: 0.382  time: 1.0639  data_time: 0.0576  lr: 0.00041914  max_mem: 19293M
[10/10 02:09:03] d2.utils.events INFO:  eta: 12:06:33  iter: 8919  total_loss: 3.264  loss_sem_seg: 1.907  loss_relation: 0.2118  loss_center: 0.645  loss_offset: 0.381  time: 1.0639  data_time: 0.0637  lr: 0.00041896  max_mem: 19293M
[10/10 02:09:24] d2.utils.events INFO:  eta: 12:06:08  iter: 8939  total_loss: 3.284  loss_sem_seg: 1.947  loss_relation: 0.2174  loss_center: 0.6314  loss_offset: 0.3959  time: 1.0639  data_time: 0.0605  lr: 0.00041878  max_mem: 19293M
[10/10 02:09:45] d2.utils.events INFO:  eta: 12:05:43  iter: 8959  total_loss: 3.121  loss_sem_seg: 1.851  loss_relation: 0.2148  loss_center: 0.647  loss_offset: 0.3901  time: 1.0638  data_time: 0.0590  lr: 0.00041859  max_mem: 19293M
[10/10 02:10:07] d2.utils.events INFO:  eta: 12:05:19  iter: 8979  total_loss: 3.27  loss_sem_seg: 1.885  loss_relation: 0.2141  loss_center: 0.6849  loss_offset: 0.3826  time: 1.0638  data_time: 0.0601  lr: 0.00041841  max_mem: 19293M
[10/10 02:10:28] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0008999.pth
[10/10 02:10:30] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 02:10:30] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 02:10:30] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 02:10:30] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 02:10:44] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0001 s/iter. Inference: 0.0736 s/iter. Eval: 0.0277 s/iter. Total: 0.1014 s/iter. ETA=0:00:24
[10/10 02:10:49] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0013 s/iter. Inference: 0.0670 s/iter. Eval: 0.0289 s/iter. Total: 0.0973 s/iter. ETA=0:00:18
[10/10 02:10:54] d2.evaluation.evaluator INFO: Inference done 119/250. Dataloading: 0.0014 s/iter. Inference: 0.0639 s/iter. Eval: 0.0283 s/iter. Total: 0.0937 s/iter. ETA=0:00:12
[10/10 02:10:59] d2.evaluation.evaluator INFO: Inference done 173/250. Dataloading: 0.0014 s/iter. Inference: 0.0640 s/iter. Eval: 0.0283 s/iter. Total: 0.0938 s/iter. ETA=0:00:07
[10/10 02:11:04] d2.evaluation.evaluator INFO: Inference done 229/250. Dataloading: 0.0014 s/iter. Inference: 0.0632 s/iter. Eval: 0.0281 s/iter. Total: 0.0927 s/iter. ETA=0:00:01
[10/10 02:11:06] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.092964 (0.094257 s / iter per device, on 2 devices)
[10/10 02:11:06] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063175 s / iter per device, on 2 devices)
[10/10 02:11:06] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalzlr2e94c ...
[10/10 02:11:11] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 14.232582099535495
[10/10 02:11:11] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.599 | 43.637 | 15.490 |      130      |
| Things | 8.988  | 40.421 | 12.259 |      77       |
| Stuff  | 15.392 | 48.309 | 20.184 |      53       |
[10/10 02:11:11] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 02:11:11] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 02:11:11] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 02:11:11] d2.evaluation.testing INFO: copypaste: 11.5987,43.6370,15.4898,8.9877,40.4212,12.2588,15.3921,48.3091,20.1838
[10/10 02:11:11] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 02:11:11] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 02:11:11] d2.evaluation.testing INFO: copypaste: 0.1423
[10/10 02:11:11] d2.utils.events INFO:  eta: 12:05:04  iter: 8999  total_loss: 3.326  loss_sem_seg: 2.003  loss_relation: 0.2234  loss_center: 0.6886  loss_offset: 0.4061  time: 1.0638  data_time: 0.0605  lr: 0.00041823  max_mem: 19293M
[10/10 02:11:11] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.14233, not better than best score 0.15042 @ iteration 7999.
[10/10 02:11:33] d2.utils.events INFO:  eta: 12:04:45  iter: 9019  total_loss: 3.058  loss_sem_seg: 1.78  loss_relation: 0.2017  loss_center: 0.6357  loss_offset: 0.4205  time: 1.0638  data_time: 0.0650  lr: 0.00041804  max_mem: 19293M
[10/10 02:11:54] d2.utils.events INFO:  eta: 12:04:24  iter: 9039  total_loss: 3.149  loss_sem_seg: 1.88  loss_relation: 0.2118  loss_center: 0.6586  loss_offset: 0.4149  time: 1.0638  data_time: 0.0631  lr: 0.00041786  max_mem: 19293M
[10/10 02:12:15] d2.utils.events INFO:  eta: 12:04:02  iter: 9059  total_loss: 3.1  loss_sem_seg: 1.761  loss_relation: 0.2016  loss_center: 0.677  loss_offset: 0.3933  time: 1.0638  data_time: 0.0645  lr: 0.00041768  max_mem: 19293M
[10/10 02:12:36] d2.utils.events INFO:  eta: 12:03:30  iter: 9079  total_loss: 3.099  loss_sem_seg: 1.864  loss_relation: 0.2103  loss_center: 0.7085  loss_offset: 0.3628  time: 1.0638  data_time: 0.0580  lr: 0.00041749  max_mem: 19293M
[10/10 02:12:58] d2.utils.events INFO:  eta: 12:03:10  iter: 9099  total_loss: 3.242  loss_sem_seg: 1.84  loss_relation: 0.2076  loss_center: 0.7073  loss_offset: 0.4077  time: 1.0638  data_time: 0.0638  lr: 0.00041731  max_mem: 19293M
[10/10 02:13:19] d2.utils.events INFO:  eta: 12:02:53  iter: 9119  total_loss: 3.069  loss_sem_seg: 1.845  loss_relation: 0.2075  loss_center: 0.7266  loss_offset: 0.3805  time: 1.0639  data_time: 0.0625  lr: 0.00041713  max_mem: 19293M
[10/10 02:13:41] d2.utils.events INFO:  eta: 12:02:32  iter: 9139  total_loss: 3.136  loss_sem_seg: 1.816  loss_relation: 0.2095  loss_center: 0.6516  loss_offset: 0.3748  time: 1.0639  data_time: 0.0590  lr: 0.00041694  max_mem: 19293M
[10/10 02:14:02] d2.utils.events INFO:  eta: 12:02:07  iter: 9159  total_loss: 3.187  loss_sem_seg: 1.928  loss_relation: 0.2135  loss_center: 0.6685  loss_offset: 0.3655  time: 1.0639  data_time: 0.0602  lr: 0.00041676  max_mem: 19293M
[10/10 02:14:23] d2.utils.events INFO:  eta: 12:01:57  iter: 9179  total_loss: 3.296  loss_sem_seg: 1.993  loss_relation: 0.2266  loss_center: 0.6693  loss_offset: 0.4032  time: 1.0639  data_time: 0.0619  lr: 0.00041657  max_mem: 19293M
[10/10 02:14:44] d2.utils.events INFO:  eta: 12:01:40  iter: 9199  total_loss: 3.307  loss_sem_seg: 1.95  loss_relation: 0.216  loss_center: 0.6989  loss_offset: 0.38  time: 1.0639  data_time: 0.0628  lr: 0.00041639  max_mem: 19293M
[10/10 02:15:06] d2.utils.events INFO:  eta: 12:01:13  iter: 9219  total_loss: 2.972  loss_sem_seg: 1.7  loss_relation: 0.2066  loss_center: 0.6704  loss_offset: 0.3551  time: 1.0639  data_time: 0.0622  lr: 0.00041621  max_mem: 19293M
[10/10 02:15:27] d2.utils.events INFO:  eta: 12:00:54  iter: 9239  total_loss: 3.231  loss_sem_seg: 1.853  loss_relation: 0.2203  loss_center: 0.6984  loss_offset: 0.3993  time: 1.0639  data_time: 0.0602  lr: 0.00041602  max_mem: 19293M
[10/10 02:15:48] d2.utils.events INFO:  eta: 12:00:28  iter: 9259  total_loss: 3.453  loss_sem_seg: 2.05  loss_relation: 0.2243  loss_center: 0.6855  loss_offset: 0.4215  time: 1.0639  data_time: 0.0602  lr: 0.00041584  max_mem: 19293M
[10/10 02:16:10] d2.utils.events INFO:  eta: 12:00:07  iter: 9279  total_loss: 3.21  loss_sem_seg: 1.902  loss_relation: 0.2196  loss_center: 0.672  loss_offset: 0.4106  time: 1.0639  data_time: 0.0644  lr: 0.00041566  max_mem: 19293M
[10/10 02:16:31] d2.utils.events INFO:  eta: 11:59:48  iter: 9299  total_loss: 3.171  loss_sem_seg: 1.906  loss_relation: 0.2044  loss_center: 0.7043  loss_offset: 0.4075  time: 1.0638  data_time: 0.0605  lr: 0.00041547  max_mem: 19293M
[10/10 02:16:52] d2.utils.events INFO:  eta: 11:59:32  iter: 9319  total_loss: 3.133  loss_sem_seg: 1.942  loss_relation: 0.2126  loss_center: 0.6326  loss_offset: 0.3804  time: 1.0638  data_time: 0.0590  lr: 0.00041529  max_mem: 19293M
[10/10 02:17:13] d2.utils.events INFO:  eta: 11:59:17  iter: 9339  total_loss: 3.027  loss_sem_seg: 1.705  loss_relation: 0.2027  loss_center: 0.6898  loss_offset: 0.3388  time: 1.0638  data_time: 0.0627  lr: 0.0004151  max_mem: 19293M
[10/10 02:17:34] d2.utils.events INFO:  eta: 11:59:02  iter: 9359  total_loss: 3.006  loss_sem_seg: 1.678  loss_relation: 0.2031  loss_center: 0.7171  loss_offset: 0.3924  time: 1.0638  data_time: 0.0591  lr: 0.00041492  max_mem: 19293M
[10/10 02:17:56] d2.utils.events INFO:  eta: 11:58:26  iter: 9379  total_loss: 2.943  loss_sem_seg: 1.679  loss_relation: 0.2097  loss_center: 0.5998  loss_offset: 0.3943  time: 1.0638  data_time: 0.0570  lr: 0.00041474  max_mem: 19293M
[10/10 02:18:17] d2.utils.events INFO:  eta: 11:58:01  iter: 9399  total_loss: 3.269  loss_sem_seg: 1.865  loss_relation: 0.2057  loss_center: 0.7271  loss_offset: 0.4054  time: 1.0638  data_time: 0.0621  lr: 0.00041455  max_mem: 19293M
[10/10 02:18:38] d2.utils.events INFO:  eta: 11:57:32  iter: 9419  total_loss: 3.139  loss_sem_seg: 1.856  loss_relation: 0.2196  loss_center: 0.6834  loss_offset: 0.3763  time: 1.0638  data_time: 0.0614  lr: 0.00041437  max_mem: 19293M
[10/10 02:18:59] d2.utils.events INFO:  eta: 11:57:07  iter: 9439  total_loss: 3.277  loss_sem_seg: 1.923  loss_relation: 0.2186  loss_center: 0.6799  loss_offset: 0.3938  time: 1.0638  data_time: 0.0586  lr: 0.00041419  max_mem: 19293M
[10/10 02:19:21] d2.utils.events INFO:  eta: 11:56:46  iter: 9459  total_loss: 3.264  loss_sem_seg: 1.906  loss_relation: 0.2082  loss_center: 0.7507  loss_offset: 0.3929  time: 1.0638  data_time: 0.0600  lr: 0.000414  max_mem: 19293M
[10/10 02:19:42] d2.utils.events INFO:  eta: 11:56:20  iter: 9479  total_loss: 3.192  loss_sem_seg: 1.906  loss_relation: 0.2177  loss_center: 0.689  loss_offset: 0.3824  time: 1.0638  data_time: 0.0582  lr: 0.00041382  max_mem: 19293M
[10/10 02:20:03] d2.utils.events INFO:  eta: 11:56:01  iter: 9499  total_loss: 3.289  loss_sem_seg: 2.006  loss_relation: 0.2103  loss_center: 0.6832  loss_offset: 0.3873  time: 1.0638  data_time: 0.0597  lr: 0.00041363  max_mem: 19293M
[10/10 02:20:24] d2.utils.events INFO:  eta: 11:55:33  iter: 9519  total_loss: 3.162  loss_sem_seg: 1.929  loss_relation: 0.2154  loss_center: 0.685  loss_offset: 0.3842  time: 1.0638  data_time: 0.0595  lr: 0.00041345  max_mem: 19293M
[10/10 02:20:46] d2.utils.events INFO:  eta: 11:55:15  iter: 9539  total_loss: 3.236  loss_sem_seg: 1.913  loss_relation: 0.2147  loss_center: 0.7075  loss_offset: 0.3865  time: 1.0638  data_time: 0.0572  lr: 0.00041327  max_mem: 19293M
[10/10 02:21:07] d2.utils.events INFO:  eta: 11:55:03  iter: 9559  total_loss: 3.12  loss_sem_seg: 1.852  loss_relation: 0.2155  loss_center: 0.6706  loss_offset: 0.3941  time: 1.0638  data_time: 0.0669  lr: 0.00041308  max_mem: 19293M
[10/10 02:21:28] d2.utils.events INFO:  eta: 11:54:40  iter: 9579  total_loss: 3.243  loss_sem_seg: 1.82  loss_relation: 0.2087  loss_center: 0.7839  loss_offset: 0.3978  time: 1.0638  data_time: 0.0630  lr: 0.0004129  max_mem: 19293M
[10/10 02:21:49] d2.utils.events INFO:  eta: 11:54:17  iter: 9599  total_loss: 3.114  loss_sem_seg: 1.801  loss_relation: 0.1985  loss_center: 0.6387  loss_offset: 0.3996  time: 1.0638  data_time: 0.0596  lr: 0.00041271  max_mem: 19293M
[10/10 02:22:11] d2.utils.events INFO:  eta: 11:53:59  iter: 9619  total_loss: 3.109  loss_sem_seg: 1.76  loss_relation: 0.2064  loss_center: 0.6606  loss_offset: 0.3839  time: 1.0638  data_time: 0.0679  lr: 0.00041253  max_mem: 19293M
[10/10 02:22:32] d2.utils.events INFO:  eta: 11:53:38  iter: 9639  total_loss: 3.087  loss_sem_seg: 1.848  loss_relation: 0.1967  loss_center: 0.6701  loss_offset: 0.3859  time: 1.0638  data_time: 0.0588  lr: 0.00041235  max_mem: 19293M
[10/10 02:22:53] d2.utils.events INFO:  eta: 11:53:13  iter: 9659  total_loss: 3.159  loss_sem_seg: 1.863  loss_relation: 0.2141  loss_center: 0.7014  loss_offset: 0.4141  time: 1.0638  data_time: 0.0599  lr: 0.00041216  max_mem: 19293M
[10/10 02:23:14] d2.utils.events INFO:  eta: 11:52:51  iter: 9679  total_loss: 2.973  loss_sem_seg: 1.672  loss_relation: 0.2043  loss_center: 0.6254  loss_offset: 0.3756  time: 1.0638  data_time: 0.0578  lr: 0.00041198  max_mem: 19293M
[10/10 02:23:36] d2.utils.events INFO:  eta: 11:52:25  iter: 9699  total_loss: 2.762  loss_sem_seg: 1.64  loss_relation: 0.1936  loss_center: 0.6211  loss_offset: 0.3625  time: 1.0638  data_time: 0.0560  lr: 0.0004118  max_mem: 19293M
[10/10 02:23:57] d2.utils.events INFO:  eta: 11:52:05  iter: 9719  total_loss: 3.108  loss_sem_seg: 1.887  loss_relation: 0.2082  loss_center: 0.6853  loss_offset: 0.3581  time: 1.0638  data_time: 0.0662  lr: 0.00041161  max_mem: 19293M
[10/10 02:24:18] d2.utils.events INFO:  eta: 11:51:41  iter: 9739  total_loss: 3.175  loss_sem_seg: 1.808  loss_relation: 0.202  loss_center: 0.6942  loss_offset: 0.4009  time: 1.0638  data_time: 0.0604  lr: 0.00041143  max_mem: 19293M
[10/10 02:24:39] d2.utils.events INFO:  eta: 11:51:19  iter: 9759  total_loss: 3.131  loss_sem_seg: 1.849  loss_relation: 0.2186  loss_center: 0.691  loss_offset: 0.3743  time: 1.0638  data_time: 0.0588  lr: 0.00041124  max_mem: 19293M
[10/10 02:25:01] d2.utils.events INFO:  eta: 11:51:01  iter: 9779  total_loss: 3.036  loss_sem_seg: 1.739  loss_relation: 0.2074  loss_center: 0.6753  loss_offset: 0.3919  time: 1.0638  data_time: 0.0617  lr: 0.00041106  max_mem: 19293M
[10/10 02:25:22] d2.utils.events INFO:  eta: 11:50:44  iter: 9799  total_loss: 3.14  loss_sem_seg: 1.855  loss_relation: 0.2114  loss_center: 0.6453  loss_offset: 0.3696  time: 1.0638  data_time: 0.0683  lr: 0.00041088  max_mem: 19293M
[10/10 02:25:43] d2.utils.events INFO:  eta: 11:50:17  iter: 9819  total_loss: 3.172  loss_sem_seg: 1.825  loss_relation: 0.21  loss_center: 0.6248  loss_offset: 0.4077  time: 1.0638  data_time: 0.0621  lr: 0.00041069  max_mem: 19293M
[10/10 02:26:05] d2.utils.events INFO:  eta: 11:49:58  iter: 9839  total_loss: 3.201  loss_sem_seg: 1.949  loss_relation: 0.2068  loss_center: 0.6673  loss_offset: 0.3767  time: 1.0638  data_time: 0.0639  lr: 0.00041051  max_mem: 19293M
[10/10 02:26:26] d2.utils.events INFO:  eta: 11:49:35  iter: 9859  total_loss: 3.003  loss_sem_seg: 1.752  loss_relation: 0.2131  loss_center: 0.6559  loss_offset: 0.405  time: 1.0638  data_time: 0.0617  lr: 0.00041032  max_mem: 19293M
[10/10 02:26:47] d2.utils.events INFO:  eta: 11:49:13  iter: 9879  total_loss: 3.091  loss_sem_seg: 1.843  loss_relation: 0.202  loss_center: 0.6609  loss_offset: 0.3583  time: 1.0638  data_time: 0.0553  lr: 0.00041014  max_mem: 19293M
[10/10 02:27:08] d2.utils.events INFO:  eta: 11:48:53  iter: 9899  total_loss: 2.864  loss_sem_seg: 1.657  loss_relation: 0.192  loss_center: 0.6336  loss_offset: 0.3909  time: 1.0638  data_time: 0.0561  lr: 0.00040996  max_mem: 19293M
[10/10 02:27:30] d2.utils.events INFO:  eta: 11:48:29  iter: 9919  total_loss: 3.065  loss_sem_seg: 1.787  loss_relation: 0.1975  loss_center: 0.6861  loss_offset: 0.3723  time: 1.0638  data_time: 0.0589  lr: 0.00040977  max_mem: 19293M
[10/10 02:27:51] d2.utils.events INFO:  eta: 11:48:10  iter: 9939  total_loss: 2.917  loss_sem_seg: 1.765  loss_relation: 0.209  loss_center: 0.6038  loss_offset: 0.3704  time: 1.0638  data_time: 0.0609  lr: 0.00040959  max_mem: 19293M
[10/10 02:28:12] d2.utils.events INFO:  eta: 11:47:47  iter: 9959  total_loss: 2.888  loss_sem_seg: 1.714  loss_relation: 0.1948  loss_center: 0.636  loss_offset: 0.3939  time: 1.0637  data_time: 0.0551  lr: 0.0004094  max_mem: 19293M
[10/10 02:28:34] d2.utils.events INFO:  eta: 11:47:27  iter: 9979  total_loss: 3.047  loss_sem_seg: 1.84  loss_relation: 0.1978  loss_center: 0.6759  loss_offset: 0.3776  time: 1.0638  data_time: 0.0605  lr: 0.00040922  max_mem: 19293M
[10/10 02:28:55] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0009999.pth
[10/10 02:28:57] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 02:28:57] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 02:28:57] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 02:28:57] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 02:29:11] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0022 s/iter. Inference: 0.0772 s/iter. Eval: 0.0297 s/iter. Total: 0.1090 s/iter. ETA=0:00:26
[10/10 02:29:16] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0013 s/iter. Inference: 0.0675 s/iter. Eval: 0.0287 s/iter. Total: 0.0976 s/iter. ETA=0:00:18
[10/10 02:29:21] d2.evaluation.evaluator INFO: Inference done 117/250. Dataloading: 0.0014 s/iter. Inference: 0.0655 s/iter. Eval: 0.0284 s/iter. Total: 0.0954 s/iter. ETA=0:00:12
[10/10 02:29:26] d2.evaluation.evaluator INFO: Inference done 170/250. Dataloading: 0.0014 s/iter. Inference: 0.0655 s/iter. Eval: 0.0284 s/iter. Total: 0.0954 s/iter. ETA=0:00:07
[10/10 02:29:31] d2.evaluation.evaluator INFO: Inference done 227/250. Dataloading: 0.0014 s/iter. Inference: 0.0643 s/iter. Eval: 0.0279 s/iter. Total: 0.0937 s/iter. ETA=0:00:02
[10/10 02:29:33] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.284550 (0.095039 s / iter per device, on 2 devices)
[10/10 02:29:33] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.064172 s / iter per device, on 2 devices)
[10/10 02:29:33] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evala7n6yfvv ...
[10/10 02:29:38] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 14.224747774947538
[10/10 02:29:38] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 10.933 | 41.400 | 14.770 |      129      |
| Things | 8.515  | 38.747 | 11.930 |      76       |
| Stuff  | 14.401 | 45.204 | 18.843 |      53       |
[10/10 02:29:38] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 02:29:38] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 02:29:38] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 02:29:38] d2.evaluation.testing INFO: copypaste: 10.9334,41.4001,14.7704,8.5149,38.7474,11.9304,14.4015,45.2039,18.8427
[10/10 02:29:38] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 02:29:38] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 02:29:38] d2.evaluation.testing INFO: copypaste: 0.1422
[10/10 02:29:38] d2.utils.events INFO:  eta: 11:47:06  iter: 9999  total_loss: 3.005  loss_sem_seg: 1.685  loss_relation: 0.2011  loss_center: 0.7531  loss_offset: 0.3905  time: 1.0638  data_time: 0.0612  lr: 0.00040904  max_mem: 19293M
[10/10 02:29:38] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.14225, not better than best score 0.15042 @ iteration 7999.
[10/10 02:29:59] d2.utils.events INFO:  eta: 11:46:41  iter: 10019  total_loss: 3.202  loss_sem_seg: 1.896  loss_relation: 0.2021  loss_center: 0.6878  loss_offset: 0.3979  time: 1.0638  data_time: 0.0650  lr: 0.00040885  max_mem: 19293M
[10/10 02:30:21] d2.utils.events INFO:  eta: 11:46:23  iter: 10039  total_loss: 2.979  loss_sem_seg: 1.734  loss_relation: 0.2037  loss_center: 0.6989  loss_offset: 0.3651  time: 1.0637  data_time: 0.0619  lr: 0.00040867  max_mem: 19293M
[10/10 02:30:42] d2.utils.events INFO:  eta: 11:46:00  iter: 10059  total_loss: 3.174  loss_sem_seg: 1.939  loss_relation: 0.2175  loss_center: 0.6534  loss_offset: 0.3926  time: 1.0637  data_time: 0.0599  lr: 0.00040848  max_mem: 19293M
[10/10 02:31:03] d2.utils.events INFO:  eta: 11:45:42  iter: 10079  total_loss: 3.176  loss_sem_seg: 1.921  loss_relation: 0.2079  loss_center: 0.6753  loss_offset: 0.4318  time: 1.0637  data_time: 0.0602  lr: 0.0004083  max_mem: 19293M
[10/10 02:31:24] d2.utils.events INFO:  eta: 11:45:18  iter: 10099  total_loss: 3.035  loss_sem_seg: 1.712  loss_relation: 0.2085  loss_center: 0.6501  loss_offset: 0.4097  time: 1.0637  data_time: 0.0607  lr: 0.00040811  max_mem: 19293M
[10/10 02:31:46] d2.utils.events INFO:  eta: 11:45:00  iter: 10119  total_loss: 3.14  loss_sem_seg: 1.768  loss_relation: 0.2096  loss_center: 0.6162  loss_offset: 0.3815  time: 1.0638  data_time: 0.0605  lr: 0.00040793  max_mem: 19293M
[10/10 02:32:07] d2.utils.events INFO:  eta: 11:44:43  iter: 10139  total_loss: 2.883  loss_sem_seg: 1.632  loss_relation: 0.204  loss_center: 0.6472  loss_offset: 0.3753  time: 1.0638  data_time: 0.0606  lr: 0.00040775  max_mem: 19293M
[10/10 02:32:28] d2.utils.events INFO:  eta: 11:44:22  iter: 10159  total_loss: 2.844  loss_sem_seg: 1.594  loss_relation: 0.1826  loss_center: 0.6457  loss_offset: 0.3746  time: 1.0638  data_time: 0.0615  lr: 0.00040756  max_mem: 19293M
[10/10 02:32:50] d2.utils.events INFO:  eta: 11:44:01  iter: 10179  total_loss: 3.059  loss_sem_seg: 1.761  loss_relation: 0.2042  loss_center: 0.686  loss_offset: 0.3957  time: 1.0638  data_time: 0.0629  lr: 0.00040738  max_mem: 19293M
[10/10 02:33:11] d2.utils.events INFO:  eta: 11:43:35  iter: 10199  total_loss: 3.118  loss_sem_seg: 1.836  loss_relation: 0.1963  loss_center: 0.6532  loss_offset: 0.3771  time: 1.0638  data_time: 0.0633  lr: 0.00040719  max_mem: 19293M
[10/10 02:33:32] d2.utils.events INFO:  eta: 11:43:13  iter: 10219  total_loss: 2.913  loss_sem_seg: 1.607  loss_relation: 0.1954  loss_center: 0.6582  loss_offset: 0.4239  time: 1.0638  data_time: 0.0610  lr: 0.00040701  max_mem: 19293M
[10/10 02:33:54] d2.utils.events INFO:  eta: 11:42:55  iter: 10239  total_loss: 2.835  loss_sem_seg: 1.68  loss_relation: 0.2009  loss_center: 0.6666  loss_offset: 0.3686  time: 1.0638  data_time: 0.0616  lr: 0.00040683  max_mem: 19293M
[10/10 02:34:15] d2.utils.events INFO:  eta: 11:42:41  iter: 10259  total_loss: 3.006  loss_sem_seg: 1.752  loss_relation: 0.2009  loss_center: 0.7074  loss_offset: 0.3588  time: 1.0638  data_time: 0.0613  lr: 0.00040664  max_mem: 19293M
[10/10 02:34:36] d2.utils.events INFO:  eta: 11:42:16  iter: 10279  total_loss: 2.951  loss_sem_seg: 1.653  loss_relation: 0.2031  loss_center: 0.6296  loss_offset: 0.3792  time: 1.0638  data_time: 0.0564  lr: 0.00040646  max_mem: 19293M
[10/10 02:34:57] d2.utils.events INFO:  eta: 11:41:53  iter: 10299  total_loss: 2.954  loss_sem_seg: 1.715  loss_relation: 0.2055  loss_center: 0.6744  loss_offset: 0.3713  time: 1.0638  data_time: 0.0608  lr: 0.00040627  max_mem: 19293M
[10/10 02:35:19] d2.utils.events INFO:  eta: 11:41:26  iter: 10319  total_loss: 3.016  loss_sem_seg: 1.73  loss_relation: 0.2025  loss_center: 0.6666  loss_offset: 0.3785  time: 1.0637  data_time: 0.0553  lr: 0.00040609  max_mem: 19293M
[10/10 02:35:40] d2.utils.events INFO:  eta: 11:41:00  iter: 10339  total_loss: 3.042  loss_sem_seg: 1.725  loss_relation: 0.1965  loss_center: 0.6513  loss_offset: 0.3734  time: 1.0637  data_time: 0.0587  lr: 0.0004059  max_mem: 19293M
[10/10 02:36:01] d2.utils.events INFO:  eta: 11:40:38  iter: 10359  total_loss: 3.247  loss_sem_seg: 1.917  loss_relation: 0.2148  loss_center: 0.6787  loss_offset: 0.4502  time: 1.0637  data_time: 0.0637  lr: 0.00040572  max_mem: 19293M
[10/10 02:36:22] d2.utils.events INFO:  eta: 11:40:22  iter: 10379  total_loss: 3.228  loss_sem_seg: 1.864  loss_relation: 0.2129  loss_center: 0.6887  loss_offset: 0.4034  time: 1.0637  data_time: 0.0619  lr: 0.00040554  max_mem: 19293M
[10/10 02:36:44] d2.utils.events INFO:  eta: 11:40:09  iter: 10399  total_loss: 3.265  loss_sem_seg: 1.954  loss_relation: 0.2214  loss_center: 0.6426  loss_offset: 0.4232  time: 1.0637  data_time: 0.0666  lr: 0.00040535  max_mem: 19293M
[10/10 02:37:05] d2.utils.events INFO:  eta: 11:39:50  iter: 10419  total_loss: 3.093  loss_sem_seg: 1.784  loss_relation: 0.208  loss_center: 0.6841  loss_offset: 0.4089  time: 1.0637  data_time: 0.0605  lr: 0.00040517  max_mem: 19293M
[10/10 02:37:26] d2.utils.events INFO:  eta: 11:39:32  iter: 10439  total_loss: 3.311  loss_sem_seg: 2.012  loss_relation: 0.2002  loss_center: 0.652  loss_offset: 0.4078  time: 1.0637  data_time: 0.0651  lr: 0.00040498  max_mem: 19293M
[10/10 02:37:47] d2.utils.events INFO:  eta: 11:39:10  iter: 10459  total_loss: 3.285  loss_sem_seg: 2.036  loss_relation: 0.2037  loss_center: 0.6881  loss_offset: 0.322  time: 1.0637  data_time: 0.0723  lr: 0.0004048  max_mem: 19293M
[10/10 02:38:09] d2.utils.events INFO:  eta: 11:38:49  iter: 10479  total_loss: 2.899  loss_sem_seg: 1.581  loss_relation: 0.1943  loss_center: 0.6911  loss_offset: 0.3881  time: 1.0637  data_time: 0.0551  lr: 0.00040462  max_mem: 19293M
[10/10 02:38:30] d2.utils.events INFO:  eta: 11:38:25  iter: 10499  total_loss: 3.098  loss_sem_seg: 1.761  loss_relation: 0.1982  loss_center: 0.6033  loss_offset: 0.3906  time: 1.0637  data_time: 0.0568  lr: 0.00040443  max_mem: 19293M
[10/10 02:38:51] d2.utils.events INFO:  eta: 11:38:09  iter: 10519  total_loss: 3.211  loss_sem_seg: 2  loss_relation: 0.2036  loss_center: 0.7044  loss_offset: 0.3878  time: 1.0637  data_time: 0.0626  lr: 0.00040425  max_mem: 19293M
[10/10 02:39:12] d2.utils.events INFO:  eta: 11:37:44  iter: 10539  total_loss: 3.343  loss_sem_seg: 2.095  loss_relation: 0.2128  loss_center: 0.6518  loss_offset: 0.3828  time: 1.0637  data_time: 0.0577  lr: 0.00040406  max_mem: 19293M
[10/10 02:39:33] d2.utils.events INFO:  eta: 11:37:19  iter: 10559  total_loss: 3.034  loss_sem_seg: 1.775  loss_relation: 0.2077  loss_center: 0.6745  loss_offset: 0.3664  time: 1.0637  data_time: 0.0606  lr: 0.00040388  max_mem: 19293M
[10/10 02:39:55] d2.utils.events INFO:  eta: 11:36:56  iter: 10579  total_loss: 3.229  loss_sem_seg: 1.917  loss_relation: 0.1994  loss_center: 0.703  loss_offset: 0.393  time: 1.0637  data_time: 0.0678  lr: 0.00040369  max_mem: 19293M
[10/10 02:40:16] d2.utils.events INFO:  eta: 11:36:35  iter: 10599  total_loss: 3.027  loss_sem_seg: 1.767  loss_relation: 0.2066  loss_center: 0.6974  loss_offset: 0.3721  time: 1.0637  data_time: 0.0589  lr: 0.00040351  max_mem: 19293M
[10/10 02:40:37] d2.utils.events INFO:  eta: 11:36:16  iter: 10619  total_loss: 3.266  loss_sem_seg: 1.942  loss_relation: 0.2033  loss_center: 0.6152  loss_offset: 0.4009  time: 1.0637  data_time: 0.0607  lr: 0.00040332  max_mem: 19293M
[10/10 02:40:58] d2.utils.events INFO:  eta: 11:35:53  iter: 10639  total_loss: 3.317  loss_sem_seg: 2.04  loss_relation: 0.2064  loss_center: 0.6405  loss_offset: 0.4114  time: 1.0637  data_time: 0.0585  lr: 0.00040314  max_mem: 19293M
[10/10 02:41:20] d2.utils.events INFO:  eta: 11:35:28  iter: 10659  total_loss: 3.19  loss_sem_seg: 1.829  loss_relation: 0.2091  loss_center: 0.676  loss_offset: 0.3945  time: 1.0637  data_time: 0.0568  lr: 0.00040296  max_mem: 19293M
[10/10 02:41:41] d2.utils.events INFO:  eta: 11:35:07  iter: 10679  total_loss: 3.036  loss_sem_seg: 1.715  loss_relation: 0.2151  loss_center: 0.6904  loss_offset: 0.3587  time: 1.0637  data_time: 0.0596  lr: 0.00040277  max_mem: 19293M
[10/10 02:42:02] d2.utils.events INFO:  eta: 11:34:51  iter: 10699  total_loss: 3.158  loss_sem_seg: 1.822  loss_relation: 0.2041  loss_center: 0.645  loss_offset: 0.3689  time: 1.0637  data_time: 0.0641  lr: 0.00040259  max_mem: 19293M
[10/10 02:42:23] d2.utils.events INFO:  eta: 11:34:24  iter: 10719  total_loss: 3.029  loss_sem_seg: 1.737  loss_relation: 0.1906  loss_center: 0.6797  loss_offset: 0.4023  time: 1.0637  data_time: 0.0603  lr: 0.0004024  max_mem: 19293M
[10/10 02:42:45] d2.utils.events INFO:  eta: 11:34:07  iter: 10739  total_loss: 2.945  loss_sem_seg: 1.763  loss_relation: 0.1917  loss_center: 0.6216  loss_offset: 0.363  time: 1.0637  data_time: 0.0664  lr: 0.00040222  max_mem: 19293M
[10/10 02:43:06] d2.utils.events INFO:  eta: 11:33:44  iter: 10759  total_loss: 2.954  loss_sem_seg: 1.672  loss_relation: 0.1936  loss_center: 0.6815  loss_offset: 0.3572  time: 1.0637  data_time: 0.0565  lr: 0.00040203  max_mem: 19293M
[10/10 02:43:27] d2.utils.events INFO:  eta: 11:33:24  iter: 10779  total_loss: 2.993  loss_sem_seg: 1.758  loss_relation: 0.192  loss_center: 0.6616  loss_offset: 0.3789  time: 1.0637  data_time: 0.0586  lr: 0.00040185  max_mem: 19293M
[10/10 02:43:49] d2.utils.events INFO:  eta: 11:33:03  iter: 10799  total_loss: 3.083  loss_sem_seg: 1.849  loss_relation: 0.2033  loss_center: 0.6251  loss_offset: 0.3882  time: 1.0637  data_time: 0.0725  lr: 0.00040167  max_mem: 19293M
[10/10 02:44:10] d2.utils.events INFO:  eta: 11:32:45  iter: 10819  total_loss: 3.128  loss_sem_seg: 1.866  loss_relation: 0.1983  loss_center: 0.6508  loss_offset: 0.3857  time: 1.0637  data_time: 0.0601  lr: 0.00040148  max_mem: 19293M
[10/10 02:44:31] d2.utils.events INFO:  eta: 11:32:22  iter: 10839  total_loss: 2.98  loss_sem_seg: 1.79  loss_relation: 0.1948  loss_center: 0.6453  loss_offset: 0.3901  time: 1.0637  data_time: 0.0640  lr: 0.0004013  max_mem: 19293M
[10/10 02:44:53] d2.utils.events INFO:  eta: 11:32:03  iter: 10859  total_loss: 3.154  loss_sem_seg: 1.976  loss_relation: 0.2041  loss_center: 0.6472  loss_offset: 0.3922  time: 1.0637  data_time: 0.0584  lr: 0.00040111  max_mem: 19293M
[10/10 02:45:14] d2.utils.events INFO:  eta: 11:31:41  iter: 10879  total_loss: 3.034  loss_sem_seg: 1.787  loss_relation: 0.1979  loss_center: 0.6855  loss_offset: 0.3928  time: 1.0637  data_time: 0.0601  lr: 0.00040093  max_mem: 19293M
[10/10 02:45:35] d2.utils.events INFO:  eta: 11:31:22  iter: 10899  total_loss: 3.054  loss_sem_seg: 1.725  loss_relation: 0.2015  loss_center: 0.6354  loss_offset: 0.4036  time: 1.0637  data_time: 0.0572  lr: 0.00040074  max_mem: 19293M
[10/10 02:45:56] d2.utils.events INFO:  eta: 11:31:00  iter: 10919  total_loss: 3.159  loss_sem_seg: 1.799  loss_relation: 0.2102  loss_center: 0.6891  loss_offset: 0.4053  time: 1.0637  data_time: 0.0629  lr: 0.00040056  max_mem: 19293M
[10/10 02:46:18] d2.utils.events INFO:  eta: 11:30:37  iter: 10939  total_loss: 2.997  loss_sem_seg: 1.738  loss_relation: 0.1918  loss_center: 0.6997  loss_offset: 0.405  time: 1.0637  data_time: 0.0638  lr: 0.00040037  max_mem: 19293M
[10/10 02:46:39] d2.utils.events INFO:  eta: 11:30:19  iter: 10959  total_loss: 3.302  loss_sem_seg: 2.032  loss_relation: 0.2085  loss_center: 0.7095  loss_offset: 0.3966  time: 1.0637  data_time: 0.0649  lr: 0.00040019  max_mem: 19293M
[10/10 02:47:00] d2.utils.events INFO:  eta: 11:29:57  iter: 10979  total_loss: 3.13  loss_sem_seg: 1.854  loss_relation: 0.203  loss_center: 0.6355  loss_offset: 0.3804  time: 1.0637  data_time: 0.0586  lr: 0.00040001  max_mem: 19293M
[10/10 02:47:21] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0010999.pth
[10/10 02:47:23] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 02:47:23] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 02:47:23] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 02:47:23] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 02:47:37] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0021 s/iter. Inference: 0.0784 s/iter. Eval: 0.0313 s/iter. Total: 0.1118 s/iter. ETA=0:00:26
[10/10 02:47:42] d2.evaluation.evaluator INFO: Inference done 62/250. Dataloading: 0.0013 s/iter. Inference: 0.0699 s/iter. Eval: 0.0294 s/iter. Total: 0.1007 s/iter. ETA=0:00:18
[10/10 02:47:47] d2.evaluation.evaluator INFO: Inference done 117/250. Dataloading: 0.0014 s/iter. Inference: 0.0663 s/iter. Eval: 0.0286 s/iter. Total: 0.0964 s/iter. ETA=0:00:12
[10/10 02:47:52] d2.evaluation.evaluator INFO: Inference done 170/250. Dataloading: 0.0014 s/iter. Inference: 0.0659 s/iter. Eval: 0.0285 s/iter. Total: 0.0958 s/iter. ETA=0:00:07
[10/10 02:47:57] d2.evaluation.evaluator INFO: Inference done 225/250. Dataloading: 0.0015 s/iter. Inference: 0.0653 s/iter. Eval: 0.0281 s/iter. Total: 0.0949 s/iter. ETA=0:00:02
[10/10 02:48:00] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.462287 (0.095764 s / iter per device, on 2 devices)
[10/10 02:48:00] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.064994 s / iter per device, on 2 devices)
[10/10 02:48:00] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evall12bpork ...
[10/10 02:48:05] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 16.084814151031047
[10/10 02:48:05] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.343 | 42.311 | 15.365 |      130      |
| Things | 8.644  | 39.060 | 12.118 |      77       |
| Stuff  | 15.265 | 47.034 | 20.082 |      53       |
[10/10 02:48:05] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 02:48:05] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 02:48:05] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 02:48:05] d2.evaluation.testing INFO: copypaste: 11.3429,42.3110,15.3645,8.6436,39.0603,12.1175,15.2646,47.0339,20.0818
[10/10 02:48:05] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 02:48:05] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 02:48:05] d2.evaluation.testing INFO: copypaste: 0.1608
[10/10 02:48:05] d2.utils.events INFO:  eta: 11:29:36  iter: 10999  total_loss: 2.99  loss_sem_seg: 1.773  loss_relation: 0.185  loss_center: 0.7213  loss_offset: 0.3554  time: 1.0637  data_time: 0.0630  lr: 0.00039982  max_mem: 19293M
[10/10 02:48:05] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/10 02:48:12] d2.engine.hooks INFO: Saved best model as latest eval score for relation_mean_recall/mean_recall is 0.16085, better than last best score 0.15042 @ iteration 7999.
[10/10 02:48:33] d2.utils.events INFO:  eta: 11:29:14  iter: 11019  total_loss: 3.064  loss_sem_seg: 1.795  loss_relation: 0.2016  loss_center: 0.6438  loss_offset: 0.3795  time: 1.0637  data_time: 0.0634  lr: 0.00039964  max_mem: 19293M
[10/10 02:48:54] d2.utils.events INFO:  eta: 11:28:51  iter: 11039  total_loss: 2.981  loss_sem_seg: 1.657  loss_relation: 0.1944  loss_center: 0.6358  loss_offset: 0.3949  time: 1.0636  data_time: 0.0585  lr: 0.00039945  max_mem: 19293M
[10/10 02:49:16] d2.utils.events INFO:  eta: 11:28:33  iter: 11059  total_loss: 3.036  loss_sem_seg: 1.725  loss_relation: 0.2015  loss_center: 0.6567  loss_offset: 0.3896  time: 1.0637  data_time: 0.0652  lr: 0.00039927  max_mem: 19293M
[10/10 02:49:37] d2.utils.events INFO:  eta: 11:28:13  iter: 11079  total_loss: 2.894  loss_sem_seg: 1.703  loss_relation: 0.1855  loss_center: 0.6473  loss_offset: 0.3666  time: 1.0637  data_time: 0.0598  lr: 0.00039908  max_mem: 19293M
[10/10 02:49:58] d2.utils.events INFO:  eta: 11:27:50  iter: 11099  total_loss: 3.055  loss_sem_seg: 1.717  loss_relation: 0.1948  loss_center: 0.6876  loss_offset: 0.4164  time: 1.0636  data_time: 0.0562  lr: 0.0003989  max_mem: 19293M
[10/10 02:50:19] d2.utils.events INFO:  eta: 11:27:23  iter: 11119  total_loss: 3.129  loss_sem_seg: 1.805  loss_relation: 0.194  loss_center: 0.6862  loss_offset: 0.4051  time: 1.0636  data_time: 0.0581  lr: 0.00039871  max_mem: 19293M
[10/10 02:50:41] d2.utils.events INFO:  eta: 11:26:54  iter: 11139  total_loss: 3.107  loss_sem_seg: 1.851  loss_relation: 0.1985  loss_center: 0.6418  loss_offset: 0.3415  time: 1.0636  data_time: 0.0605  lr: 0.00039853  max_mem: 19293M
[10/10 02:51:02] d2.utils.events INFO:  eta: 11:26:33  iter: 11159  total_loss: 2.842  loss_sem_seg: 1.667  loss_relation: 0.2011  loss_center: 0.6192  loss_offset: 0.3773  time: 1.0636  data_time: 0.0618  lr: 0.00039834  max_mem: 19293M
[10/10 02:51:23] d2.utils.events INFO:  eta: 11:26:13  iter: 11179  total_loss: 3.141  loss_sem_seg: 1.793  loss_relation: 0.2011  loss_center: 0.6938  loss_offset: 0.4087  time: 1.0636  data_time: 0.0592  lr: 0.00039816  max_mem: 19293M
[10/10 02:51:44] d2.utils.events INFO:  eta: 11:25:51  iter: 11199  total_loss: 2.991  loss_sem_seg: 1.787  loss_relation: 0.1978  loss_center: 0.5966  loss_offset: 0.3766  time: 1.0636  data_time: 0.0605  lr: 0.00039797  max_mem: 19293M
[10/10 02:52:06] d2.utils.events INFO:  eta: 11:25:35  iter: 11219  total_loss: 3.005  loss_sem_seg: 1.669  loss_relation: 0.204  loss_center: 0.706  loss_offset: 0.4214  time: 1.0636  data_time: 0.0634  lr: 0.00039779  max_mem: 19293M
[10/10 02:52:27] d2.utils.events INFO:  eta: 11:25:14  iter: 11239  total_loss: 3.488  loss_sem_seg: 2.069  loss_relation: 0.2146  loss_center: 0.672  loss_offset: 0.4246  time: 1.0636  data_time: 0.0588  lr: 0.00039761  max_mem: 19293M
[10/10 02:52:48] d2.utils.events INFO:  eta: 11:24:48  iter: 11259  total_loss: 3.323  loss_sem_seg: 2.023  loss_relation: 0.2042  loss_center: 0.6872  loss_offset: 0.3824  time: 1.0637  data_time: 0.0612  lr: 0.00039742  max_mem: 19293M
[10/10 02:53:10] d2.utils.events INFO:  eta: 11:24:25  iter: 11279  total_loss: 3.216  loss_sem_seg: 1.898  loss_relation: 0.1974  loss_center: 0.7016  loss_offset: 0.4238  time: 1.0636  data_time: 0.0585  lr: 0.00039724  max_mem: 19293M
[10/10 02:53:31] d2.utils.events INFO:  eta: 11:24:07  iter: 11299  total_loss: 3.191  loss_sem_seg: 1.989  loss_relation: 0.1954  loss_center: 0.6889  loss_offset: 0.3851  time: 1.0636  data_time: 0.0601  lr: 0.00039705  max_mem: 19293M
[10/10 02:53:52] d2.utils.events INFO:  eta: 11:23:47  iter: 11319  total_loss: 2.983  loss_sem_seg: 1.774  loss_relation: 0.1915  loss_center: 0.6302  loss_offset: 0.3995  time: 1.0636  data_time: 0.0563  lr: 0.00039687  max_mem: 19293M
[10/10 02:54:13] d2.utils.events INFO:  eta: 11:23:30  iter: 11339  total_loss: 2.848  loss_sem_seg: 1.665  loss_relation: 0.1901  loss_center: 0.648  loss_offset: 0.3656  time: 1.0636  data_time: 0.0630  lr: 0.00039668  max_mem: 19293M
[10/10 02:54:35] d2.utils.events INFO:  eta: 11:23:15  iter: 11359  total_loss: 2.814  loss_sem_seg: 1.602  loss_relation: 0.1873  loss_center: 0.5997  loss_offset: 0.4009  time: 1.0636  data_time: 0.0648  lr: 0.0003965  max_mem: 19293M
[10/10 02:54:56] d2.utils.events INFO:  eta: 11:22:56  iter: 11379  total_loss: 3.013  loss_sem_seg: 1.747  loss_relation: 0.1966  loss_center: 0.6456  loss_offset: 0.3763  time: 1.0637  data_time: 0.0654  lr: 0.00039631  max_mem: 19293M
[10/10 02:55:17] d2.utils.events INFO:  eta: 11:22:35  iter: 11399  total_loss: 3.033  loss_sem_seg: 1.855  loss_relation: 0.2016  loss_center: 0.6597  loss_offset: 0.3864  time: 1.0637  data_time: 0.0647  lr: 0.00039613  max_mem: 19293M
[10/10 02:55:39] d2.utils.events INFO:  eta: 11:22:13  iter: 11419  total_loss: 2.901  loss_sem_seg: 1.672  loss_relation: 0.1905  loss_center: 0.6493  loss_offset: 0.3532  time: 1.0637  data_time: 0.0608  lr: 0.00039594  max_mem: 19293M
[10/10 02:56:00] d2.utils.events INFO:  eta: 11:21:47  iter: 11439  total_loss: 2.93  loss_sem_seg: 1.667  loss_relation: 0.1947  loss_center: 0.6754  loss_offset: 0.3747  time: 1.0637  data_time: 0.0614  lr: 0.00039576  max_mem: 19293M
[10/10 02:56:21] d2.utils.events INFO:  eta: 11:21:26  iter: 11459  total_loss: 2.995  loss_sem_seg: 1.686  loss_relation: 0.2059  loss_center: 0.692  loss_offset: 0.3436  time: 1.0636  data_time: 0.0627  lr: 0.00039557  max_mem: 19293M
[10/10 02:56:42] d2.utils.events INFO:  eta: 11:21:09  iter: 11479  total_loss: 3  loss_sem_seg: 1.699  loss_relation: 0.2009  loss_center: 0.6898  loss_offset: 0.3701  time: 1.0637  data_time: 0.0629  lr: 0.00039539  max_mem: 19293M
[10/10 02:57:04] d2.utils.events INFO:  eta: 11:20:52  iter: 11499  total_loss: 2.968  loss_sem_seg: 1.68  loss_relation: 0.1964  loss_center: 0.6833  loss_offset: 0.4014  time: 1.0637  data_time: 0.0632  lr: 0.0003952  max_mem: 19293M
[10/10 02:57:25] d2.utils.events INFO:  eta: 11:20:28  iter: 11519  total_loss: 2.963  loss_sem_seg: 1.723  loss_relation: 0.1932  loss_center: 0.6643  loss_offset: 0.3863  time: 1.0637  data_time: 0.0619  lr: 0.00039502  max_mem: 19293M
[10/10 02:57:46] d2.utils.events INFO:  eta: 11:20:09  iter: 11539  total_loss: 2.897  loss_sem_seg: 1.651  loss_relation: 0.2056  loss_center: 0.7024  loss_offset: 0.3724  time: 1.0637  data_time: 0.0613  lr: 0.00039483  max_mem: 19293M
[10/10 02:58:08] d2.utils.events INFO:  eta: 11:19:48  iter: 11559  total_loss: 2.947  loss_sem_seg: 1.736  loss_relation: 0.2029  loss_center: 0.652  loss_offset: 0.3851  time: 1.0637  data_time: 0.0599  lr: 0.00039465  max_mem: 19293M
[10/10 02:58:29] d2.utils.events INFO:  eta: 11:19:29  iter: 11579  total_loss: 2.765  loss_sem_seg: 1.612  loss_relation: 0.179  loss_center: 0.5836  loss_offset: 0.341  time: 1.0636  data_time: 0.0611  lr: 0.00039447  max_mem: 19293M
[10/10 02:58:50] d2.utils.events INFO:  eta: 11:19:19  iter: 11599  total_loss: 2.965  loss_sem_seg: 1.716  loss_relation: 0.1895  loss_center: 0.6489  loss_offset: 0.4108  time: 1.0637  data_time: 0.0570  lr: 0.00039428  max_mem: 19293M
[10/10 02:59:11] d2.utils.events INFO:  eta: 11:18:55  iter: 11619  total_loss: 2.909  loss_sem_seg: 1.653  loss_relation: 0.1851  loss_center: 0.6349  loss_offset: 0.3811  time: 1.0637  data_time: 0.0630  lr: 0.0003941  max_mem: 19293M
[10/10 02:59:33] d2.utils.events INFO:  eta: 11:18:34  iter: 11639  total_loss: 3.184  loss_sem_seg: 1.848  loss_relation: 0.1951  loss_center: 0.7341  loss_offset: 0.3593  time: 1.0636  data_time: 0.0587  lr: 0.00039391  max_mem: 19293M
[10/10 02:59:54] d2.utils.events INFO:  eta: 11:18:23  iter: 11659  total_loss: 2.783  loss_sem_seg: 1.596  loss_relation: 0.1917  loss_center: 0.6142  loss_offset: 0.3754  time: 1.0636  data_time: 0.0630  lr: 0.00039373  max_mem: 19293M
[10/10 03:00:15] d2.utils.events INFO:  eta: 11:18:02  iter: 11679  total_loss: 2.836  loss_sem_seg: 1.674  loss_relation: 0.1842  loss_center: 0.6268  loss_offset: 0.3551  time: 1.0636  data_time: 0.0605  lr: 0.00039354  max_mem: 19293M
[10/10 03:00:37] d2.utils.events INFO:  eta: 11:17:46  iter: 11699  total_loss: 2.759  loss_sem_seg: 1.505  loss_relation: 0.1889  loss_center: 0.6606  loss_offset: 0.3489  time: 1.0636  data_time: 0.0629  lr: 0.00039336  max_mem: 19293M
[10/10 03:00:58] d2.utils.events INFO:  eta: 11:17:34  iter: 11719  total_loss: 2.765  loss_sem_seg: 1.582  loss_relation: 0.1927  loss_center: 0.6294  loss_offset: 0.3808  time: 1.0636  data_time: 0.0621  lr: 0.00039317  max_mem: 19293M
[10/10 03:01:19] d2.utils.events INFO:  eta: 11:17:14  iter: 11739  total_loss: 2.838  loss_sem_seg: 1.656  loss_relation: 0.1936  loss_center: 0.6356  loss_offset: 0.3758  time: 1.0637  data_time: 0.0668  lr: 0.00039299  max_mem: 19293M
[10/10 03:01:40] d2.utils.events INFO:  eta: 11:16:55  iter: 11759  total_loss: 2.831  loss_sem_seg: 1.609  loss_relation: 0.1923  loss_center: 0.6111  loss_offset: 0.3653  time: 1.0637  data_time: 0.0594  lr: 0.0003928  max_mem: 19293M
[10/10 03:02:02] d2.utils.events INFO:  eta: 11:16:31  iter: 11779  total_loss: 2.981  loss_sem_seg: 1.731  loss_relation: 0.1923  loss_center: 0.6567  loss_offset: 0.3723  time: 1.0636  data_time: 0.0589  lr: 0.00039262  max_mem: 19293M
[10/10 03:02:23] d2.utils.events INFO:  eta: 11:16:04  iter: 11799  total_loss: 2.818  loss_sem_seg: 1.574  loss_relation: 0.1887  loss_center: 0.6733  loss_offset: 0.3541  time: 1.0636  data_time: 0.0596  lr: 0.00039243  max_mem: 19293M
[10/10 03:02:44] d2.utils.events INFO:  eta: 11:15:21  iter: 11819  total_loss: 2.95  loss_sem_seg: 1.635  loss_relation: 0.1839  loss_center: 0.6782  loss_offset: 0.417  time: 1.0636  data_time: 0.0583  lr: 0.00039225  max_mem: 19293M
[10/10 03:03:05] d2.utils.events INFO:  eta: 11:15:02  iter: 11839  total_loss: 2.617  loss_sem_seg: 1.512  loss_relation: 0.1801  loss_center: 0.5996  loss_offset: 0.3824  time: 1.0636  data_time: 0.0651  lr: 0.00039206  max_mem: 19293M
[10/10 03:03:27] d2.utils.events INFO:  eta: 11:14:41  iter: 11859  total_loss: 2.83  loss_sem_seg: 1.634  loss_relation: 0.1824  loss_center: 0.6171  loss_offset: 0.3767  time: 1.0636  data_time: 0.0598  lr: 0.00039188  max_mem: 19293M
[10/10 03:03:48] d2.utils.events INFO:  eta: 11:14:17  iter: 11879  total_loss: 2.807  loss_sem_seg: 1.579  loss_relation: 0.1748  loss_center: 0.6591  loss_offset: 0.3171  time: 1.0636  data_time: 0.0569  lr: 0.00039169  max_mem: 19293M
[10/10 03:04:09] d2.utils.events INFO:  eta: 11:13:49  iter: 11899  total_loss: 2.686  loss_sem_seg: 1.506  loss_relation: 0.1742  loss_center: 0.6603  loss_offset: 0.4014  time: 1.0636  data_time: 0.0564  lr: 0.00039151  max_mem: 19293M
[10/10 03:04:30] d2.utils.events INFO:  eta: 11:13:24  iter: 11919  total_loss: 2.749  loss_sem_seg: 1.562  loss_relation: 0.1849  loss_center: 0.623  loss_offset: 0.3512  time: 1.0636  data_time: 0.0553  lr: 0.00039132  max_mem: 19293M
[10/10 03:04:51] d2.utils.events INFO:  eta: 11:13:03  iter: 11939  total_loss: 2.682  loss_sem_seg: 1.525  loss_relation: 0.1858  loss_center: 0.6233  loss_offset: 0.3444  time: 1.0636  data_time: 0.0600  lr: 0.00039114  max_mem: 19293M
[10/10 03:05:13] d2.utils.events INFO:  eta: 11:12:40  iter: 11959  total_loss: 2.702  loss_sem_seg: 1.552  loss_relation: 0.1853  loss_center: 0.5932  loss_offset: 0.3621  time: 1.0636  data_time: 0.0663  lr: 0.00039095  max_mem: 19293M
[10/10 03:05:34] d2.utils.events INFO:  eta: 11:12:13  iter: 11979  total_loss: 2.984  loss_sem_seg: 1.779  loss_relation: 0.1982  loss_center: 0.664  loss_offset: 0.3614  time: 1.0636  data_time: 0.0635  lr: 0.00039077  max_mem: 19293M
[10/10 03:05:55] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0011999.pth
[10/10 03:05:57] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 03:05:57] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 03:05:57] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 03:05:57] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 03:06:11] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0003 s/iter. Inference: 0.0708 s/iter. Eval: 0.0281 s/iter. Total: 0.0992 s/iter. ETA=0:00:23
[10/10 03:06:16] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0013 s/iter. Inference: 0.0677 s/iter. Eval: 0.0287 s/iter. Total: 0.0978 s/iter. ETA=0:00:18
[10/10 03:06:21] d2.evaluation.evaluator INFO: Inference done 119/250. Dataloading: 0.0013 s/iter. Inference: 0.0642 s/iter. Eval: 0.0282 s/iter. Total: 0.0938 s/iter. ETA=0:00:12
[10/10 03:06:26] d2.evaluation.evaluator INFO: Inference done 172/250. Dataloading: 0.0014 s/iter. Inference: 0.0643 s/iter. Eval: 0.0283 s/iter. Total: 0.0940 s/iter. ETA=0:00:07
[10/10 03:06:31] d2.evaluation.evaluator INFO: Inference done 228/250. Dataloading: 0.0014 s/iter. Inference: 0.0638 s/iter. Eval: 0.0279 s/iter. Total: 0.0931 s/iter. ETA=0:00:02
[10/10 03:06:33] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.218482 (0.094769 s / iter per device, on 2 devices)
[10/10 03:06:33] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063815 s / iter per device, on 2 devices)
[10/10 03:06:33] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalkmy6cm4k ...
[10/10 03:06:38] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 16.204757497084962
[10/10 03:06:38] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.236 | 45.307 | 15.275 |      129      |
| Things | 9.100  | 41.985 | 12.847 |      76       |
| Stuff  | 14.299 | 50.071 | 18.757 |      53       |
[10/10 03:06:38] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 03:06:38] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 03:06:38] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 03:06:38] d2.evaluation.testing INFO: copypaste: 11.2359,45.3073,15.2751,9.0997,41.9852,12.8467,14.2993,50.0710,18.7574
[10/10 03:06:38] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 03:06:38] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 03:06:38] d2.evaluation.testing INFO: copypaste: 0.1620
[10/10 03:06:38] d2.utils.events INFO:  eta: 11:11:48  iter: 11999  total_loss: 2.833  loss_sem_seg: 1.674  loss_relation: 0.1852  loss_center: 0.5981  loss_offset: 0.3712  time: 1.0636  data_time: 0.0599  lr: 0.00039058  max_mem: 19293M
[10/10 03:06:38] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_best.pth
[10/10 03:06:39] d2.engine.hooks INFO: Saved best model as latest eval score for relation_mean_recall/mean_recall is 0.16205, better than last best score 0.16085 @ iteration 10999.
[10/10 03:07:00] d2.utils.events INFO:  eta: 11:11:16  iter: 12019  total_loss: 2.762  loss_sem_seg: 1.612  loss_relation: 0.19  loss_center: 0.6546  loss_offset: 0.3551  time: 1.0636  data_time: 0.0572  lr: 0.0003904  max_mem: 19293M
[10/10 03:07:22] d2.utils.events INFO:  eta: 11:11:10  iter: 12039  total_loss: 2.806  loss_sem_seg: 1.6  loss_relation: 0.1907  loss_center: 0.6704  loss_offset: 0.3731  time: 1.0636  data_time: 0.0634  lr: 0.00039021  max_mem: 19293M
[10/10 03:07:43] d2.utils.events INFO:  eta: 11:10:45  iter: 12059  total_loss: 2.988  loss_sem_seg: 1.72  loss_relation: 0.1962  loss_center: 0.7188  loss_offset: 0.3657  time: 1.0636  data_time: 0.0647  lr: 0.00039003  max_mem: 19293M
[10/10 03:08:04] d2.utils.events INFO:  eta: 11:10:24  iter: 12079  total_loss: 2.918  loss_sem_seg: 1.763  loss_relation: 0.1983  loss_center: 0.7226  loss_offset: 0.3885  time: 1.0636  data_time: 0.0644  lr: 0.00038984  max_mem: 19293M
[10/10 03:08:26] d2.utils.events INFO:  eta: 11:10:10  iter: 12099  total_loss: 2.701  loss_sem_seg: 1.549  loss_relation: 0.1866  loss_center: 0.6222  loss_offset: 0.3719  time: 1.0636  data_time: 0.0622  lr: 0.00038966  max_mem: 19293M
[10/10 03:08:47] d2.utils.events INFO:  eta: 11:09:51  iter: 12119  total_loss: 2.71  loss_sem_seg: 1.522  loss_relation: 0.1723  loss_center: 0.6164  loss_offset: 0.4065  time: 1.0636  data_time: 0.0601  lr: 0.00038947  max_mem: 19293M
[10/10 03:09:08] d2.utils.events INFO:  eta: 11:09:31  iter: 12139  total_loss: 2.79  loss_sem_seg: 1.572  loss_relation: 0.1795  loss_center: 0.7005  loss_offset: 0.3535  time: 1.0636  data_time: 0.0619  lr: 0.00038929  max_mem: 19293M
[10/10 03:09:30] d2.utils.events INFO:  eta: 11:09:05  iter: 12159  total_loss: 2.965  loss_sem_seg: 1.675  loss_relation: 0.1838  loss_center: 0.6443  loss_offset: 0.3915  time: 1.0636  data_time: 0.0545  lr: 0.0003891  max_mem: 19293M
[10/10 03:09:51] d2.utils.events INFO:  eta: 11:08:36  iter: 12179  total_loss: 2.754  loss_sem_seg: 1.534  loss_relation: 0.1772  loss_center: 0.6215  loss_offset: 0.3637  time: 1.0636  data_time: 0.0624  lr: 0.00038892  max_mem: 19293M
[10/10 03:10:12] d2.utils.events INFO:  eta: 11:08:18  iter: 12199  total_loss: 2.908  loss_sem_seg: 1.685  loss_relation: 0.1892  loss_center: 0.6475  loss_offset: 0.386  time: 1.0636  data_time: 0.0653  lr: 0.00038873  max_mem: 19293M
[10/10 03:10:33] d2.utils.events INFO:  eta: 11:07:49  iter: 12219  total_loss: 2.748  loss_sem_seg: 1.546  loss_relation: 0.1835  loss_center: 0.6086  loss_offset: 0.3795  time: 1.0636  data_time: 0.0602  lr: 0.00038855  max_mem: 19293M
[10/10 03:10:55] d2.utils.events INFO:  eta: 11:07:17  iter: 12239  total_loss: 2.886  loss_sem_seg: 1.636  loss_relation: 0.1891  loss_center: 0.713  loss_offset: 0.4057  time: 1.0636  data_time: 0.0597  lr: 0.00038836  max_mem: 19293M
[10/10 03:11:16] d2.utils.events INFO:  eta: 11:06:55  iter: 12259  total_loss: 2.811  loss_sem_seg: 1.556  loss_relation: 0.1827  loss_center: 0.6766  loss_offset: 0.3499  time: 1.0636  data_time: 0.0593  lr: 0.00038818  max_mem: 19293M
[10/10 03:11:37] d2.utils.events INFO:  eta: 11:06:38  iter: 12279  total_loss: 2.819  loss_sem_seg: 1.527  loss_relation: 0.1853  loss_center: 0.6055  loss_offset: 0.3723  time: 1.0636  data_time: 0.0669  lr: 0.00038799  max_mem: 19293M
[10/10 03:11:59] d2.utils.events INFO:  eta: 11:06:13  iter: 12299  total_loss: 2.785  loss_sem_seg: 1.53  loss_relation: 0.1784  loss_center: 0.6273  loss_offset: 0.3629  time: 1.0636  data_time: 0.0629  lr: 0.00038781  max_mem: 19293M
[10/10 03:12:20] d2.utils.events INFO:  eta: 11:06:00  iter: 12319  total_loss: 2.824  loss_sem_seg: 1.528  loss_relation: 0.1903  loss_center: 0.6467  loss_offset: 0.3724  time: 1.0636  data_time: 0.0598  lr: 0.00038762  max_mem: 19293M
[10/10 03:12:41] d2.utils.events INFO:  eta: 11:05:31  iter: 12339  total_loss: 2.637  loss_sem_seg: 1.478  loss_relation: 0.1833  loss_center: 0.5999  loss_offset: 0.373  time: 1.0636  data_time: 0.0575  lr: 0.00038744  max_mem: 19293M
[10/10 03:13:02] d2.utils.events INFO:  eta: 11:05:09  iter: 12359  total_loss: 2.59  loss_sem_seg: 1.466  loss_relation: 0.1858  loss_center: 0.5879  loss_offset: 0.3459  time: 1.0636  data_time: 0.0629  lr: 0.00038725  max_mem: 19293M
[10/10 03:13:23] d2.utils.events INFO:  eta: 11:04:46  iter: 12379  total_loss: 2.65  loss_sem_seg: 1.533  loss_relation: 0.1835  loss_center: 0.6741  loss_offset: 0.3395  time: 1.0636  data_time: 0.0570  lr: 0.00038707  max_mem: 19293M
[10/10 03:13:45] d2.utils.events INFO:  eta: 11:04:24  iter: 12399  total_loss: 2.723  loss_sem_seg: 1.449  loss_relation: 0.1777  loss_center: 0.6486  loss_offset: 0.3516  time: 1.0636  data_time: 0.0680  lr: 0.00038688  max_mem: 19293M
[10/10 03:14:06] d2.utils.events INFO:  eta: 11:04:06  iter: 12419  total_loss: 2.693  loss_sem_seg: 1.506  loss_relation: 0.1771  loss_center: 0.6147  loss_offset: 0.3576  time: 1.0636  data_time: 0.0615  lr: 0.00038669  max_mem: 19293M
[10/10 03:14:27] d2.utils.events INFO:  eta: 11:03:54  iter: 12439  total_loss: 2.671  loss_sem_seg: 1.522  loss_relation: 0.173  loss_center: 0.634  loss_offset: 0.3416  time: 1.0636  data_time: 0.0610  lr: 0.00038651  max_mem: 19293M
[10/10 03:14:49] d2.utils.events INFO:  eta: 11:03:35  iter: 12459  total_loss: 2.769  loss_sem_seg: 1.579  loss_relation: 0.1794  loss_center: 0.649  loss_offset: 0.3766  time: 1.0636  data_time: 0.0589  lr: 0.00038632  max_mem: 19293M
[10/10 03:15:10] d2.utils.events INFO:  eta: 11:03:12  iter: 12479  total_loss: 2.636  loss_sem_seg: 1.485  loss_relation: 0.1759  loss_center: 0.6383  loss_offset: 0.3427  time: 1.0636  data_time: 0.0603  lr: 0.00038614  max_mem: 19293M
[10/10 03:15:31] d2.utils.events INFO:  eta: 11:02:49  iter: 12499  total_loss: 2.782  loss_sem_seg: 1.543  loss_relation: 0.1864  loss_center: 0.6388  loss_offset: 0.3635  time: 1.0636  data_time: 0.0651  lr: 0.00038595  max_mem: 19293M
[10/10 03:15:53] d2.utils.events INFO:  eta: 11:02:31  iter: 12519  total_loss: 2.735  loss_sem_seg: 1.537  loss_relation: 0.1838  loss_center: 0.6514  loss_offset: 0.4031  time: 1.0636  data_time: 0.0570  lr: 0.00038577  max_mem: 19293M
[10/10 03:16:14] d2.utils.events INFO:  eta: 11:02:08  iter: 12539  total_loss: 2.744  loss_sem_seg: 1.521  loss_relation: 0.1712  loss_center: 0.611  loss_offset: 0.3693  time: 1.0636  data_time: 0.0607  lr: 0.00038558  max_mem: 19293M
[10/10 03:16:35] d2.utils.events INFO:  eta: 11:01:45  iter: 12559  total_loss: 2.669  loss_sem_seg: 1.505  loss_relation: 0.1804  loss_center: 0.6249  loss_offset: 0.3717  time: 1.0636  data_time: 0.0583  lr: 0.0003854  max_mem: 19293M
[10/10 03:16:56] d2.utils.events INFO:  eta: 11:01:27  iter: 12579  total_loss: 2.684  loss_sem_seg: 1.541  loss_relation: 0.1871  loss_center: 0.6317  loss_offset: 0.3836  time: 1.0636  data_time: 0.0625  lr: 0.00038521  max_mem: 19293M
[10/10 03:17:17] d2.utils.events INFO:  eta: 11:01:04  iter: 12599  total_loss: 3.109  loss_sem_seg: 1.793  loss_relation: 0.188  loss_center: 0.6612  loss_offset: 0.3726  time: 1.0636  data_time: 0.0580  lr: 0.00038503  max_mem: 19293M
[10/10 03:17:39] d2.utils.events INFO:  eta: 11:00:36  iter: 12619  total_loss: 3.238  loss_sem_seg: 1.86  loss_relation: 0.2061  loss_center: 0.6392  loss_offset: 0.3747  time: 1.0636  data_time: 0.0633  lr: 0.00038484  max_mem: 19293M
[10/10 03:18:00] d2.utils.events INFO:  eta: 11:00:14  iter: 12639  total_loss: 3.239  loss_sem_seg: 1.841  loss_relation: 0.2104  loss_center: 0.7296  loss_offset: 0.3784  time: 1.0636  data_time: 0.0605  lr: 0.00038466  max_mem: 19293M
[10/10 03:18:21] d2.utils.events INFO:  eta: 10:59:52  iter: 12659  total_loss: 3.134  loss_sem_seg: 1.76  loss_relation: 0.1968  loss_center: 0.6774  loss_offset: 0.3896  time: 1.0636  data_time: 0.0605  lr: 0.00038447  max_mem: 19293M
[10/10 03:18:42] d2.utils.events INFO:  eta: 10:59:31  iter: 12679  total_loss: 2.839  loss_sem_seg: 1.634  loss_relation: 0.1777  loss_center: 0.7075  loss_offset: 0.3688  time: 1.0636  data_time: 0.0590  lr: 0.00038429  max_mem: 19293M
[10/10 03:19:04] d2.utils.events INFO:  eta: 10:59:09  iter: 12699  total_loss: 2.77  loss_sem_seg: 1.583  loss_relation: 0.1764  loss_center: 0.6668  loss_offset: 0.3748  time: 1.0636  data_time: 0.0586  lr: 0.0003841  max_mem: 19293M
[10/10 03:19:25] d2.utils.events INFO:  eta: 10:58:49  iter: 12719  total_loss: 2.691  loss_sem_seg: 1.482  loss_relation: 0.1815  loss_center: 0.6349  loss_offset: 0.3604  time: 1.0635  data_time: 0.0563  lr: 0.00038392  max_mem: 19293M
[10/10 03:19:46] d2.utils.events INFO:  eta: 10:58:28  iter: 12739  total_loss: 2.789  loss_sem_seg: 1.607  loss_relation: 0.1762  loss_center: 0.6537  loss_offset: 0.3597  time: 1.0636  data_time: 0.0601  lr: 0.00038373  max_mem: 19293M
[10/10 03:20:07] d2.utils.events INFO:  eta: 10:58:06  iter: 12759  total_loss: 2.857  loss_sem_seg: 1.681  loss_relation: 0.1791  loss_center: 0.6484  loss_offset: 0.3811  time: 1.0635  data_time: 0.0570  lr: 0.00038354  max_mem: 19293M
[10/10 03:20:29] d2.utils.events INFO:  eta: 10:57:45  iter: 12779  total_loss: 2.913  loss_sem_seg: 1.778  loss_relation: 0.1848  loss_center: 0.6316  loss_offset: 0.3669  time: 1.0635  data_time: 0.0625  lr: 0.00038336  max_mem: 19293M
[10/10 03:20:50] d2.utils.events INFO:  eta: 10:57:23  iter: 12799  total_loss: 2.742  loss_sem_seg: 1.549  loss_relation: 0.1852  loss_center: 0.586  loss_offset: 0.3645  time: 1.0635  data_time: 0.0614  lr: 0.00038317  max_mem: 19293M
[10/10 03:21:11] d2.utils.events INFO:  eta: 10:57:07  iter: 12819  total_loss: 2.913  loss_sem_seg: 1.711  loss_relation: 0.1933  loss_center: 0.5631  loss_offset: 0.3888  time: 1.0635  data_time: 0.0620  lr: 0.00038299  max_mem: 19293M
[10/10 03:21:32] d2.utils.events INFO:  eta: 10:56:48  iter: 12839  total_loss: 2.917  loss_sem_seg: 1.684  loss_relation: 0.1856  loss_center: 0.6467  loss_offset: 0.4162  time: 1.0635  data_time: 0.0642  lr: 0.0003828  max_mem: 19293M
[10/10 03:21:54] d2.utils.events INFO:  eta: 10:56:27  iter: 12859  total_loss: 2.872  loss_sem_seg: 1.617  loss_relation: 0.1901  loss_center: 0.6406  loss_offset: 0.3709  time: 1.0636  data_time: 0.0617  lr: 0.00038262  max_mem: 19293M
[10/10 03:22:15] d2.utils.events INFO:  eta: 10:56:08  iter: 12879  total_loss: 2.932  loss_sem_seg: 1.73  loss_relation: 0.1839  loss_center: 0.6425  loss_offset: 0.3646  time: 1.0636  data_time: 0.0629  lr: 0.00038243  max_mem: 19293M
[10/10 03:22:36] d2.utils.events INFO:  eta: 10:55:47  iter: 12899  total_loss: 2.71  loss_sem_seg: 1.595  loss_relation: 0.1809  loss_center: 0.6063  loss_offset: 0.3497  time: 1.0636  data_time: 0.0619  lr: 0.00038225  max_mem: 19293M
[10/10 03:22:57] d2.utils.events INFO:  eta: 10:55:28  iter: 12919  total_loss: 2.669  loss_sem_seg: 1.513  loss_relation: 0.1785  loss_center: 0.601  loss_offset: 0.3434  time: 1.0635  data_time: 0.0570  lr: 0.00038206  max_mem: 19293M
[10/10 03:23:19] d2.utils.events INFO:  eta: 10:55:11  iter: 12939  total_loss: 2.858  loss_sem_seg: 1.671  loss_relation: 0.1853  loss_center: 0.6766  loss_offset: 0.3584  time: 1.0635  data_time: 0.0634  lr: 0.00038188  max_mem: 19293M
[10/10 03:23:40] d2.utils.events INFO:  eta: 10:54:50  iter: 12959  total_loss: 2.72  loss_sem_seg: 1.563  loss_relation: 0.17  loss_center: 0.6445  loss_offset: 0.3563  time: 1.0635  data_time: 0.0672  lr: 0.00038169  max_mem: 19293M
[10/10 03:24:01] d2.utils.events INFO:  eta: 10:54:27  iter: 12979  total_loss: 2.681  loss_sem_seg: 1.55  loss_relation: 0.1701  loss_center: 0.6299  loss_offset: 0.3425  time: 1.0636  data_time: 0.0592  lr: 0.00038151  max_mem: 19293M
[10/10 03:24:23] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0012999.pth
[10/10 03:24:24] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 03:24:24] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 03:24:24] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 03:24:24] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 03:24:39] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0005 s/iter. Inference: 0.0737 s/iter. Eval: 0.0281 s/iter. Total: 0.1023 s/iter. ETA=0:00:24
[10/10 03:24:44] d2.evaluation.evaluator INFO: Inference done 65/250. Dataloading: 0.0010 s/iter. Inference: 0.0658 s/iter. Eval: 0.0286 s/iter. Total: 0.0955 s/iter. ETA=0:00:17
[10/10 03:24:49] d2.evaluation.evaluator INFO: Inference done 122/250. Dataloading: 0.0012 s/iter. Inference: 0.0625 s/iter. Eval: 0.0284 s/iter. Total: 0.0921 s/iter. ETA=0:00:11
[10/10 03:24:54] d2.evaluation.evaluator INFO: Inference done 176/250. Dataloading: 0.0013 s/iter. Inference: 0.0630 s/iter. Eval: 0.0284 s/iter. Total: 0.0927 s/iter. ETA=0:00:06
[10/10 03:24:59] d2.evaluation.evaluator INFO: Inference done 233/250. Dataloading: 0.0013 s/iter. Inference: 0.0624 s/iter. Eval: 0.0280 s/iter. Total: 0.0917 s/iter. ETA=0:00:01
[10/10 03:25:01] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.786578 (0.093006 s / iter per device, on 2 devices)
[10/10 03:25:01] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062252 s / iter per device, on 2 devices)
[10/10 03:25:01] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalkgamuyf4 ...
[10/10 03:25:06] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 15.526008585728746
[10/10 03:25:06] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.932 | 45.610 | 16.065 |      129      |
| Things | 9.930  | 44.202 | 13.680 |      76       |
| Stuff  | 14.803 | 47.628 | 19.485 |      53       |
[10/10 03:25:06] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 03:25:06] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 03:25:06] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 03:25:06] d2.evaluation.testing INFO: copypaste: 11.9319,45.6097,16.0652,9.9299,44.2020,13.6804,14.8027,47.6283,19.4850
[10/10 03:25:06] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 03:25:06] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 03:25:06] d2.evaluation.testing INFO: copypaste: 0.1553
[10/10 03:25:06] d2.utils.events INFO:  eta: 10:54:08  iter: 12999  total_loss: 2.697  loss_sem_seg: 1.525  loss_relation: 0.1822  loss_center: 0.6235  loss_offset: 0.3594  time: 1.0635  data_time: 0.0576  lr: 0.00038132  max_mem: 19293M
[10/10 03:25:06] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.15526, not better than best score 0.16205 @ iteration 11999.
[10/10 03:25:28] d2.utils.events INFO:  eta: 10:53:51  iter: 13019  total_loss: 2.814  loss_sem_seg: 1.639  loss_relation: 0.1748  loss_center: 0.6008  loss_offset: 0.3781  time: 1.0635  data_time: 0.0616  lr: 0.00038113  max_mem: 19293M
[10/10 03:25:49] d2.utils.events INFO:  eta: 10:53:23  iter: 13039  total_loss: 2.523  loss_sem_seg: 1.425  loss_relation: 0.173  loss_center: 0.6231  loss_offset: 0.3708  time: 1.0635  data_time: 0.0643  lr: 0.00038095  max_mem: 19293M
[10/10 03:26:10] d2.utils.events INFO:  eta: 10:53:02  iter: 13059  total_loss: 2.671  loss_sem_seg: 1.59  loss_relation: 0.171  loss_center: 0.6  loss_offset: 0.3559  time: 1.0635  data_time: 0.0605  lr: 0.00038076  max_mem: 19293M
[10/10 03:26:31] d2.utils.events INFO:  eta: 10:52:37  iter: 13079  total_loss: 2.955  loss_sem_seg: 1.688  loss_relation: 0.1771  loss_center: 0.67  loss_offset: 0.3685  time: 1.0635  data_time: 0.0594  lr: 0.00038058  max_mem: 19293M
[10/10 03:26:53] d2.utils.events INFO:  eta: 10:52:17  iter: 13099  total_loss: 2.827  loss_sem_seg: 1.605  loss_relation: 0.1832  loss_center: 0.6613  loss_offset: 0.3678  time: 1.0635  data_time: 0.0618  lr: 0.00038039  max_mem: 19293M
[10/10 03:27:14] d2.utils.events INFO:  eta: 10:51:57  iter: 13119  total_loss: 2.699  loss_sem_seg: 1.602  loss_relation: 0.1812  loss_center: 0.651  loss_offset: 0.3289  time: 1.0636  data_time: 0.0676  lr: 0.00038021  max_mem: 19293M
[10/10 03:27:35] d2.utils.events INFO:  eta: 10:51:34  iter: 13139  total_loss: 2.866  loss_sem_seg: 1.671  loss_relation: 0.1794  loss_center: 0.6016  loss_offset: 0.3583  time: 1.0635  data_time: 0.0600  lr: 0.00038002  max_mem: 19293M
[10/10 03:27:57] d2.utils.events INFO:  eta: 10:51:20  iter: 13159  total_loss: 2.828  loss_sem_seg: 1.673  loss_relation: 0.1805  loss_center: 0.6567  loss_offset: 0.3676  time: 1.0635  data_time: 0.0623  lr: 0.00037984  max_mem: 19293M
[10/10 03:28:18] d2.utils.events INFO:  eta: 10:50:59  iter: 13179  total_loss: 2.846  loss_sem_seg: 1.673  loss_relation: 0.1826  loss_center: 0.6028  loss_offset: 0.3757  time: 1.0636  data_time: 0.0643  lr: 0.00037965  max_mem: 19293M
[10/10 03:28:39] d2.utils.events INFO:  eta: 10:50:31  iter: 13199  total_loss: 2.828  loss_sem_seg: 1.57  loss_relation: 0.1824  loss_center: 0.6426  loss_offset: 0.4096  time: 1.0636  data_time: 0.0608  lr: 0.00037946  max_mem: 19293M
[10/10 03:29:01] d2.utils.events INFO:  eta: 10:50:10  iter: 13219  total_loss: 2.848  loss_sem_seg: 1.555  loss_relation: 0.1773  loss_center: 0.6115  loss_offset: 0.3784  time: 1.0636  data_time: 0.0577  lr: 0.00037928  max_mem: 19293M
[10/10 03:29:22] d2.utils.events INFO:  eta: 10:49:53  iter: 13239  total_loss: 2.609  loss_sem_seg: 1.456  loss_relation: 0.1728  loss_center: 0.6605  loss_offset: 0.3643  time: 1.0636  data_time: 0.0615  lr: 0.00037909  max_mem: 19293M
[10/10 03:29:43] d2.utils.events INFO:  eta: 10:49:36  iter: 13259  total_loss: 2.766  loss_sem_seg: 1.587  loss_relation: 0.1727  loss_center: 0.6401  loss_offset: 0.3448  time: 1.0636  data_time: 0.0622  lr: 0.00037891  max_mem: 19293M
[10/10 03:30:04] d2.utils.events INFO:  eta: 10:49:15  iter: 13279  total_loss: 2.678  loss_sem_seg: 1.533  loss_relation: 0.1703  loss_center: 0.6561  loss_offset: 0.3704  time: 1.0636  data_time: 0.0597  lr: 0.00037872  max_mem: 19293M
[10/10 03:30:26] d2.utils.events INFO:  eta: 10:48:53  iter: 13299  total_loss: 2.751  loss_sem_seg: 1.552  loss_relation: 0.1733  loss_center: 0.6418  loss_offset: 0.3494  time: 1.0636  data_time: 0.0587  lr: 0.00037854  max_mem: 19293M
[10/10 03:30:47] d2.utils.events INFO:  eta: 10:48:32  iter: 13319  total_loss: 2.752  loss_sem_seg: 1.544  loss_relation: 0.1759  loss_center: 0.5843  loss_offset: 0.3446  time: 1.0636  data_time: 0.0591  lr: 0.00037835  max_mem: 19293M
[10/10 03:31:08] d2.utils.events INFO:  eta: 10:48:09  iter: 13339  total_loss: 2.47  loss_sem_seg: 1.403  loss_relation: 0.1671  loss_center: 0.593  loss_offset: 0.3288  time: 1.0635  data_time: 0.0561  lr: 0.00037816  max_mem: 19293M
[10/10 03:31:29] d2.utils.events INFO:  eta: 10:47:48  iter: 13359  total_loss: 2.687  loss_sem_seg: 1.555  loss_relation: 0.172  loss_center: 0.6158  loss_offset: 0.3318  time: 1.0635  data_time: 0.0610  lr: 0.00037798  max_mem: 19293M
[10/10 03:31:51] d2.utils.events INFO:  eta: 10:47:23  iter: 13379  total_loss: 2.743  loss_sem_seg: 1.546  loss_relation: 0.1811  loss_center: 0.6537  loss_offset: 0.3667  time: 1.0635  data_time: 0.0600  lr: 0.00037779  max_mem: 19293M
[10/10 03:32:12] d2.utils.events INFO:  eta: 10:47:01  iter: 13399  total_loss: 2.651  loss_sem_seg: 1.517  loss_relation: 0.1763  loss_center: 0.6219  loss_offset: 0.3841  time: 1.0635  data_time: 0.0625  lr: 0.00037761  max_mem: 19293M
[10/10 03:32:33] d2.utils.events INFO:  eta: 10:46:38  iter: 13419  total_loss: 2.627  loss_sem_seg: 1.467  loss_relation: 0.1727  loss_center: 0.6286  loss_offset: 0.3471  time: 1.0635  data_time: 0.0635  lr: 0.00037742  max_mem: 19293M
[10/10 03:32:54] d2.utils.events INFO:  eta: 10:46:16  iter: 13439  total_loss: 2.773  loss_sem_seg: 1.525  loss_relation: 0.176  loss_center: 0.6373  loss_offset: 0.3613  time: 1.0635  data_time: 0.0590  lr: 0.00037724  max_mem: 19293M
[10/10 03:33:16] d2.utils.events INFO:  eta: 10:45:53  iter: 13459  total_loss: 2.675  loss_sem_seg: 1.524  loss_relation: 0.1745  loss_center: 0.629  loss_offset: 0.3548  time: 1.0635  data_time: 0.0578  lr: 0.00037705  max_mem: 19293M
[10/10 03:33:37] d2.utils.events INFO:  eta: 10:45:27  iter: 13479  total_loss: 2.761  loss_sem_seg: 1.509  loss_relation: 0.181  loss_center: 0.6592  loss_offset: 0.3781  time: 1.0635  data_time: 0.0549  lr: 0.00037686  max_mem: 19293M
[10/10 03:33:58] d2.utils.events INFO:  eta: 10:45:05  iter: 13499  total_loss: 2.743  loss_sem_seg: 1.552  loss_relation: 0.1814  loss_center: 0.6422  loss_offset: 0.3938  time: 1.0635  data_time: 0.0634  lr: 0.00037668  max_mem: 19293M
[10/10 03:34:19] d2.utils.events INFO:  eta: 10:44:44  iter: 13519  total_loss: 2.603  loss_sem_seg: 1.424  loss_relation: 0.1686  loss_center: 0.5971  loss_offset: 0.3691  time: 1.0635  data_time: 0.0668  lr: 0.00037649  max_mem: 19293M
[10/10 03:34:41] d2.utils.events INFO:  eta: 10:44:28  iter: 13539  total_loss: 2.708  loss_sem_seg: 1.484  loss_relation: 0.1668  loss_center: 0.6594  loss_offset: 0.3407  time: 1.0635  data_time: 0.0615  lr: 0.00037631  max_mem: 19293M
[10/10 03:35:02] d2.utils.events INFO:  eta: 10:44:09  iter: 13559  total_loss: 2.694  loss_sem_seg: 1.518  loss_relation: 0.1699  loss_center: 0.6059  loss_offset: 0.3399  time: 1.0635  data_time: 0.0627  lr: 0.00037612  max_mem: 19293M
[10/10 03:35:23] d2.utils.events INFO:  eta: 10:43:45  iter: 13579  total_loss: 2.727  loss_sem_seg: 1.627  loss_relation: 0.1687  loss_center: 0.5975  loss_offset: 0.372  time: 1.0635  data_time: 0.0691  lr: 0.00037594  max_mem: 19293M
[10/10 03:35:45] d2.utils.events INFO:  eta: 10:43:14  iter: 13599  total_loss: 2.66  loss_sem_seg: 1.48  loss_relation: 0.1701  loss_center: 0.6426  loss_offset: 0.3519  time: 1.0635  data_time: 0.0596  lr: 0.00037575  max_mem: 19293M
[10/10 03:36:06] d2.utils.events INFO:  eta: 10:43:01  iter: 13619  total_loss: 2.719  loss_sem_seg: 1.594  loss_relation: 0.1709  loss_center: 0.6259  loss_offset: 0.3564  time: 1.0635  data_time: 0.0624  lr: 0.00037556  max_mem: 19293M
[10/10 03:36:27] d2.utils.events INFO:  eta: 10:42:42  iter: 13639  total_loss: 2.782  loss_sem_seg: 1.686  loss_relation: 0.1769  loss_center: 0.6115  loss_offset: 0.3693  time: 1.0635  data_time: 0.0639  lr: 0.00037538  max_mem: 19293M
[10/10 03:36:48] d2.utils.events INFO:  eta: 10:42:23  iter: 13659  total_loss: 2.772  loss_sem_seg: 1.551  loss_relation: 0.1682  loss_center: 0.5994  loss_offset: 0.3803  time: 1.0635  data_time: 0.0606  lr: 0.00037519  max_mem: 19293M
[10/10 03:37:10] d2.utils.events INFO:  eta: 10:42:00  iter: 13679  total_loss: 2.855  loss_sem_seg: 1.634  loss_relation: 0.1798  loss_center: 0.6381  loss_offset: 0.3721  time: 1.0635  data_time: 0.0570  lr: 0.00037501  max_mem: 19293M
[10/10 03:37:31] d2.utils.events INFO:  eta: 10:41:38  iter: 13699  total_loss: 2.782  loss_sem_seg: 1.54  loss_relation: 0.1737  loss_center: 0.6512  loss_offset: 0.3359  time: 1.0635  data_time: 0.0594  lr: 0.00037482  max_mem: 19293M
[10/10 03:37:52] d2.utils.events INFO:  eta: 10:41:18  iter: 13719  total_loss: 2.844  loss_sem_seg: 1.639  loss_relation: 0.181  loss_center: 0.636  loss_offset: 0.3609  time: 1.0635  data_time: 0.0611  lr: 0.00037463  max_mem: 19293M
[10/10 03:38:13] d2.utils.events INFO:  eta: 10:40:55  iter: 13739  total_loss: 2.628  loss_sem_seg: 1.502  loss_relation: 0.1728  loss_center: 0.6055  loss_offset: 0.3531  time: 1.0635  data_time: 0.0593  lr: 0.00037445  max_mem: 19293M
[10/10 03:38:35] d2.utils.events INFO:  eta: 10:40:39  iter: 13759  total_loss: 2.716  loss_sem_seg: 1.491  loss_relation: 0.1722  loss_center: 0.6366  loss_offset: 0.3498  time: 1.0635  data_time: 0.0553  lr: 0.00037426  max_mem: 19293M
[10/10 03:38:56] d2.utils.events INFO:  eta: 10:40:17  iter: 13779  total_loss: 2.736  loss_sem_seg: 1.558  loss_relation: 0.1735  loss_center: 0.7054  loss_offset: 0.3492  time: 1.0635  data_time: 0.0572  lr: 0.00037408  max_mem: 19293M
[10/10 03:39:17] d2.utils.events INFO:  eta: 10:39:57  iter: 13799  total_loss: 2.456  loss_sem_seg: 1.323  loss_relation: 0.1669  loss_center: 0.6133  loss_offset: 0.3393  time: 1.0635  data_time: 0.0615  lr: 0.00037389  max_mem: 19293M
[10/10 03:39:38] d2.utils.events INFO:  eta: 10:39:36  iter: 13819  total_loss: 2.594  loss_sem_seg: 1.426  loss_relation: 0.1566  loss_center: 0.6611  loss_offset: 0.3558  time: 1.0635  data_time: 0.0556  lr: 0.00037371  max_mem: 19293M
[10/10 03:39:59] d2.utils.events INFO:  eta: 10:39:10  iter: 13839  total_loss: 2.644  loss_sem_seg: 1.42  loss_relation: 0.1586  loss_center: 0.6455  loss_offset: 0.391  time: 1.0635  data_time: 0.0602  lr: 0.00037352  max_mem: 19293M
[10/10 03:40:21] d2.utils.events INFO:  eta: 10:38:44  iter: 13859  total_loss: 2.499  loss_sem_seg: 1.369  loss_relation: 0.1633  loss_center: 0.5715  loss_offset: 0.3487  time: 1.0635  data_time: 0.0562  lr: 0.00037333  max_mem: 19293M
[10/10 03:40:42] d2.utils.events INFO:  eta: 10:38:18  iter: 13879  total_loss: 2.633  loss_sem_seg: 1.48  loss_relation: 0.1674  loss_center: 0.6166  loss_offset: 0.3604  time: 1.0635  data_time: 0.0633  lr: 0.00037315  max_mem: 19293M
[10/10 03:41:03] d2.utils.events INFO:  eta: 10:37:58  iter: 13899  total_loss: 2.63  loss_sem_seg: 1.418  loss_relation: 0.1637  loss_center: 0.6417  loss_offset: 0.3517  time: 1.0635  data_time: 0.0644  lr: 0.00037296  max_mem: 19293M
[10/10 03:41:25] d2.utils.events INFO:  eta: 10:37:45  iter: 13919  total_loss: 2.696  loss_sem_seg: 1.575  loss_relation: 0.1708  loss_center: 0.6109  loss_offset: 0.3729  time: 1.0635  data_time: 0.0600  lr: 0.00037278  max_mem: 19293M
[10/10 03:41:46] d2.utils.events INFO:  eta: 10:37:12  iter: 13939  total_loss: 2.586  loss_sem_seg: 1.533  loss_relation: 0.1648  loss_center: 0.5652  loss_offset: 0.3614  time: 1.0635  data_time: 0.0577  lr: 0.00037259  max_mem: 19293M
[10/10 03:42:07] d2.utils.events INFO:  eta: 10:36:53  iter: 13959  total_loss: 2.608  loss_sem_seg: 1.399  loss_relation: 0.173  loss_center: 0.6647  loss_offset: 0.3612  time: 1.0635  data_time: 0.0659  lr: 0.0003724  max_mem: 19293M
[10/10 03:42:28] d2.utils.events INFO:  eta: 10:36:32  iter: 13979  total_loss: 2.712  loss_sem_seg: 1.589  loss_relation: 0.1716  loss_center: 0.6195  loss_offset: 0.3238  time: 1.0635  data_time: 0.0608  lr: 0.00037222  max_mem: 19293M
[10/10 03:42:50] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0013999.pth
[10/10 03:42:51] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 03:42:51] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 03:42:51] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 03:42:51] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 03:43:06] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0014 s/iter. Inference: 0.0746 s/iter. Eval: 0.0288 s/iter. Total: 0.1049 s/iter. ETA=0:00:25
[10/10 03:43:11] d2.evaluation.evaluator INFO: Inference done 64/250. Dataloading: 0.0012 s/iter. Inference: 0.0658 s/iter. Eval: 0.0288 s/iter. Total: 0.0959 s/iter. ETA=0:00:17
[10/10 03:43:16] d2.evaluation.evaluator INFO: Inference done 119/250. Dataloading: 0.0013 s/iter. Inference: 0.0641 s/iter. Eval: 0.0284 s/iter. Total: 0.0939 s/iter. ETA=0:00:12
[10/10 03:43:21] d2.evaluation.evaluator INFO: Inference done 173/250. Dataloading: 0.0014 s/iter. Inference: 0.0639 s/iter. Eval: 0.0283 s/iter. Total: 0.0937 s/iter. ETA=0:00:07
[10/10 03:43:26] d2.evaluation.evaluator INFO: Inference done 230/250. Dataloading: 0.0014 s/iter. Inference: 0.0631 s/iter. Eval: 0.0280 s/iter. Total: 0.0925 s/iter. ETA=0:00:01
[10/10 03:43:28] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.983790 (0.093811 s / iter per device, on 2 devices)
[10/10 03:43:28] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063004 s / iter per device, on 2 devices)
[10/10 03:43:28] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalex_jl1np ...
[10/10 03:43:33] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 13.426041226222694
[10/10 03:43:33] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.608 | 45.281 | 15.764 |      129      |
| Things | 9.343  | 43.757 | 12.947 |      76       |
| Stuff  | 14.856 | 47.467 | 19.803 |      53       |
[10/10 03:43:33] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 03:43:33] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 03:43:33] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 03:43:33] d2.evaluation.testing INFO: copypaste: 11.6081,45.2812,15.7639,9.3431,43.7569,12.9471,14.8559,47.4669,19.8031
[10/10 03:43:33] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 03:43:33] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 03:43:33] d2.evaluation.testing INFO: copypaste: 0.1343
[10/10 03:43:33] d2.utils.events INFO:  eta: 10:36:11  iter: 13999  total_loss: 2.742  loss_sem_seg: 1.627  loss_relation: 0.1739  loss_center: 0.6312  loss_offset: 0.3405  time: 1.0635  data_time: 0.0590  lr: 0.00037203  max_mem: 19293M
[10/10 03:43:33] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.13426, not better than best score 0.16205 @ iteration 11999.
[10/10 03:43:54] d2.utils.events INFO:  eta: 10:35:49  iter: 14019  total_loss: 2.614  loss_sem_seg: 1.43  loss_relation: 0.1749  loss_center: 0.638  loss_offset: 0.3508  time: 1.0635  data_time: 0.0622  lr: 0.00037185  max_mem: 19293M
[10/10 03:44:15] d2.utils.events INFO:  eta: 10:35:33  iter: 14039  total_loss: 2.684  loss_sem_seg: 1.494  loss_relation: 0.1694  loss_center: 0.6465  loss_offset: 0.3673  time: 1.0635  data_time: 0.0637  lr: 0.00037166  max_mem: 19293M
[10/10 03:44:37] d2.utils.events INFO:  eta: 10:35:15  iter: 14059  total_loss: 2.595  loss_sem_seg: 1.463  loss_relation: 0.1795  loss_center: 0.5645  loss_offset: 0.3436  time: 1.0635  data_time: 0.0593  lr: 0.00037147  max_mem: 19293M
[10/10 03:44:58] d2.utils.events INFO:  eta: 10:34:56  iter: 14079  total_loss: 2.552  loss_sem_seg: 1.397  loss_relation: 0.1602  loss_center: 0.6138  loss_offset: 0.3529  time: 1.0635  data_time: 0.0594  lr: 0.00037129  max_mem: 19293M
[10/10 03:45:19] d2.utils.events INFO:  eta: 10:34:36  iter: 14099  total_loss: 2.546  loss_sem_seg: 1.343  loss_relation: 0.1501  loss_center: 0.5856  loss_offset: 0.3661  time: 1.0635  data_time: 0.0644  lr: 0.0003711  max_mem: 19293M
[10/10 03:45:41] d2.utils.events INFO:  eta: 10:34:12  iter: 14119  total_loss: 2.556  loss_sem_seg: 1.387  loss_relation: 0.1565  loss_center: 0.6108  loss_offset: 0.3844  time: 1.0635  data_time: 0.0617  lr: 0.00037092  max_mem: 19293M
[10/10 03:46:02] d2.utils.events INFO:  eta: 10:33:51  iter: 14139  total_loss: 2.54  loss_sem_seg: 1.391  loss_relation: 0.1591  loss_center: 0.6222  loss_offset: 0.3289  time: 1.0635  data_time: 0.0616  lr: 0.00037073  max_mem: 19293M
[10/10 03:46:23] d2.utils.events INFO:  eta: 10:33:30  iter: 14159  total_loss: 2.544  loss_sem_seg: 1.346  loss_relation: 0.1708  loss_center: 0.6698  loss_offset: 0.352  time: 1.0635  data_time: 0.0611  lr: 0.00037054  max_mem: 19293M
[10/10 03:46:45] d2.utils.events INFO:  eta: 10:33:11  iter: 14179  total_loss: 2.481  loss_sem_seg: 1.331  loss_relation: 0.1585  loss_center: 0.6199  loss_offset: 0.3499  time: 1.0635  data_time: 0.0579  lr: 0.00037036  max_mem: 19293M
[10/10 03:47:06] d2.utils.events INFO:  eta: 10:33:02  iter: 14199  total_loss: 2.474  loss_sem_seg: 1.337  loss_relation: 0.1649  loss_center: 0.5869  loss_offset: 0.3842  time: 1.0635  data_time: 0.0677  lr: 0.00037017  max_mem: 19293M
[10/10 03:47:27] d2.utils.events INFO:  eta: 10:32:40  iter: 14219  total_loss: 2.574  loss_sem_seg: 1.479  loss_relation: 0.1691  loss_center: 0.5988  loss_offset: 0.3413  time: 1.0635  data_time: 0.0609  lr: 0.00036999  max_mem: 19293M
[10/10 03:47:48] d2.utils.events INFO:  eta: 10:32:18  iter: 14239  total_loss: 2.509  loss_sem_seg: 1.341  loss_relation: 0.1654  loss_center: 0.6213  loss_offset: 0.3806  time: 1.0635  data_time: 0.0613  lr: 0.0003698  max_mem: 19293M
[10/10 03:48:09] d2.utils.events INFO:  eta: 10:31:46  iter: 14259  total_loss: 2.522  loss_sem_seg: 1.406  loss_relation: 0.1749  loss_center: 0.6309  loss_offset: 0.3187  time: 1.0635  data_time: 0.0533  lr: 0.00036961  max_mem: 19293M
[10/10 03:48:31] d2.utils.events INFO:  eta: 10:31:27  iter: 14279  total_loss: 2.635  loss_sem_seg: 1.493  loss_relation: 0.1669  loss_center: 0.6076  loss_offset: 0.3319  time: 1.0635  data_time: 0.0629  lr: 0.00036943  max_mem: 19293M
[10/10 03:48:52] d2.utils.events INFO:  eta: 10:31:12  iter: 14299  total_loss: 2.731  loss_sem_seg: 1.478  loss_relation: 0.1683  loss_center: 0.6674  loss_offset: 0.3644  time: 1.0635  data_time: 0.0612  lr: 0.00036924  max_mem: 19293M
[10/10 03:49:13] d2.utils.events INFO:  eta: 10:30:55  iter: 14319  total_loss: 2.6  loss_sem_seg: 1.465  loss_relation: 0.1658  loss_center: 0.588  loss_offset: 0.3593  time: 1.0635  data_time: 0.0629  lr: 0.00036905  max_mem: 19293M
[10/10 03:49:35] d2.utils.events INFO:  eta: 10:30:34  iter: 14339  total_loss: 2.679  loss_sem_seg: 1.487  loss_relation: 0.1712  loss_center: 0.6283  loss_offset: 0.3603  time: 1.0635  data_time: 0.0617  lr: 0.00036887  max_mem: 19293M
[10/10 03:49:56] d2.utils.events INFO:  eta: 10:30:10  iter: 14359  total_loss: 2.563  loss_sem_seg: 1.353  loss_relation: 0.1548  loss_center: 0.6187  loss_offset: 0.3363  time: 1.0635  data_time: 0.0615  lr: 0.00036868  max_mem: 19293M
[10/10 03:50:17] d2.utils.events INFO:  eta: 10:29:52  iter: 14379  total_loss: 2.492  loss_sem_seg: 1.342  loss_relation: 0.1591  loss_center: 0.5991  loss_offset: 0.3778  time: 1.0635  data_time: 0.0678  lr: 0.0003685  max_mem: 19293M
[10/10 03:50:39] d2.utils.events INFO:  eta: 10:29:30  iter: 14399  total_loss: 2.716  loss_sem_seg: 1.553  loss_relation: 0.1679  loss_center: 0.6394  loss_offset: 0.3555  time: 1.0635  data_time: 0.0634  lr: 0.00036831  max_mem: 19293M
[10/10 03:51:00] d2.utils.events INFO:  eta: 10:29:08  iter: 14419  total_loss: 2.646  loss_sem_seg: 1.399  loss_relation: 0.1592  loss_center: 0.6037  loss_offset: 0.3413  time: 1.0635  data_time: 0.0597  lr: 0.00036812  max_mem: 19293M
[10/10 03:51:21] d2.utils.events INFO:  eta: 10:28:42  iter: 14439  total_loss: 3  loss_sem_seg: 1.789  loss_relation: 0.1861  loss_center: 0.6237  loss_offset: 0.3816  time: 1.0635  data_time: 0.0567  lr: 0.00036794  max_mem: 19293M
[10/10 03:51:42] d2.utils.events INFO:  eta: 10:28:22  iter: 14459  total_loss: 2.889  loss_sem_seg: 1.621  loss_relation: 0.182  loss_center: 0.7165  loss_offset: 0.3747  time: 1.0635  data_time: 0.0584  lr: 0.00036775  max_mem: 19293M
[10/10 03:52:03] d2.utils.events INFO:  eta: 10:28:05  iter: 14479  total_loss: 2.871  loss_sem_seg: 1.676  loss_relation: 0.1806  loss_center: 0.6521  loss_offset: 0.3804  time: 1.0635  data_time: 0.0591  lr: 0.00036756  max_mem: 19293M
[10/10 03:52:25] d2.utils.events INFO:  eta: 10:27:42  iter: 14499  total_loss: 2.804  loss_sem_seg: 1.558  loss_relation: 0.1747  loss_center: 0.6546  loss_offset: 0.3471  time: 1.0635  data_time: 0.0684  lr: 0.00036738  max_mem: 19293M
[10/10 03:52:46] d2.utils.events INFO:  eta: 10:27:21  iter: 14519  total_loss: 2.705  loss_sem_seg: 1.546  loss_relation: 0.1666  loss_center: 0.6236  loss_offset: 0.3806  time: 1.0635  data_time: 0.0618  lr: 0.00036719  max_mem: 19293M
[10/10 03:53:07] d2.utils.events INFO:  eta: 10:26:59  iter: 14539  total_loss: 2.8  loss_sem_seg: 1.591  loss_relation: 0.1888  loss_center: 0.5717  loss_offset: 0.3621  time: 1.0635  data_time: 0.0610  lr: 0.00036701  max_mem: 19293M
[10/10 03:53:29] d2.utils.events INFO:  eta: 10:26:38  iter: 14559  total_loss: 2.817  loss_sem_seg: 1.609  loss_relation: 0.1717  loss_center: 0.6588  loss_offset: 0.3584  time: 1.0635  data_time: 0.0581  lr: 0.00036682  max_mem: 19293M
[10/10 03:53:50] d2.utils.events INFO:  eta: 10:26:17  iter: 14579  total_loss: 2.763  loss_sem_seg: 1.453  loss_relation: 0.1721  loss_center: 0.6493  loss_offset: 0.3796  time: 1.0635  data_time: 0.0597  lr: 0.00036663  max_mem: 19293M
[10/10 03:54:11] d2.utils.events INFO:  eta: 10:26:07  iter: 14599  total_loss: 2.704  loss_sem_seg: 1.575  loss_relation: 0.1741  loss_center: 0.6077  loss_offset: 0.3476  time: 1.0635  data_time: 0.0623  lr: 0.00036645  max_mem: 19293M
[10/10 03:54:32] d2.utils.events INFO:  eta: 10:25:40  iter: 14619  total_loss: 2.723  loss_sem_seg: 1.541  loss_relation: 0.1792  loss_center: 0.6273  loss_offset: 0.3579  time: 1.0635  data_time: 0.0580  lr: 0.00036626  max_mem: 19293M
[10/10 03:54:54] d2.utils.events INFO:  eta: 10:25:19  iter: 14639  total_loss: 2.55  loss_sem_seg: 1.348  loss_relation: 0.1599  loss_center: 0.6145  loss_offset: 0.3612  time: 1.0635  data_time: 0.0598  lr: 0.00036607  max_mem: 19293M
[10/10 03:55:15] d2.utils.events INFO:  eta: 10:24:57  iter: 14659  total_loss: 2.586  loss_sem_seg: 1.389  loss_relation: 0.157  loss_center: 0.5806  loss_offset: 0.3404  time: 1.0635  data_time: 0.0596  lr: 0.00036589  max_mem: 19293M
[10/10 03:55:36] d2.utils.events INFO:  eta: 10:24:42  iter: 14679  total_loss: 2.596  loss_sem_seg: 1.384  loss_relation: 0.1579  loss_center: 0.6298  loss_offset: 0.3327  time: 1.0635  data_time: 0.0569  lr: 0.0003657  max_mem: 19293M
[10/10 03:55:57] d2.utils.events INFO:  eta: 10:24:30  iter: 14699  total_loss: 2.503  loss_sem_seg: 1.42  loss_relation: 0.1431  loss_center: 0.622  loss_offset: 0.3601  time: 1.0635  data_time: 0.0672  lr: 0.00036552  max_mem: 19293M
[10/10 03:56:19] d2.utils.events INFO:  eta: 10:23:57  iter: 14719  total_loss: 2.389  loss_sem_seg: 1.324  loss_relation: 0.1593  loss_center: 0.5464  loss_offset: 0.3368  time: 1.0635  data_time: 0.0635  lr: 0.00036533  max_mem: 19293M
[10/10 03:56:40] d2.utils.events INFO:  eta: 10:23:44  iter: 14739  total_loss: 2.694  loss_sem_seg: 1.472  loss_relation: 0.1607  loss_center: 0.6134  loss_offset: 0.3552  time: 1.0635  data_time: 0.0620  lr: 0.00036514  max_mem: 19293M
[10/10 03:57:01] d2.utils.events INFO:  eta: 10:23:11  iter: 14759  total_loss: 2.62  loss_sem_seg: 1.442  loss_relation: 0.1685  loss_center: 0.6316  loss_offset: 0.3477  time: 1.0635  data_time: 0.0617  lr: 0.00036496  max_mem: 19293M
[10/10 03:57:23] d2.utils.events INFO:  eta: 10:22:53  iter: 14779  total_loss: 2.599  loss_sem_seg: 1.463  loss_relation: 0.1678  loss_center: 0.6525  loss_offset: 0.3567  time: 1.0635  data_time: 0.0632  lr: 0.00036477  max_mem: 19293M
[10/10 03:57:44] d2.utils.events INFO:  eta: 10:22:27  iter: 14799  total_loss: 2.709  loss_sem_seg: 1.382  loss_relation: 0.163  loss_center: 0.7018  loss_offset: 0.3405  time: 1.0635  data_time: 0.0558  lr: 0.00036458  max_mem: 19293M
[10/10 03:58:05] d2.utils.events INFO:  eta: 10:22:07  iter: 14819  total_loss: 2.506  loss_sem_seg: 1.425  loss_relation: 0.1678  loss_center: 0.607  loss_offset: 0.343  time: 1.0635  data_time: 0.0589  lr: 0.0003644  max_mem: 19293M
[10/10 03:58:26] d2.utils.events INFO:  eta: 10:21:50  iter: 14839  total_loss: 2.57  loss_sem_seg: 1.428  loss_relation: 0.1609  loss_center: 0.6076  loss_offset: 0.3441  time: 1.0635  data_time: 0.0600  lr: 0.00036421  max_mem: 19293M
[10/10 03:58:48] d2.utils.events INFO:  eta: 10:21:37  iter: 14859  total_loss: 2.45  loss_sem_seg: 1.365  loss_relation: 0.1638  loss_center: 0.6172  loss_offset: 0.3536  time: 1.0635  data_time: 0.0607  lr: 0.00036402  max_mem: 19293M
[10/10 03:59:09] d2.utils.events INFO:  eta: 10:21:07  iter: 14879  total_loss: 2.653  loss_sem_seg: 1.448  loss_relation: 0.1629  loss_center: 0.6333  loss_offset: 0.3568  time: 1.0635  data_time: 0.0572  lr: 0.00036384  max_mem: 19293M
[10/10 03:59:30] d2.utils.events INFO:  eta: 10:20:40  iter: 14899  total_loss: 2.507  loss_sem_seg: 1.33  loss_relation: 0.1675  loss_center: 0.6116  loss_offset: 0.361  time: 1.0635  data_time: 0.0581  lr: 0.00036365  max_mem: 19293M
[10/10 03:59:51] d2.utils.events INFO:  eta: 10:20:11  iter: 14919  total_loss: 2.645  loss_sem_seg: 1.469  loss_relation: 0.1651  loss_center: 0.6704  loss_offset: 0.3836  time: 1.0635  data_time: 0.0643  lr: 0.00036346  max_mem: 19293M
[10/10 04:00:12] d2.utils.events INFO:  eta: 10:19:58  iter: 14939  total_loss: 2.548  loss_sem_seg: 1.363  loss_relation: 0.1456  loss_center: 0.56  loss_offset: 0.3799  time: 1.0635  data_time: 0.0624  lr: 0.00036328  max_mem: 19293M
[10/10 04:00:34] d2.utils.events INFO:  eta: 10:19:41  iter: 14959  total_loss: 2.504  loss_sem_seg: 1.398  loss_relation: 0.1528  loss_center: 0.6123  loss_offset: 0.3418  time: 1.0635  data_time: 0.0663  lr: 0.00036309  max_mem: 19293M
[10/10 04:00:55] d2.utils.events INFO:  eta: 10:19:32  iter: 14979  total_loss: 2.402  loss_sem_seg: 1.346  loss_relation: 0.1537  loss_center: 0.5928  loss_offset: 0.3402  time: 1.0635  data_time: 0.0633  lr: 0.0003629  max_mem: 19293M
[10/10 04:01:16] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0014999.pth
[10/10 04:01:18] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 04:01:18] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 04:01:18] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 04:01:18] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 04:01:32] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0020 s/iter. Inference: 0.0695 s/iter. Eval: 0.0291 s/iter. Total: 0.1006 s/iter. ETA=0:00:24
[10/10 04:01:37] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0013 s/iter. Inference: 0.0676 s/iter. Eval: 0.0294 s/iter. Total: 0.0984 s/iter. ETA=0:00:18
[10/10 04:01:43] d2.evaluation.evaluator INFO: Inference done 119/250. Dataloading: 0.0014 s/iter. Inference: 0.0645 s/iter. Eval: 0.0285 s/iter. Total: 0.0944 s/iter. ETA=0:00:12
[10/10 04:01:48] d2.evaluation.evaluator INFO: Inference done 173/250. Dataloading: 0.0014 s/iter. Inference: 0.0644 s/iter. Eval: 0.0285 s/iter. Total: 0.0944 s/iter. ETA=0:00:07
[10/10 04:01:53] d2.evaluation.evaluator INFO: Inference done 229/250. Dataloading: 0.0015 s/iter. Inference: 0.0637 s/iter. Eval: 0.0282 s/iter. Total: 0.0934 s/iter. ETA=0:00:01
[10/10 04:01:55] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.146629 (0.094476 s / iter per device, on 2 devices)
[10/10 04:01:55] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063410 s / iter per device, on 2 devices)
[10/10 04:01:55] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evald1_rsehw ...
[10/10 04:02:00] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 14.445517108685577
[10/10 04:02:00] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 12.244 | 46.297 | 16.620 |      129      |
| Things | 10.201 | 45.051 | 14.308 |      76       |
| Stuff  | 15.175 | 48.084 | 19.935 |      53       |
[10/10 04:02:00] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 04:02:00] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 04:02:00] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 04:02:00] d2.evaluation.testing INFO: copypaste: 12.2443,46.2971,16.6200,10.2008,45.0511,14.3084,15.1746,48.0839,19.9348
[10/10 04:02:00] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 04:02:00] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 04:02:00] d2.evaluation.testing INFO: copypaste: 0.1445
[10/10 04:02:00] d2.utils.events INFO:  eta: 10:19:13  iter: 14999  total_loss: 2.441  loss_sem_seg: 1.37  loss_relation: 0.1563  loss_center: 0.5609  loss_offset: 0.3447  time: 1.0635  data_time: 0.0575  lr: 0.00036272  max_mem: 19293M
[10/10 04:02:00] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.14446, not better than best score 0.16205 @ iteration 11999.
[10/10 04:02:21] d2.utils.events INFO:  eta: 10:18:54  iter: 15019  total_loss: 2.54  loss_sem_seg: 1.426  loss_relation: 0.1585  loss_center: 0.6511  loss_offset: 0.3326  time: 1.0635  data_time: 0.0661  lr: 0.00036253  max_mem: 19293M
[10/10 04:02:42] d2.utils.events INFO:  eta: 10:18:30  iter: 15039  total_loss: 2.482  loss_sem_seg: 1.364  loss_relation: 0.1593  loss_center: 0.6215  loss_offset: 0.344  time: 1.0635  data_time: 0.0572  lr: 0.00036235  max_mem: 19293M
[10/10 04:03:04] d2.utils.events INFO:  eta: 10:17:55  iter: 15059  total_loss: 2.565  loss_sem_seg: 1.442  loss_relation: 0.168  loss_center: 0.6294  loss_offset: 0.3594  time: 1.0635  data_time: 0.0611  lr: 0.00036216  max_mem: 19293M
[10/10 04:03:25] d2.utils.events INFO:  eta: 10:17:38  iter: 15079  total_loss: 2.54  loss_sem_seg: 1.456  loss_relation: 0.1679  loss_center: 0.5586  loss_offset: 0.3626  time: 1.0635  data_time: 0.0623  lr: 0.00036197  max_mem: 19293M
[10/10 04:03:46] d2.utils.events INFO:  eta: 10:17:02  iter: 15099  total_loss: 2.66  loss_sem_seg: 1.517  loss_relation: 0.1635  loss_center: 0.6124  loss_offset: 0.331  time: 1.0634  data_time: 0.0582  lr: 0.00036179  max_mem: 19293M
[10/10 04:04:07] d2.utils.events INFO:  eta: 10:16:47  iter: 15119  total_loss: 2.54  loss_sem_seg: 1.403  loss_relation: 0.1692  loss_center: 0.6029  loss_offset: 0.3737  time: 1.0635  data_time: 0.0629  lr: 0.0003616  max_mem: 19293M
[10/10 04:04:29] d2.utils.events INFO:  eta: 10:16:26  iter: 15139  total_loss: 2.529  loss_sem_seg: 1.393  loss_relation: 0.1601  loss_center: 0.6451  loss_offset: 0.3486  time: 1.0634  data_time: 0.0583  lr: 0.00036141  max_mem: 19293M
[10/10 04:04:50] d2.utils.events INFO:  eta: 10:16:05  iter: 15159  total_loss: 2.645  loss_sem_seg: 1.433  loss_relation: 0.1691  loss_center: 0.6347  loss_offset: 0.3777  time: 1.0634  data_time: 0.0586  lr: 0.00036123  max_mem: 19293M
[10/10 04:05:11] d2.utils.events INFO:  eta: 10:15:43  iter: 15179  total_loss: 2.676  loss_sem_seg: 1.47  loss_relation: 0.1531  loss_center: 0.5862  loss_offset: 0.3925  time: 1.0634  data_time: 0.0601  lr: 0.00036104  max_mem: 19293M
[10/10 04:05:32] d2.utils.events INFO:  eta: 10:15:26  iter: 15199  total_loss: 2.828  loss_sem_seg: 1.66  loss_relation: 0.1633  loss_center: 0.6651  loss_offset: 0.329  time: 1.0634  data_time: 0.0571  lr: 0.00036085  max_mem: 19293M
[10/10 04:05:54] d2.utils.events INFO:  eta: 10:15:12  iter: 15219  total_loss: 2.605  loss_sem_seg: 1.499  loss_relation: 0.1566  loss_center: 0.6155  loss_offset: 0.3741  time: 1.0634  data_time: 0.0588  lr: 0.00036067  max_mem: 19293M
[10/10 04:06:15] d2.utils.events INFO:  eta: 10:14:48  iter: 15239  total_loss: 2.657  loss_sem_seg: 1.473  loss_relation: 0.1552  loss_center: 0.593  loss_offset: 0.3637  time: 1.0634  data_time: 0.0610  lr: 0.00036048  max_mem: 19293M
[10/10 04:06:36] d2.utils.events INFO:  eta: 10:14:32  iter: 15259  total_loss: 2.526  loss_sem_seg: 1.433  loss_relation: 0.1526  loss_center: 0.6142  loss_offset: 0.3576  time: 1.0634  data_time: 0.0638  lr: 0.00036029  max_mem: 19293M
[10/10 04:06:58] d2.utils.events INFO:  eta: 10:14:14  iter: 15279  total_loss: 2.551  loss_sem_seg: 1.439  loss_relation: 0.1576  loss_center: 0.5933  loss_offset: 0.3888  time: 1.0635  data_time: 0.0590  lr: 0.00036011  max_mem: 19293M
[10/10 04:07:19] d2.utils.events INFO:  eta: 10:13:49  iter: 15299  total_loss: 2.515  loss_sem_seg: 1.383  loss_relation: 0.1587  loss_center: 0.6063  loss_offset: 0.3668  time: 1.0634  data_time: 0.0569  lr: 0.00035992  max_mem: 19293M
[10/10 04:07:40] d2.utils.events INFO:  eta: 10:13:24  iter: 15319  total_loss: 2.581  loss_sem_seg: 1.478  loss_relation: 0.1617  loss_center: 0.6006  loss_offset: 0.3699  time: 1.0634  data_time: 0.0678  lr: 0.00035973  max_mem: 19293M
[10/10 04:08:01] d2.utils.events INFO:  eta: 10:13:03  iter: 15339  total_loss: 2.477  loss_sem_seg: 1.379  loss_relation: 0.1508  loss_center: 0.5748  loss_offset: 0.3259  time: 1.0634  data_time: 0.0596  lr: 0.00035955  max_mem: 19293M
[10/10 04:08:22] d2.utils.events INFO:  eta: 10:12:41  iter: 15359  total_loss: 2.485  loss_sem_seg: 1.409  loss_relation: 0.1574  loss_center: 0.6186  loss_offset: 0.3447  time: 1.0634  data_time: 0.0575  lr: 0.00035936  max_mem: 19293M
[10/10 04:08:44] d2.utils.events INFO:  eta: 10:12:05  iter: 15379  total_loss: 2.348  loss_sem_seg: 1.259  loss_relation: 0.1581  loss_center: 0.5924  loss_offset: 0.3429  time: 1.0634  data_time: 0.0565  lr: 0.00035917  max_mem: 19293M
[10/10 04:09:05] d2.utils.events INFO:  eta: 10:11:56  iter: 15399  total_loss: 2.532  loss_sem_seg: 1.426  loss_relation: 0.1641  loss_center: 0.6611  loss_offset: 0.3372  time: 1.0634  data_time: 0.0657  lr: 0.00035899  max_mem: 19293M
[10/10 04:09:26] d2.utils.events INFO:  eta: 10:11:35  iter: 15419  total_loss: 2.521  loss_sem_seg: 1.326  loss_relation: 0.1506  loss_center: 0.6245  loss_offset: 0.3619  time: 1.0634  data_time: 0.0606  lr: 0.0003588  max_mem: 19293M
[10/10 04:09:48] d2.utils.events INFO:  eta: 10:11:23  iter: 15439  total_loss: 2.449  loss_sem_seg: 1.366  loss_relation: 0.1593  loss_center: 0.5894  loss_offset: 0.341  time: 1.0634  data_time: 0.0620  lr: 0.00035861  max_mem: 19293M
[10/10 04:10:09] d2.utils.events INFO:  eta: 10:11:05  iter: 15459  total_loss: 2.486  loss_sem_seg: 1.356  loss_relation: 0.1563  loss_center: 0.5864  loss_offset: 0.3291  time: 1.0634  data_time: 0.0603  lr: 0.00035843  max_mem: 19293M
[10/10 04:10:30] d2.utils.events INFO:  eta: 10:10:43  iter: 15479  total_loss: 2.431  loss_sem_seg: 1.34  loss_relation: 0.1596  loss_center: 0.578  loss_offset: 0.3293  time: 1.0634  data_time: 0.0615  lr: 0.00035824  max_mem: 19293M
[10/10 04:10:52] d2.utils.events INFO:  eta: 10:10:26  iter: 15499  total_loss: 2.498  loss_sem_seg: 1.371  loss_relation: 0.1507  loss_center: 0.5928  loss_offset: 0.3435  time: 1.0634  data_time: 0.0634  lr: 0.00035805  max_mem: 19293M
[10/10 04:11:13] d2.utils.events INFO:  eta: 10:10:03  iter: 15519  total_loss: 2.542  loss_sem_seg: 1.397  loss_relation: 0.14  loss_center: 0.5797  loss_offset: 0.326  time: 1.0634  data_time: 0.0621  lr: 0.00035786  max_mem: 19293M
[10/10 04:11:34] d2.utils.events INFO:  eta: 10:09:42  iter: 15539  total_loss: 2.427  loss_sem_seg: 1.369  loss_relation: 0.1536  loss_center: 0.6035  loss_offset: 0.348  time: 1.0634  data_time: 0.0604  lr: 0.00035768  max_mem: 19293M
[10/10 04:11:55] d2.utils.events INFO:  eta: 10:09:17  iter: 15559  total_loss: 2.634  loss_sem_seg: 1.458  loss_relation: 0.166  loss_center: 0.5794  loss_offset: 0.3529  time: 1.0634  data_time: 0.0623  lr: 0.00035749  max_mem: 19293M
[10/10 04:12:17] d2.utils.events INFO:  eta: 10:09:03  iter: 15579  total_loss: 2.509  loss_sem_seg: 1.351  loss_relation: 0.1624  loss_center: 0.5975  loss_offset: 0.3327  time: 1.0635  data_time: 0.0684  lr: 0.0003573  max_mem: 19293M
[10/10 04:12:38] d2.utils.events INFO:  eta: 10:08:40  iter: 15599  total_loss: 2.341  loss_sem_seg: 1.269  loss_relation: 0.1539  loss_center: 0.5869  loss_offset: 0.3175  time: 1.0634  data_time: 0.0560  lr: 0.00035712  max_mem: 19293M
[10/10 04:12:59] d2.utils.events INFO:  eta: 10:08:26  iter: 15619  total_loss: 2.393  loss_sem_seg: 1.376  loss_relation: 0.1595  loss_center: 0.5844  loss_offset: 0.329  time: 1.0635  data_time: 0.0611  lr: 0.00035693  max_mem: 19293M
[10/10 04:13:21] d2.utils.events INFO:  eta: 10:08:07  iter: 15639  total_loss: 2.454  loss_sem_seg: 1.371  loss_relation: 0.1592  loss_center: 0.5709  loss_offset: 0.341  time: 1.0635  data_time: 0.0614  lr: 0.00035674  max_mem: 19293M
[10/10 04:13:42] d2.utils.events INFO:  eta: 10:07:44  iter: 15659  total_loss: 2.427  loss_sem_seg: 1.29  loss_relation: 0.1431  loss_center: 0.6265  loss_offset: 0.3326  time: 1.0634  data_time: 0.0563  lr: 0.00035656  max_mem: 19293M
[10/10 04:14:03] d2.utils.events INFO:  eta: 10:07:24  iter: 15679  total_loss: 2.516  loss_sem_seg: 1.387  loss_relation: 0.1601  loss_center: 0.6084  loss_offset: 0.3443  time: 1.0635  data_time: 0.0639  lr: 0.00035637  max_mem: 19293M
[10/10 04:14:25] d2.utils.events INFO:  eta: 10:07:11  iter: 15699  total_loss: 2.601  loss_sem_seg: 1.399  loss_relation: 0.156  loss_center: 0.6254  loss_offset: 0.3461  time: 1.0635  data_time: 0.0647  lr: 0.00035618  max_mem: 19293M
[10/10 04:14:46] d2.utils.events INFO:  eta: 10:06:51  iter: 15719  total_loss: 2.501  loss_sem_seg: 1.37  loss_relation: 0.1463  loss_center: 0.582  loss_offset: 0.3511  time: 1.0635  data_time: 0.0597  lr: 0.000356  max_mem: 19293M
[10/10 04:15:07] d2.utils.events INFO:  eta: 10:06:28  iter: 15739  total_loss: 2.446  loss_sem_seg: 1.355  loss_relation: 0.1622  loss_center: 0.6063  loss_offset: 0.3376  time: 1.0635  data_time: 0.0633  lr: 0.00035581  max_mem: 19293M
[10/10 04:15:29] d2.utils.events INFO:  eta: 10:06:10  iter: 15759  total_loss: 2.403  loss_sem_seg: 1.301  loss_relation: 0.1447  loss_center: 0.6151  loss_offset: 0.3522  time: 1.0635  data_time: 0.0663  lr: 0.00035562  max_mem: 19293M
[10/10 04:15:50] d2.utils.events INFO:  eta: 10:05:47  iter: 15779  total_loss: 2.467  loss_sem_seg: 1.368  loss_relation: 0.1396  loss_center: 0.583  loss_offset: 0.355  time: 1.0635  data_time: 0.0600  lr: 0.00035544  max_mem: 19293M
[10/10 04:16:11] d2.utils.events INFO:  eta: 10:05:26  iter: 15799  total_loss: 2.331  loss_sem_seg: 1.207  loss_relation: 0.1403  loss_center: 0.5542  loss_offset: 0.3372  time: 1.0635  data_time: 0.0592  lr: 0.00035525  max_mem: 19293M
[10/10 04:16:32] d2.utils.events INFO:  eta: 10:05:05  iter: 15819  total_loss: 2.42  loss_sem_seg: 1.321  loss_relation: 0.1483  loss_center: 0.6065  loss_offset: 0.3762  time: 1.0635  data_time: 0.0610  lr: 0.00035506  max_mem: 19293M
[10/10 04:16:53] d2.utils.events INFO:  eta: 10:04:44  iter: 15839  total_loss: 2.432  loss_sem_seg: 1.342  loss_relation: 0.1409  loss_center: 0.5993  loss_offset: 0.3538  time: 1.0634  data_time: 0.0585  lr: 0.00035487  max_mem: 19293M
[10/10 04:17:15] d2.utils.events INFO:  eta: 10:04:23  iter: 15859  total_loss: 2.368  loss_sem_seg: 1.306  loss_relation: 0.1468  loss_center: 0.5878  loss_offset: 0.3506  time: 1.0634  data_time: 0.0610  lr: 0.00035469  max_mem: 19293M
[10/10 04:17:36] d2.utils.events INFO:  eta: 10:04:03  iter: 15879  total_loss: 2.484  loss_sem_seg: 1.364  loss_relation: 0.1409  loss_center: 0.6577  loss_offset: 0.3766  time: 1.0635  data_time: 0.0596  lr: 0.0003545  max_mem: 19293M
[10/10 04:17:57] d2.utils.events INFO:  eta: 10:03:42  iter: 15899  total_loss: 2.406  loss_sem_seg: 1.315  loss_relation: 0.1456  loss_center: 0.5766  loss_offset: 0.3409  time: 1.0635  data_time: 0.0598  lr: 0.00035431  max_mem: 19293M
[10/10 04:18:19] d2.utils.events INFO:  eta: 10:03:20  iter: 15919  total_loss: 2.312  loss_sem_seg: 1.241  loss_relation: 0.1453  loss_center: 0.5783  loss_offset: 0.3238  time: 1.0635  data_time: 0.0616  lr: 0.00035413  max_mem: 19293M
[10/10 04:18:40] d2.utils.events INFO:  eta: 10:03:00  iter: 15939  total_loss: 2.552  loss_sem_seg: 1.386  loss_relation: 0.1498  loss_center: 0.6277  loss_offset: 0.3653  time: 1.0635  data_time: 0.0641  lr: 0.00035394  max_mem: 19293M
[10/10 04:19:01] d2.utils.events INFO:  eta: 10:02:36  iter: 15959  total_loss: 2.543  loss_sem_seg: 1.446  loss_relation: 0.1524  loss_center: 0.6047  loss_offset: 0.3495  time: 1.0635  data_time: 0.0658  lr: 0.00035375  max_mem: 19293M
[10/10 04:19:22] d2.utils.events INFO:  eta: 10:02:13  iter: 15979  total_loss: 2.404  loss_sem_seg: 1.388  loss_relation: 0.1585  loss_center: 0.5901  loss_offset: 0.3332  time: 1.0634  data_time: 0.0588  lr: 0.00035357  max_mem: 19293M
[10/10 04:19:44] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0015999.pth
[10/10 04:19:45] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 04:19:45] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 04:19:45] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 04:19:45] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 04:20:00] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0020 s/iter. Inference: 0.0738 s/iter. Eval: 0.0288 s/iter. Total: 0.1046 s/iter. ETA=0:00:25
[10/10 04:20:05] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0013 s/iter. Inference: 0.0677 s/iter. Eval: 0.0289 s/iter. Total: 0.0979 s/iter. ETA=0:00:18
[10/10 04:20:10] d2.evaluation.evaluator INFO: Inference done 119/250. Dataloading: 0.0013 s/iter. Inference: 0.0645 s/iter. Eval: 0.0284 s/iter. Total: 0.0943 s/iter. ETA=0:00:12
[10/10 04:20:15] d2.evaluation.evaluator INFO: Inference done 173/250. Dataloading: 0.0014 s/iter. Inference: 0.0644 s/iter. Eval: 0.0284 s/iter. Total: 0.0942 s/iter. ETA=0:00:07
[10/10 04:20:20] d2.evaluation.evaluator INFO: Inference done 230/250. Dataloading: 0.0014 s/iter. Inference: 0.0634 s/iter. Eval: 0.0280 s/iter. Total: 0.0929 s/iter. ETA=0:00:01
[10/10 04:20:22] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.226995 (0.094804 s / iter per device, on 2 devices)
[10/10 04:20:22] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063667 s / iter per device, on 2 devices)
[10/10 04:20:22] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalybopujj8 ...
[10/10 04:20:28] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 14.03368924726276
[10/10 04:20:28] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.575 | 44.998 | 15.671 |      129      |
| Things | 9.212  | 41.083 | 12.839 |      76       |
| Stuff  | 14.964 | 50.613 | 19.733 |      53       |
[10/10 04:20:28] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 04:20:28] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 04:20:28] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 04:20:28] d2.evaluation.testing INFO: copypaste: 11.5752,44.9983,15.6713,9.2121,41.0829,12.8388,14.9640,50.6128,19.7330
[10/10 04:20:28] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 04:20:28] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 04:20:28] d2.evaluation.testing INFO: copypaste: 0.1403
[10/10 04:20:28] d2.utils.events INFO:  eta: 10:01:50  iter: 15999  total_loss: 2.377  loss_sem_seg: 1.281  loss_relation: 0.1478  loss_center: 0.5889  loss_offset: 0.345  time: 1.0635  data_time: 0.0607  lr: 0.00035338  max_mem: 19293M
[10/10 04:20:28] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.14034, not better than best score 0.16205 @ iteration 11999.
[10/10 04:20:49] d2.utils.events INFO:  eta: 10:01:26  iter: 16019  total_loss: 2.524  loss_sem_seg: 1.364  loss_relation: 0.1493  loss_center: 0.6416  loss_offset: 0.339  time: 1.0635  data_time: 0.0602  lr: 0.00035319  max_mem: 19293M
[10/10 04:21:10] d2.utils.events INFO:  eta: 10:01:00  iter: 16039  total_loss: 2.395  loss_sem_seg: 1.277  loss_relation: 0.1525  loss_center: 0.6234  loss_offset: 0.3355  time: 1.0634  data_time: 0.0564  lr: 0.000353  max_mem: 19293M
[10/10 04:21:31] d2.utils.events INFO:  eta: 10:00:41  iter: 16059  total_loss: 2.375  loss_sem_seg: 1.196  loss_relation: 0.142  loss_center: 0.5873  loss_offset: 0.3544  time: 1.0634  data_time: 0.0617  lr: 0.00035282  max_mem: 19293M
[10/10 04:21:52] d2.utils.events INFO:  eta: 10:00:18  iter: 16079  total_loss: 2.332  loss_sem_seg: 1.245  loss_relation: 0.1444  loss_center: 0.6247  loss_offset: 0.3232  time: 1.0634  data_time: 0.0638  lr: 0.00035263  max_mem: 19293M
[10/10 04:22:14] d2.utils.events INFO:  eta: 9:59:56  iter: 16099  total_loss: 2.35  loss_sem_seg: 1.271  loss_relation: 0.1407  loss_center: 0.5735  loss_offset: 0.3589  time: 1.0634  data_time: 0.0598  lr: 0.00035244  max_mem: 19293M
[10/10 04:22:35] d2.utils.events INFO:  eta: 9:59:31  iter: 16119  total_loss: 2.355  loss_sem_seg: 1.3  loss_relation: 0.1418  loss_center: 0.6016  loss_offset: 0.3235  time: 1.0634  data_time: 0.0622  lr: 0.00035226  max_mem: 19293M
[10/10 04:22:56] d2.utils.events INFO:  eta: 9:59:05  iter: 16139  total_loss: 2.401  loss_sem_seg: 1.335  loss_relation: 0.1432  loss_center: 0.6119  loss_offset: 0.3394  time: 1.0634  data_time: 0.0645  lr: 0.00035207  max_mem: 19293M
[10/10 04:23:17] d2.utils.events INFO:  eta: 9:58:42  iter: 16159  total_loss: 2.403  loss_sem_seg: 1.32  loss_relation: 0.1496  loss_center: 0.5842  loss_offset: 0.3395  time: 1.0634  data_time: 0.0599  lr: 0.00035188  max_mem: 19293M
[10/10 04:23:39] d2.utils.events INFO:  eta: 9:58:23  iter: 16179  total_loss: 2.43  loss_sem_seg: 1.274  loss_relation: 0.1449  loss_center: 0.6528  loss_offset: 0.3197  time: 1.0634  data_time: 0.0663  lr: 0.00035169  max_mem: 19293M
[10/10 04:24:00] d2.utils.events INFO:  eta: 9:57:53  iter: 16199  total_loss: 2.326  loss_sem_seg: 1.355  loss_relation: 0.1453  loss_center: 0.5888  loss_offset: 0.3145  time: 1.0634  data_time: 0.0574  lr: 0.00035151  max_mem: 19293M
[10/10 04:24:21] d2.utils.events INFO:  eta: 9:57:28  iter: 16219  total_loss: 2.424  loss_sem_seg: 1.28  loss_relation: 0.1404  loss_center: 0.6181  loss_offset: 0.3206  time: 1.0634  data_time: 0.0596  lr: 0.00035132  max_mem: 19293M
[10/10 04:24:42] d2.utils.events INFO:  eta: 9:57:15  iter: 16239  total_loss: 2.397  loss_sem_seg: 1.315  loss_relation: 0.1472  loss_center: 0.5504  loss_offset: 0.3398  time: 1.0634  data_time: 0.0573  lr: 0.00035113  max_mem: 19293M
[10/10 04:25:04] d2.utils.events INFO:  eta: 9:56:53  iter: 16259  total_loss: 2.37  loss_sem_seg: 1.282  loss_relation: 0.1441  loss_center: 0.5852  loss_offset: 0.3128  time: 1.0634  data_time: 0.0585  lr: 0.00035095  max_mem: 19293M
[10/10 04:25:25] d2.utils.events INFO:  eta: 9:56:24  iter: 16279  total_loss: 2.47  loss_sem_seg: 1.357  loss_relation: 0.1511  loss_center: 0.5659  loss_offset: 0.3308  time: 1.0634  data_time: 0.0581  lr: 0.00035076  max_mem: 19293M
[10/10 04:25:46] d2.utils.events INFO:  eta: 9:56:08  iter: 16299  total_loss: 2.326  loss_sem_seg: 1.29  loss_relation: 0.1453  loss_center: 0.6081  loss_offset: 0.3165  time: 1.0634  data_time: 0.0612  lr: 0.00035057  max_mem: 19293M
[10/10 04:26:07] d2.utils.events INFO:  eta: 9:55:43  iter: 16319  total_loss: 2.373  loss_sem_seg: 1.256  loss_relation: 0.141  loss_center: 0.567  loss_offset: 0.3035  time: 1.0634  data_time: 0.0584  lr: 0.00035038  max_mem: 19293M
[10/10 04:26:29] d2.utils.events INFO:  eta: 9:55:28  iter: 16339  total_loss: 2.295  loss_sem_seg: 1.195  loss_relation: 0.127  loss_center: 0.5474  loss_offset: 0.3536  time: 1.0634  data_time: 0.0622  lr: 0.0003502  max_mem: 19293M
[10/10 04:26:50] d2.utils.events INFO:  eta: 9:55:07  iter: 16359  total_loss: 2.531  loss_sem_seg: 1.419  loss_relation: 0.1463  loss_center: 0.6381  loss_offset: 0.3464  time: 1.0634  data_time: 0.0624  lr: 0.00035001  max_mem: 19293M
[10/10 04:27:11] d2.utils.events INFO:  eta: 9:54:59  iter: 16379  total_loss: 2.421  loss_sem_seg: 1.302  loss_relation: 0.1523  loss_center: 0.6314  loss_offset: 0.3605  time: 1.0634  data_time: 0.0686  lr: 0.00034982  max_mem: 19293M
[10/10 04:27:32] d2.utils.events INFO:  eta: 9:54:19  iter: 16399  total_loss: 2.279  loss_sem_seg: 1.263  loss_relation: 0.1431  loss_center: 0.5321  loss_offset: 0.334  time: 1.0634  data_time: 0.0567  lr: 0.00034963  max_mem: 19293M
[10/10 04:27:54] d2.utils.events INFO:  eta: 9:54:00  iter: 16419  total_loss: 2.348  loss_sem_seg: 1.26  loss_relation: 0.1405  loss_center: 0.5801  loss_offset: 0.3203  time: 1.0634  data_time: 0.0653  lr: 0.00034945  max_mem: 19293M
[10/10 04:28:15] d2.utils.events INFO:  eta: 9:53:26  iter: 16439  total_loss: 2.293  loss_sem_seg: 1.254  loss_relation: 0.144  loss_center: 0.5395  loss_offset: 0.317  time: 1.0634  data_time: 0.0565  lr: 0.00034926  max_mem: 19293M
[10/10 04:28:36] d2.utils.events INFO:  eta: 9:53:11  iter: 16459  total_loss: 2.419  loss_sem_seg: 1.324  loss_relation: 0.1416  loss_center: 0.5635  loss_offset: 0.334  time: 1.0634  data_time: 0.0620  lr: 0.00034907  max_mem: 19293M
[10/10 04:28:58] d2.utils.events INFO:  eta: 9:52:54  iter: 16479  total_loss: 2.413  loss_sem_seg: 1.288  loss_relation: 0.1473  loss_center: 0.5899  loss_offset: 0.3366  time: 1.0634  data_time: 0.0612  lr: 0.00034888  max_mem: 19293M
[10/10 04:29:19] d2.utils.events INFO:  eta: 9:52:29  iter: 16499  total_loss: 2.374  loss_sem_seg: 1.244  loss_relation: 0.1472  loss_center: 0.572  loss_offset: 0.3558  time: 1.0634  data_time: 0.0607  lr: 0.0003487  max_mem: 19293M
[10/10 04:29:40] d2.utils.events INFO:  eta: 9:52:08  iter: 16519  total_loss: 2.488  loss_sem_seg: 1.39  loss_relation: 0.142  loss_center: 0.5886  loss_offset: 0.3298  time: 1.0634  data_time: 0.0625  lr: 0.00034851  max_mem: 19293M
[10/10 04:30:01] d2.utils.events INFO:  eta: 9:51:45  iter: 16539  total_loss: 2.411  loss_sem_seg: 1.309  loss_relation: 0.1454  loss_center: 0.6044  loss_offset: 0.3618  time: 1.0634  data_time: 0.0622  lr: 0.00034832  max_mem: 19293M
[10/10 04:30:23] d2.utils.events INFO:  eta: 9:51:27  iter: 16559  total_loss: 2.442  loss_sem_seg: 1.251  loss_relation: 0.1528  loss_center: 0.6409  loss_offset: 0.3363  time: 1.0634  data_time: 0.0662  lr: 0.00034814  max_mem: 19293M
[10/10 04:30:44] d2.utils.events INFO:  eta: 9:51:01  iter: 16579  total_loss: 2.283  loss_sem_seg: 1.266  loss_relation: 0.1432  loss_center: 0.5603  loss_offset: 0.338  time: 1.0634  data_time: 0.0589  lr: 0.00034795  max_mem: 19293M
[10/10 04:31:05] d2.utils.events INFO:  eta: 9:50:36  iter: 16599  total_loss: 2.264  loss_sem_seg: 1.193  loss_relation: 0.1385  loss_center: 0.5684  loss_offset: 0.325  time: 1.0634  data_time: 0.0550  lr: 0.00034776  max_mem: 19293M
[10/10 04:31:27] d2.utils.events INFO:  eta: 9:50:18  iter: 16619  total_loss: 2.294  loss_sem_seg: 1.301  loss_relation: 0.131  loss_center: 0.5875  loss_offset: 0.3169  time: 1.0634  data_time: 0.0678  lr: 0.00034757  max_mem: 19293M
[10/10 04:31:48] d2.utils.events INFO:  eta: 9:49:57  iter: 16639  total_loss: 2.228  loss_sem_seg: 1.238  loss_relation: 0.1274  loss_center: 0.5362  loss_offset: 0.3096  time: 1.0634  data_time: 0.0635  lr: 0.00034739  max_mem: 19293M
[10/10 04:32:09] d2.utils.events INFO:  eta: 9:49:30  iter: 16659  total_loss: 2.37  loss_sem_seg: 1.218  loss_relation: 0.1324  loss_center: 0.6253  loss_offset: 0.3258  time: 1.0634  data_time: 0.0570  lr: 0.0003472  max_mem: 19293M
[10/10 04:32:30] d2.utils.events INFO:  eta: 9:49:08  iter: 16679  total_loss: 2.428  loss_sem_seg: 1.265  loss_relation: 0.1428  loss_center: 0.5913  loss_offset: 0.353  time: 1.0634  data_time: 0.0615  lr: 0.00034701  max_mem: 19293M
[10/10 04:32:52] d2.utils.events INFO:  eta: 9:48:40  iter: 16699  total_loss: 2.23  loss_sem_seg: 1.22  loss_relation: 0.1383  loss_center: 0.5185  loss_offset: 0.3382  time: 1.0634  data_time: 0.0631  lr: 0.00034682  max_mem: 19293M
[10/10 04:33:13] d2.utils.events INFO:  eta: 9:48:18  iter: 16719  total_loss: 2.351  loss_sem_seg: 1.257  loss_relation: 0.1376  loss_center: 0.5582  loss_offset: 0.3348  time: 1.0634  data_time: 0.0583  lr: 0.00034664  max_mem: 19293M
[10/10 04:33:34] d2.utils.events INFO:  eta: 9:47:57  iter: 16739  total_loss: 2.368  loss_sem_seg: 1.308  loss_relation: 0.1369  loss_center: 0.5932  loss_offset: 0.3478  time: 1.0634  data_time: 0.0564  lr: 0.00034645  max_mem: 19293M
[10/10 04:33:55] d2.utils.events INFO:  eta: 9:47:31  iter: 16759  total_loss: 2.448  loss_sem_seg: 1.301  loss_relation: 0.1583  loss_center: 0.6695  loss_offset: 0.3447  time: 1.0634  data_time: 0.0591  lr: 0.00034626  max_mem: 19293M
[10/10 04:34:17] d2.utils.events INFO:  eta: 9:47:15  iter: 16779  total_loss: 2.391  loss_sem_seg: 1.325  loss_relation: 0.1467  loss_center: 0.5562  loss_offset: 0.3362  time: 1.0634  data_time: 0.0684  lr: 0.00034607  max_mem: 19293M
[10/10 04:34:38] d2.utils.events INFO:  eta: 9:46:57  iter: 16799  total_loss: 2.322  loss_sem_seg: 1.313  loss_relation: 0.1489  loss_center: 0.5735  loss_offset: 0.3406  time: 1.0634  data_time: 0.0598  lr: 0.00034589  max_mem: 19293M
[10/10 04:34:59] d2.utils.events INFO:  eta: 9:46:32  iter: 16819  total_loss: 2.435  loss_sem_seg: 1.361  loss_relation: 0.1491  loss_center: 0.6272  loss_offset: 0.3616  time: 1.0634  data_time: 0.0596  lr: 0.0003457  max_mem: 19293M
[10/10 04:35:21] d2.utils.events INFO:  eta: 9:46:12  iter: 16839  total_loss: 2.551  loss_sem_seg: 1.378  loss_relation: 0.1451  loss_center: 0.622  loss_offset: 0.3168  time: 1.0634  data_time: 0.0565  lr: 0.00034551  max_mem: 19293M
[10/10 04:35:42] d2.utils.events INFO:  eta: 9:45:50  iter: 16859  total_loss: 2.484  loss_sem_seg: 1.353  loss_relation: 0.1567  loss_center: 0.6139  loss_offset: 0.3217  time: 1.0634  data_time: 0.0561  lr: 0.00034532  max_mem: 19293M
[10/10 04:36:03] d2.utils.events INFO:  eta: 9:45:31  iter: 16879  total_loss: 2.393  loss_sem_seg: 1.368  loss_relation: 0.1414  loss_center: 0.5173  loss_offset: 0.3409  time: 1.0634  data_time: 0.0627  lr: 0.00034514  max_mem: 19293M
[10/10 04:36:24] d2.utils.events INFO:  eta: 9:45:13  iter: 16899  total_loss: 2.339  loss_sem_seg: 1.301  loss_relation: 0.1331  loss_center: 0.5707  loss_offset: 0.3295  time: 1.0634  data_time: 0.0622  lr: 0.00034495  max_mem: 19293M
[10/10 04:36:46] d2.utils.events INFO:  eta: 9:44:55  iter: 16919  total_loss: 2.342  loss_sem_seg: 1.332  loss_relation: 0.1368  loss_center: 0.5485  loss_offset: 0.3427  time: 1.0634  data_time: 0.0616  lr: 0.00034476  max_mem: 19293M
[10/10 04:37:07] d2.utils.events INFO:  eta: 9:44:34  iter: 16939  total_loss: 2.283  loss_sem_seg: 1.293  loss_relation: 0.1359  loss_center: 0.5688  loss_offset: 0.3431  time: 1.0634  data_time: 0.0602  lr: 0.00034457  max_mem: 19293M
[10/10 04:37:28] d2.utils.events INFO:  eta: 9:44:17  iter: 16959  total_loss: 2.414  loss_sem_seg: 1.34  loss_relation: 0.1437  loss_center: 0.5949  loss_offset: 0.3354  time: 1.0634  data_time: 0.0602  lr: 0.00034439  max_mem: 19293M
[10/10 04:37:49] d2.utils.events INFO:  eta: 9:43:51  iter: 16979  total_loss: 2.289  loss_sem_seg: 1.223  loss_relation: 0.1356  loss_center: 0.589  loss_offset: 0.3206  time: 1.0634  data_time: 0.0649  lr: 0.0003442  max_mem: 19293M
[10/10 04:38:11] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0016999.pth
[10/10 04:38:12] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 04:38:12] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 04:38:12] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 04:38:12] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 04:38:27] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0013 s/iter. Inference: 0.0707 s/iter. Eval: 0.0288 s/iter. Total: 0.1008 s/iter. ETA=0:00:24
[10/10 04:38:32] d2.evaluation.evaluator INFO: Inference done 62/250. Dataloading: 0.0014 s/iter. Inference: 0.0679 s/iter. Eval: 0.0290 s/iter. Total: 0.0984 s/iter. ETA=0:00:18
[10/10 04:38:37] d2.evaluation.evaluator INFO: Inference done 117/250. Dataloading: 0.0015 s/iter. Inference: 0.0650 s/iter. Eval: 0.0286 s/iter. Total: 0.0951 s/iter. ETA=0:00:12
[10/10 04:38:42] d2.evaluation.evaluator INFO: Inference done 171/250. Dataloading: 0.0015 s/iter. Inference: 0.0643 s/iter. Eval: 0.0285 s/iter. Total: 0.0943 s/iter. ETA=0:00:07
[10/10 04:38:47] d2.evaluation.evaluator INFO: Inference done 227/250. Dataloading: 0.0015 s/iter. Inference: 0.0635 s/iter. Eval: 0.0281 s/iter. Total: 0.0932 s/iter. ETA=0:00:02
[10/10 04:38:49] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.115779 (0.094350 s / iter per device, on 2 devices)
[10/10 04:38:49] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063266 s / iter per device, on 2 devices)
[10/10 04:38:49] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalr9ujvean ...
[10/10 04:38:54] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 13.081945249786248
[10/10 04:38:54] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 12.103 | 45.883 | 16.341 |      129      |
| Things | 9.536  | 41.835 | 13.218 |      76       |
| Stuff  | 15.784 | 51.687 | 20.819 |      53       |
[10/10 04:38:54] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 04:38:54] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 04:38:54] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 04:38:54] d2.evaluation.testing INFO: copypaste: 12.1029,45.8830,16.3411,9.5361,41.8353,13.2183,15.7836,51.6873,20.8190
[10/10 04:38:54] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 04:38:54] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 04:38:54] d2.evaluation.testing INFO: copypaste: 0.1308
[10/10 04:38:54] d2.utils.events INFO:  eta: 9:43:29  iter: 16999  total_loss: 2.354  loss_sem_seg: 1.284  loss_relation: 0.1425  loss_center: 0.5886  loss_offset: 0.3108  time: 1.0634  data_time: 0.0544  lr: 0.00034401  max_mem: 19293M
[10/10 04:38:54] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.13082, not better than best score 0.16205 @ iteration 11999.
[10/10 04:39:15] d2.utils.events INFO:  eta: 9:43:06  iter: 17019  total_loss: 2.23  loss_sem_seg: 1.177  loss_relation: 0.1376  loss_center: 0.5332  loss_offset: 0.3748  time: 1.0634  data_time: 0.0587  lr: 0.00034382  max_mem: 19293M
[10/10 04:39:36] d2.utils.events INFO:  eta: 9:42:49  iter: 17039  total_loss: 2.373  loss_sem_seg: 1.287  loss_relation: 0.1443  loss_center: 0.5829  loss_offset: 0.3478  time: 1.0634  data_time: 0.0604  lr: 0.00034363  max_mem: 19293M
[10/10 04:39:58] d2.utils.events INFO:  eta: 9:42:24  iter: 17059  total_loss: 2.305  loss_sem_seg: 1.244  loss_relation: 0.1396  loss_center: 0.5636  loss_offset: 0.3364  time: 1.0634  data_time: 0.0586  lr: 0.00034345  max_mem: 19293M
[10/10 04:40:19] d2.utils.events INFO:  eta: 9:42:06  iter: 17079  total_loss: 2.447  loss_sem_seg: 1.313  loss_relation: 0.1481  loss_center: 0.6028  loss_offset: 0.3283  time: 1.0634  data_time: 0.0620  lr: 0.00034326  max_mem: 19293M
[10/10 04:40:40] d2.utils.events INFO:  eta: 9:42:01  iter: 17099  total_loss: 2.44  loss_sem_seg: 1.333  loss_relation: 0.1501  loss_center: 0.5953  loss_offset: 0.3542  time: 1.0634  data_time: 0.0602  lr: 0.00034307  max_mem: 19293M
[10/10 04:41:02] d2.utils.events INFO:  eta: 9:41:40  iter: 17119  total_loss: 2.428  loss_sem_seg: 1.388  loss_relation: 0.1452  loss_center: 0.5555  loss_offset: 0.3633  time: 1.0634  data_time: 0.0655  lr: 0.00034288  max_mem: 19293M
[10/10 04:41:23] d2.utils.events INFO:  eta: 9:41:15  iter: 17139  total_loss: 2.354  loss_sem_seg: 1.247  loss_relation: 0.1477  loss_center: 0.6047  loss_offset: 0.3383  time: 1.0634  data_time: 0.0605  lr: 0.0003427  max_mem: 19293M
[10/10 04:41:44] d2.utils.events INFO:  eta: 9:40:54  iter: 17159  total_loss: 2.469  loss_sem_seg: 1.312  loss_relation: 0.1487  loss_center: 0.596  loss_offset: 0.3188  time: 1.0634  data_time: 0.0589  lr: 0.00034251  max_mem: 19293M
[10/10 04:42:05] d2.utils.events INFO:  eta: 9:40:33  iter: 17179  total_loss: 2.353  loss_sem_seg: 1.208  loss_relation: 0.1287  loss_center: 0.6163  loss_offset: 0.3247  time: 1.0634  data_time: 0.0637  lr: 0.00034232  max_mem: 19293M
[10/10 04:42:27] d2.utils.events INFO:  eta: 9:40:12  iter: 17199  total_loss: 2.239  loss_sem_seg: 1.254  loss_relation: 0.1269  loss_center: 0.5596  loss_offset: 0.3327  time: 1.0634  data_time: 0.0613  lr: 0.00034213  max_mem: 19293M
[10/10 04:42:48] d2.utils.events INFO:  eta: 9:39:49  iter: 17219  total_loss: 2.205  loss_sem_seg: 1.158  loss_relation: 0.1298  loss_center: 0.5732  loss_offset: 0.3135  time: 1.0634  data_time: 0.0593  lr: 0.00034195  max_mem: 19293M
[10/10 04:43:09] d2.utils.events INFO:  eta: 9:39:14  iter: 17239  total_loss: 2.278  loss_sem_seg: 1.272  loss_relation: 0.1299  loss_center: 0.5569  loss_offset: 0.3352  time: 1.0634  data_time: 0.0559  lr: 0.00034176  max_mem: 19293M
[10/10 04:43:31] d2.utils.events INFO:  eta: 9:39:00  iter: 17259  total_loss: 2.378  loss_sem_seg: 1.296  loss_relation: 0.1401  loss_center: 0.5943  loss_offset: 0.3332  time: 1.0634  data_time: 0.0695  lr: 0.00034157  max_mem: 19293M
[10/10 04:43:52] d2.utils.events INFO:  eta: 9:38:56  iter: 17279  total_loss: 2.321  loss_sem_seg: 1.285  loss_relation: 0.1354  loss_center: 0.5901  loss_offset: 0.3319  time: 1.0634  data_time: 0.0620  lr: 0.00034138  max_mem: 19293M
[10/10 04:44:13] d2.utils.events INFO:  eta: 9:38:31  iter: 17299  total_loss: 2.26  loss_sem_seg: 1.265  loss_relation: 0.1378  loss_center: 0.5721  loss_offset: 0.3211  time: 1.0634  data_time: 0.0643  lr: 0.00034119  max_mem: 19293M
[10/10 04:44:35] d2.utils.events INFO:  eta: 9:38:08  iter: 17319  total_loss: 2.295  loss_sem_seg: 1.213  loss_relation: 0.14  loss_center: 0.5343  loss_offset: 0.3469  time: 1.0634  data_time: 0.0677  lr: 0.00034101  max_mem: 19293M
[10/10 04:44:56] d2.utils.events INFO:  eta: 9:37:47  iter: 17339  total_loss: 2.293  loss_sem_seg: 1.273  loss_relation: 0.1357  loss_center: 0.5443  loss_offset: 0.3473  time: 1.0634  data_time: 0.0638  lr: 0.00034082  max_mem: 19293M
[10/10 04:45:17] d2.utils.events INFO:  eta: 9:37:24  iter: 17359  total_loss: 2.371  loss_sem_seg: 1.297  loss_relation: 0.1391  loss_center: 0.5296  loss_offset: 0.3394  time: 1.0634  data_time: 0.0605  lr: 0.00034063  max_mem: 19293M
[10/10 04:45:38] d2.utils.events INFO:  eta: 9:37:03  iter: 17379  total_loss: 2.452  loss_sem_seg: 1.276  loss_relation: 0.1433  loss_center: 0.6444  loss_offset: 0.3203  time: 1.0634  data_time: 0.0614  lr: 0.00034044  max_mem: 19293M
[10/10 04:46:00] d2.utils.events INFO:  eta: 9:36:42  iter: 17399  total_loss: 2.549  loss_sem_seg: 1.446  loss_relation: 0.1458  loss_center: 0.6045  loss_offset: 0.3532  time: 1.0634  data_time: 0.0571  lr: 0.00034026  max_mem: 19293M
[10/10 04:46:21] d2.utils.events INFO:  eta: 9:36:27  iter: 17419  total_loss: 2.353  loss_sem_seg: 1.262  loss_relation: 0.1452  loss_center: 0.5682  loss_offset: 0.3462  time: 1.0634  data_time: 0.0649  lr: 0.00034007  max_mem: 19293M
[10/10 04:46:42] d2.utils.events INFO:  eta: 9:36:11  iter: 17439  total_loss: 2.486  loss_sem_seg: 1.289  loss_relation: 0.1468  loss_center: 0.6049  loss_offset: 0.333  time: 1.0634  data_time: 0.0609  lr: 0.00033988  max_mem: 19293M
[10/10 04:47:03] d2.utils.events INFO:  eta: 9:35:45  iter: 17459  total_loss: 2.388  loss_sem_seg: 1.271  loss_relation: 0.1344  loss_center: 0.5824  loss_offset: 0.3363  time: 1.0634  data_time: 0.0610  lr: 0.00033969  max_mem: 19293M
[10/10 04:47:25] d2.utils.events INFO:  eta: 9:35:07  iter: 17479  total_loss: 2.276  loss_sem_seg: 1.224  loss_relation: 0.1253  loss_center: 0.5575  loss_offset: 0.3769  time: 1.0634  data_time: 0.0580  lr: 0.0003395  max_mem: 19293M
[10/10 04:47:46] d2.utils.events INFO:  eta: 9:34:53  iter: 17499  total_loss: 2.289  loss_sem_seg: 1.195  loss_relation: 0.1264  loss_center: 0.5588  loss_offset: 0.343  time: 1.0634  data_time: 0.0660  lr: 0.00033932  max_mem: 19293M
[10/10 04:48:07] d2.utils.events INFO:  eta: 9:34:33  iter: 17519  total_loss: 2.259  loss_sem_seg: 1.236  loss_relation: 0.122  loss_center: 0.5494  loss_offset: 0.3351  time: 1.0634  data_time: 0.0606  lr: 0.00033913  max_mem: 19293M
[10/10 04:48:28] d2.utils.events INFO:  eta: 9:34:03  iter: 17539  total_loss: 2.216  loss_sem_seg: 1.205  loss_relation: 0.1385  loss_center: 0.5481  loss_offset: 0.3141  time: 1.0634  data_time: 0.0518  lr: 0.00033894  max_mem: 19293M
[10/10 04:48:50] d2.utils.events INFO:  eta: 9:33:30  iter: 17559  total_loss: 2.265  loss_sem_seg: 1.24  loss_relation: 0.1345  loss_center: 0.5525  loss_offset: 0.3138  time: 1.0634  data_time: 0.0599  lr: 0.00033875  max_mem: 19293M
[10/10 04:49:11] d2.utils.events INFO:  eta: 9:33:06  iter: 17579  total_loss: 2.633  loss_sem_seg: 1.46  loss_relation: 0.1489  loss_center: 0.6402  loss_offset: 0.3419  time: 1.0634  data_time: 0.0572  lr: 0.00033856  max_mem: 19293M
[10/10 04:49:32] d2.utils.events INFO:  eta: 9:32:45  iter: 17599  total_loss: 2.41  loss_sem_seg: 1.358  loss_relation: 0.1362  loss_center: 0.5673  loss_offset: 0.3414  time: 1.0634  data_time: 0.0591  lr: 0.00033838  max_mem: 19293M
[10/10 04:49:53] d2.utils.events INFO:  eta: 9:32:21  iter: 17619  total_loss: 2.42  loss_sem_seg: 1.367  loss_relation: 0.1488  loss_center: 0.5723  loss_offset: 0.3182  time: 1.0634  data_time: 0.0605  lr: 0.00033819  max_mem: 19293M
[10/10 04:50:14] d2.utils.events INFO:  eta: 9:31:53  iter: 17639  total_loss: 2.475  loss_sem_seg: 1.359  loss_relation: 0.1436  loss_center: 0.6096  loss_offset: 0.3491  time: 1.0634  data_time: 0.0576  lr: 0.000338  max_mem: 19293M
[10/10 04:50:35] d2.utils.events INFO:  eta: 9:31:40  iter: 17659  total_loss: 2.338  loss_sem_seg: 1.269  loss_relation: 0.1386  loss_center: 0.5794  loss_offset: 0.3181  time: 1.0634  data_time: 0.0585  lr: 0.00033781  max_mem: 19293M
[10/10 04:50:57] d2.utils.events INFO:  eta: 9:31:19  iter: 17679  total_loss: 2.422  loss_sem_seg: 1.278  loss_relation: 0.143  loss_center: 0.5698  loss_offset: 0.3141  time: 1.0634  data_time: 0.0630  lr: 0.00033762  max_mem: 19293M
[10/10 04:51:18] d2.utils.events INFO:  eta: 9:30:56  iter: 17699  total_loss: 2.281  loss_sem_seg: 1.243  loss_relation: 0.1391  loss_center: 0.653  loss_offset: 0.3108  time: 1.0634  data_time: 0.0563  lr: 0.00033744  max_mem: 19293M
[10/10 04:51:39] d2.utils.events INFO:  eta: 9:30:43  iter: 17719  total_loss: 2.422  loss_sem_seg: 1.278  loss_relation: 0.1374  loss_center: 0.5966  loss_offset: 0.3646  time: 1.0634  data_time: 0.0634  lr: 0.00033725  max_mem: 19293M
[10/10 04:52:00] d2.utils.events INFO:  eta: 9:30:21  iter: 17739  total_loss: 2.234  loss_sem_seg: 1.262  loss_relation: 0.1319  loss_center: 0.5375  loss_offset: 0.3008  time: 1.0634  data_time: 0.0605  lr: 0.00033706  max_mem: 19293M
[10/10 04:52:22] d2.utils.events INFO:  eta: 9:30:01  iter: 17759  total_loss: 2.242  loss_sem_seg: 1.258  loss_relation: 0.1223  loss_center: 0.5654  loss_offset: 0.3241  time: 1.0634  data_time: 0.0658  lr: 0.00033687  max_mem: 19293M
[10/10 04:52:43] d2.utils.events INFO:  eta: 9:29:34  iter: 17779  total_loss: 2.282  loss_sem_seg: 1.168  loss_relation: 0.1207  loss_center: 0.567  loss_offset: 0.3314  time: 1.0634  data_time: 0.0588  lr: 0.00033668  max_mem: 19293M
[10/10 04:53:04] d2.utils.events INFO:  eta: 9:29:13  iter: 17799  total_loss: 2.275  loss_sem_seg: 1.233  loss_relation: 0.1319  loss_center: 0.5918  loss_offset: 0.3274  time: 1.0634  data_time: 0.0591  lr: 0.0003365  max_mem: 19293M
[10/10 04:53:26] d2.utils.events INFO:  eta: 9:28:47  iter: 17819  total_loss: 2.326  loss_sem_seg: 1.225  loss_relation: 0.1362  loss_center: 0.6538  loss_offset: 0.3211  time: 1.0634  data_time: 0.0582  lr: 0.00033631  max_mem: 19293M
[10/10 04:53:47] d2.utils.events INFO:  eta: 9:28:23  iter: 17839  total_loss: 2.2  loss_sem_seg: 1.19  loss_relation: 0.1298  loss_center: 0.5534  loss_offset: 0.3281  time: 1.0634  data_time: 0.0583  lr: 0.00033612  max_mem: 19293M
[10/10 04:54:08] d2.utils.events INFO:  eta: 9:28:08  iter: 17859  total_loss: 2.257  loss_sem_seg: 1.193  loss_relation: 0.1356  loss_center: 0.5933  loss_offset: 0.3421  time: 1.0634  data_time: 0.0644  lr: 0.00033593  max_mem: 19293M
[10/10 04:54:29] d2.utils.events INFO:  eta: 9:27:37  iter: 17879  total_loss: 2.325  loss_sem_seg: 1.248  loss_relation: 0.1372  loss_center: 0.5938  loss_offset: 0.3194  time: 1.0634  data_time: 0.0590  lr: 0.00033574  max_mem: 19293M
[10/10 04:54:51] d2.utils.events INFO:  eta: 9:27:12  iter: 17899  total_loss: 2.168  loss_sem_seg: 1.212  loss_relation: 0.1421  loss_center: 0.5469  loss_offset: 0.3143  time: 1.0634  data_time: 0.0636  lr: 0.00033555  max_mem: 19293M
[10/10 04:55:12] d2.utils.events INFO:  eta: 9:26:51  iter: 17919  total_loss: 2.458  loss_sem_seg: 1.334  loss_relation: 0.1372  loss_center: 0.5986  loss_offset: 0.3395  time: 1.0634  data_time: 0.0614  lr: 0.00033537  max_mem: 19293M
[10/10 04:55:33] d2.utils.events INFO:  eta: 9:26:26  iter: 17939  total_loss: 2.348  loss_sem_seg: 1.245  loss_relation: 0.1326  loss_center: 0.6425  loss_offset: 0.3566  time: 1.0633  data_time: 0.0550  lr: 0.00033518  max_mem: 19293M
[10/10 04:55:54] d2.utils.events INFO:  eta: 9:26:04  iter: 17959  total_loss: 2.331  loss_sem_seg: 1.27  loss_relation: 0.1362  loss_center: 0.6002  loss_offset: 0.3251  time: 1.0633  data_time: 0.0583  lr: 0.00033499  max_mem: 19293M
[10/10 04:56:15] d2.utils.events INFO:  eta: 9:25:45  iter: 17979  total_loss: 2.365  loss_sem_seg: 1.316  loss_relation: 0.1367  loss_center: 0.5501  loss_offset: 0.3273  time: 1.0633  data_time: 0.0622  lr: 0.0003348  max_mem: 19293M
[10/10 04:56:37] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0017999.pth
[10/10 04:56:39] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 04:56:39] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 04:56:39] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 04:56:39] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 04:56:53] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0011 s/iter. Inference: 0.0751 s/iter. Eval: 0.0289 s/iter. Total: 0.1050 s/iter. ETA=0:00:25
[10/10 04:56:58] d2.evaluation.evaluator INFO: Inference done 65/250. Dataloading: 0.0013 s/iter. Inference: 0.0656 s/iter. Eval: 0.0285 s/iter. Total: 0.0955 s/iter. ETA=0:00:17
[10/10 04:57:03] d2.evaluation.evaluator INFO: Inference done 121/250. Dataloading: 0.0013 s/iter. Inference: 0.0633 s/iter. Eval: 0.0284 s/iter. Total: 0.0931 s/iter. ETA=0:00:12
[10/10 04:57:08] d2.evaluation.evaluator INFO: Inference done 176/250. Dataloading: 0.0014 s/iter. Inference: 0.0629 s/iter. Eval: 0.0283 s/iter. Total: 0.0927 s/iter. ETA=0:00:06
[10/10 04:57:13] d2.evaluation.evaluator INFO: Inference done 233/250. Dataloading: 0.0014 s/iter. Inference: 0.0625 s/iter. Eval: 0.0279 s/iter. Total: 0.0919 s/iter. ETA=0:00:01
[10/10 04:57:15] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.928579 (0.093586 s / iter per device, on 2 devices)
[10/10 04:57:15] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062668 s / iter per device, on 2 devices)
[10/10 04:57:15] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalk13c0rg4 ...
[10/10 04:57:20] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 13.244595442563186
[10/10 04:57:20] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 12.627 | 46.915 | 17.043 |      130      |
| Things | 10.757 | 44.394 | 14.903 |      77       |
| Stuff  | 15.344 | 50.578 | 20.152 |      53       |
[10/10 04:57:20] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 04:57:20] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 04:57:20] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 04:57:20] d2.evaluation.testing INFO: copypaste: 12.6273,46.9150,17.0432,10.7572,44.3935,14.9030,15.3441,50.5783,20.1524
[10/10 04:57:20] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 04:57:20] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 04:57:20] d2.evaluation.testing INFO: copypaste: 0.1324
[10/10 04:57:20] d2.utils.events INFO:  eta: 9:25:22  iter: 17999  total_loss: 2.358  loss_sem_seg: 1.272  loss_relation: 0.1379  loss_center: 0.5763  loss_offset: 0.3496  time: 1.0633  data_time: 0.0623  lr: 0.00033461  max_mem: 19293M
[10/10 04:57:20] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.13245, not better than best score 0.16205 @ iteration 11999.
[10/10 04:57:42] d2.utils.events INFO:  eta: 9:25:08  iter: 18019  total_loss: 2.314  loss_sem_seg: 1.283  loss_relation: 0.1304  loss_center: 0.5361  loss_offset: 0.3307  time: 1.0633  data_time: 0.0683  lr: 0.00033443  max_mem: 19293M
[10/10 04:58:03] d2.utils.events INFO:  eta: 9:24:44  iter: 18039  total_loss: 2.144  loss_sem_seg: 1.168  loss_relation: 0.13  loss_center: 0.5241  loss_offset: 0.3212  time: 1.0633  data_time: 0.0587  lr: 0.00033424  max_mem: 19293M
[10/10 04:58:24] d2.utils.events INFO:  eta: 9:24:24  iter: 18059  total_loss: 2.158  loss_sem_seg: 1.105  loss_relation: 0.1227  loss_center: 0.5865  loss_offset: 0.3121  time: 1.0633  data_time: 0.0564  lr: 0.00033405  max_mem: 19293M
[10/10 04:58:45] d2.utils.events INFO:  eta: 9:24:01  iter: 18079  total_loss: 2.201  loss_sem_seg: 1.176  loss_relation: 0.1256  loss_center: 0.5806  loss_offset: 0.3163  time: 1.0633  data_time: 0.0601  lr: 0.00033386  max_mem: 19293M
[10/10 04:59:07] d2.utils.events INFO:  eta: 9:23:42  iter: 18099  total_loss: 2.304  loss_sem_seg: 1.179  loss_relation: 0.1248  loss_center: 0.5665  loss_offset: 0.3264  time: 1.0633  data_time: 0.0583  lr: 0.00033367  max_mem: 19293M
[10/10 04:59:28] d2.utils.events INFO:  eta: 9:23:17  iter: 18119  total_loss: 2.143  loss_sem_seg: 1.18  loss_relation: 0.1254  loss_center: 0.5313  loss_offset: 0.3154  time: 1.0633  data_time: 0.0596  lr: 0.00033348  max_mem: 19293M
[10/10 04:59:49] d2.utils.events INFO:  eta: 9:22:58  iter: 18139  total_loss: 2.307  loss_sem_seg: 1.227  loss_relation: 0.1284  loss_center: 0.5677  loss_offset: 0.3157  time: 1.0633  data_time: 0.0593  lr: 0.0003333  max_mem: 19293M
[10/10 05:00:10] d2.utils.events INFO:  eta: 9:22:37  iter: 18159  total_loss: 2.173  loss_sem_seg: 1.171  loss_relation: 0.1309  loss_center: 0.5376  loss_offset: 0.3351  time: 1.0633  data_time: 0.0624  lr: 0.00033311  max_mem: 19293M
[10/10 05:00:32] d2.utils.events INFO:  eta: 9:22:03  iter: 18179  total_loss: 2.271  loss_sem_seg: 1.207  loss_relation: 0.1414  loss_center: 0.6452  loss_offset: 0.341  time: 1.0633  data_time: 0.0614  lr: 0.00033292  max_mem: 19293M
[10/10 05:00:53] d2.utils.events INFO:  eta: 9:21:39  iter: 18199  total_loss: 2.281  loss_sem_seg: 1.24  loss_relation: 0.1287  loss_center: 0.5875  loss_offset: 0.3234  time: 1.0633  data_time: 0.0582  lr: 0.00033273  max_mem: 19293M
[10/10 05:01:14] d2.utils.events INFO:  eta: 9:21:26  iter: 18219  total_loss: 2.282  loss_sem_seg: 1.222  loss_relation: 0.1287  loss_center: 0.6202  loss_offset: 0.3344  time: 1.0633  data_time: 0.0552  lr: 0.00033254  max_mem: 19293M
[10/10 05:01:35] d2.utils.events INFO:  eta: 9:21:00  iter: 18239  total_loss: 2.317  loss_sem_seg: 1.238  loss_relation: 0.1351  loss_center: 0.5794  loss_offset: 0.3258  time: 1.0633  data_time: 0.0600  lr: 0.00033235  max_mem: 19293M
[10/10 05:01:56] d2.utils.events INFO:  eta: 9:20:36  iter: 18259  total_loss: 2.314  loss_sem_seg: 1.226  loss_relation: 0.1239  loss_center: 0.5756  loss_offset: 0.3195  time: 1.0633  data_time: 0.0601  lr: 0.00033217  max_mem: 19293M
[10/10 05:02:18] d2.utils.events INFO:  eta: 9:20:04  iter: 18279  total_loss: 2.129  loss_sem_seg: 1.173  loss_relation: 0.1309  loss_center: 0.4997  loss_offset: 0.3246  time: 1.0633  data_time: 0.0630  lr: 0.00033198  max_mem: 19293M
[10/10 05:02:39] d2.utils.events INFO:  eta: 9:19:42  iter: 18299  total_loss: 2.132  loss_sem_seg: 1.159  loss_relation: 0.1186  loss_center: 0.5062  loss_offset: 0.3188  time: 1.0633  data_time: 0.0578  lr: 0.00033179  max_mem: 19293M
[10/10 05:03:00] d2.utils.events INFO:  eta: 9:19:23  iter: 18319  total_loss: 1.954  loss_sem_seg: 1.073  loss_relation: 0.1133  loss_center: 0.4856  loss_offset: 0.2922  time: 1.0633  data_time: 0.0630  lr: 0.0003316  max_mem: 19293M
[10/10 05:03:21] d2.utils.events INFO:  eta: 9:19:04  iter: 18339  total_loss: 2.392  loss_sem_seg: 1.258  loss_relation: 0.1248  loss_center: 0.6129  loss_offset: 0.3546  time: 1.0633  data_time: 0.0632  lr: 0.00033141  max_mem: 19293M
[10/10 05:03:43] d2.utils.events INFO:  eta: 9:18:41  iter: 18359  total_loss: 2.186  loss_sem_seg: 1.121  loss_relation: 0.1178  loss_center: 0.5747  loss_offset: 0.3287  time: 1.0633  data_time: 0.0588  lr: 0.00033122  max_mem: 19293M
[10/10 05:04:04] d2.utils.events INFO:  eta: 9:18:22  iter: 18379  total_loss: 2.256  loss_sem_seg: 1.255  loss_relation: 0.1157  loss_center: 0.5614  loss_offset: 0.351  time: 1.0633  data_time: 0.0677  lr: 0.00033104  max_mem: 19293M
[10/10 05:04:25] d2.utils.events INFO:  eta: 9:18:06  iter: 18399  total_loss: 2.211  loss_sem_seg: 1.196  loss_relation: 0.1293  loss_center: 0.5996  loss_offset: 0.3008  time: 1.0633  data_time: 0.0617  lr: 0.00033085  max_mem: 19293M
[10/10 05:04:46] d2.utils.events INFO:  eta: 9:17:37  iter: 18419  total_loss: 2.33  loss_sem_seg: 1.189  loss_relation: 0.1378  loss_center: 0.6079  loss_offset: 0.3442  time: 1.0633  data_time: 0.0622  lr: 0.00033066  max_mem: 19293M
[10/10 05:05:08] d2.utils.events INFO:  eta: 9:17:24  iter: 18439  total_loss: 2.169  loss_sem_seg: 1.176  loss_relation: 0.1269  loss_center: 0.5259  loss_offset: 0.302  time: 1.0633  data_time: 0.0617  lr: 0.00033047  max_mem: 19293M
[10/10 05:05:29] d2.utils.events INFO:  eta: 9:17:03  iter: 18459  total_loss: 2.146  loss_sem_seg: 1.099  loss_relation: 0.1283  loss_center: 0.5349  loss_offset: 0.3411  time: 1.0633  data_time: 0.0559  lr: 0.00033028  max_mem: 19293M
[10/10 05:05:50] d2.utils.events INFO:  eta: 9:16:59  iter: 18479  total_loss: 2.21  loss_sem_seg: 1.204  loss_relation: 0.1267  loss_center: 0.5379  loss_offset: 0.3375  time: 1.0633  data_time: 0.0674  lr: 0.00033009  max_mem: 19293M
[10/10 05:06:12] d2.utils.events INFO:  eta: 9:16:37  iter: 18499  total_loss: 2.201  loss_sem_seg: 1.224  loss_relation: 0.1219  loss_center: 0.5317  loss_offset: 0.3336  time: 1.0633  data_time: 0.0584  lr: 0.00032991  max_mem: 19293M
[10/10 05:06:33] d2.utils.events INFO:  eta: 9:16:17  iter: 18519  total_loss: 2.339  loss_sem_seg: 1.2  loss_relation: 0.1323  loss_center: 0.5948  loss_offset: 0.3582  time: 1.0633  data_time: 0.0596  lr: 0.00032972  max_mem: 19293M
[10/10 05:06:54] d2.utils.events INFO:  eta: 9:15:55  iter: 18539  total_loss: 2.256  loss_sem_seg: 1.187  loss_relation: 0.1302  loss_center: 0.6036  loss_offset: 0.317  time: 1.0633  data_time: 0.0605  lr: 0.00032953  max_mem: 19293M
[10/10 05:07:15] d2.utils.events INFO:  eta: 9:15:35  iter: 18559  total_loss: 2.235  loss_sem_seg: 1.241  loss_relation: 0.1355  loss_center: 0.5772  loss_offset: 0.3428  time: 1.0633  data_time: 0.0588  lr: 0.00032934  max_mem: 19293M
[10/10 05:07:37] d2.utils.events INFO:  eta: 9:15:15  iter: 18579  total_loss: 2.129  loss_sem_seg: 1.157  loss_relation: 0.1214  loss_center: 0.5371  loss_offset: 0.3139  time: 1.0633  data_time: 0.0588  lr: 0.00032915  max_mem: 19293M
[10/10 05:07:58] d2.utils.events INFO:  eta: 9:14:53  iter: 18599  total_loss: 2.222  loss_sem_seg: 1.167  loss_relation: 0.116  loss_center: 0.5911  loss_offset: 0.3336  time: 1.0633  data_time: 0.0615  lr: 0.00032896  max_mem: 19293M
[10/10 05:08:19] d2.utils.events INFO:  eta: 9:14:32  iter: 18619  total_loss: 2.167  loss_sem_seg: 1.191  loss_relation: 0.1183  loss_center: 0.5213  loss_offset: 0.306  time: 1.0633  data_time: 0.0602  lr: 0.00032877  max_mem: 19293M
[10/10 05:08:40] d2.utils.events INFO:  eta: 9:14:07  iter: 18639  total_loss: 2.309  loss_sem_seg: 1.233  loss_relation: 0.1236  loss_center: 0.6125  loss_offset: 0.345  time: 1.0633  data_time: 0.0562  lr: 0.00032859  max_mem: 19293M
[10/10 05:09:01] d2.utils.events INFO:  eta: 9:13:43  iter: 18659  total_loss: 2.219  loss_sem_seg: 1.165  loss_relation: 0.1229  loss_center: 0.5507  loss_offset: 0.3248  time: 1.0633  data_time: 0.0593  lr: 0.0003284  max_mem: 19293M
[10/10 05:09:23] d2.utils.events INFO:  eta: 9:13:20  iter: 18679  total_loss: 2.223  loss_sem_seg: 1.179  loss_relation: 0.1156  loss_center: 0.5243  loss_offset: 0.3066  time: 1.0633  data_time: 0.0674  lr: 0.00032821  max_mem: 19293M
[10/10 05:09:44] d2.utils.events INFO:  eta: 9:12:59  iter: 18699  total_loss: 2.237  loss_sem_seg: 1.251  loss_relation: 0.1269  loss_center: 0.5523  loss_offset: 0.3135  time: 1.0633  data_time: 0.0585  lr: 0.00032802  max_mem: 19293M
[10/10 05:10:05] d2.utils.events INFO:  eta: 9:12:33  iter: 18719  total_loss: 2.204  loss_sem_seg: 1.201  loss_relation: 0.1283  loss_center: 0.5087  loss_offset: 0.3306  time: 1.0633  data_time: 0.0624  lr: 0.00032783  max_mem: 19293M
[10/10 05:10:27] d2.utils.events INFO:  eta: 9:12:11  iter: 18739  total_loss: 2.344  loss_sem_seg: 1.281  loss_relation: 0.1428  loss_center: 0.5881  loss_offset: 0.3132  time: 1.0633  data_time: 0.0594  lr: 0.00032764  max_mem: 19293M
[10/10 05:10:48] d2.utils.events INFO:  eta: 9:11:51  iter: 18759  total_loss: 2.47  loss_sem_seg: 1.431  loss_relation: 0.1503  loss_center: 0.5488  loss_offset: 0.3367  time: 1.0633  data_time: 0.0625  lr: 0.00032745  max_mem: 19293M
[10/10 05:11:09] d2.utils.events INFO:  eta: 9:11:32  iter: 18779  total_loss: 2.625  loss_sem_seg: 1.419  loss_relation: 0.1475  loss_center: 0.621  loss_offset: 0.3201  time: 1.0633  data_time: 0.0603  lr: 0.00032726  max_mem: 19293M
[10/10 05:11:30] d2.utils.events INFO:  eta: 9:11:09  iter: 18799  total_loss: 2.512  loss_sem_seg: 1.403  loss_relation: 0.1397  loss_center: 0.5842  loss_offset: 0.354  time: 1.0633  data_time: 0.0602  lr: 0.00032708  max_mem: 19293M
[10/10 05:11:52] d2.utils.events INFO:  eta: 9:10:52  iter: 18819  total_loss: 2.318  loss_sem_seg: 1.318  loss_relation: 0.1319  loss_center: 0.5631  loss_offset: 0.3159  time: 1.0633  data_time: 0.0583  lr: 0.00032689  max_mem: 19293M
[10/10 05:12:13] d2.utils.events INFO:  eta: 9:10:31  iter: 18839  total_loss: 2.478  loss_sem_seg: 1.355  loss_relation: 0.1323  loss_center: 0.6198  loss_offset: 0.3493  time: 1.0633  data_time: 0.0607  lr: 0.0003267  max_mem: 19293M
[10/10 05:12:34] d2.utils.events INFO:  eta: 9:10:09  iter: 18859  total_loss: 2.46  loss_sem_seg: 1.344  loss_relation: 0.1395  loss_center: 0.5771  loss_offset: 0.3373  time: 1.0633  data_time: 0.0604  lr: 0.00032651  max_mem: 19293M
[10/10 05:12:55] d2.utils.events INFO:  eta: 9:09:55  iter: 18879  total_loss: 2.177  loss_sem_seg: 1.163  loss_relation: 0.1229  loss_center: 0.5866  loss_offset: 0.3252  time: 1.0633  data_time: 0.0586  lr: 0.00032632  max_mem: 19293M
[10/10 05:13:16] d2.utils.events INFO:  eta: 9:09:29  iter: 18899  total_loss: 2.146  loss_sem_seg: 1.154  loss_relation: 0.1264  loss_center: 0.5449  loss_offset: 0.3071  time: 1.0633  data_time: 0.0602  lr: 0.00032613  max_mem: 19293M
[10/10 05:13:38] d2.utils.events INFO:  eta: 9:09:05  iter: 18919  total_loss: 2.324  loss_sem_seg: 1.233  loss_relation: 0.1209  loss_center: 0.5908  loss_offset: 0.3118  time: 1.0633  data_time: 0.0631  lr: 0.00032594  max_mem: 19293M
[10/10 05:13:59] d2.utils.events INFO:  eta: 9:08:45  iter: 18939  total_loss: 2.254  loss_sem_seg: 1.212  loss_relation: 0.1304  loss_center: 0.5895  loss_offset: 0.3248  time: 1.0633  data_time: 0.0585  lr: 0.00032575  max_mem: 19293M
[10/10 05:14:20] d2.utils.events INFO:  eta: 9:08:22  iter: 18959  total_loss: 2.247  loss_sem_seg: 1.183  loss_relation: 0.1211  loss_center: 0.5572  loss_offset: 0.3442  time: 1.0633  data_time: 0.0580  lr: 0.00032557  max_mem: 19293M
[10/10 05:14:41] d2.utils.events INFO:  eta: 9:08:06  iter: 18979  total_loss: 2.185  loss_sem_seg: 1.235  loss_relation: 0.1199  loss_center: 0.5226  loss_offset: 0.3232  time: 1.0633  data_time: 0.0627  lr: 0.00032538  max_mem: 19293M
[10/10 05:15:03] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0018999.pth
[10/10 05:15:04] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 05:15:04] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 05:15:04] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 05:15:04] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 05:15:19] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0020 s/iter. Inference: 0.0728 s/iter. Eval: 0.0290 s/iter. Total: 0.1038 s/iter. ETA=0:00:24
[10/10 05:15:24] d2.evaluation.evaluator INFO: Inference done 62/250. Dataloading: 0.0016 s/iter. Inference: 0.0679 s/iter. Eval: 0.0292 s/iter. Total: 0.0987 s/iter. ETA=0:00:18
[10/10 05:15:29] d2.evaluation.evaluator INFO: Inference done 117/250. Dataloading: 0.0016 s/iter. Inference: 0.0647 s/iter. Eval: 0.0287 s/iter. Total: 0.0950 s/iter. ETA=0:00:12
[10/10 05:15:34] d2.evaluation.evaluator INFO: Inference done 169/250. Dataloading: 0.0015 s/iter. Inference: 0.0651 s/iter. Eval: 0.0287 s/iter. Total: 0.0954 s/iter. ETA=0:00:07
[10/10 05:15:39] d2.evaluation.evaluator INFO: Inference done 226/250. Dataloading: 0.0015 s/iter. Inference: 0.0639 s/iter. Eval: 0.0282 s/iter. Total: 0.0937 s/iter. ETA=0:00:02
[10/10 05:15:41] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.244497 (0.094875 s / iter per device, on 2 devices)
[10/10 05:15:41] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063911 s / iter per device, on 2 devices)
[10/10 05:15:41] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evallwpm9vns ...
[10/10 05:15:46] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 13.92166632278175
[10/10 05:15:46] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.781 | 42.595 | 15.934 |      129      |
| Things | 9.553  | 40.723 | 13.287 |      76       |
| Stuff  | 14.974 | 45.280 | 19.730 |      53       |
[10/10 05:15:46] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 05:15:46] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 05:15:46] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 05:15:46] d2.evaluation.testing INFO: copypaste: 11.7805,42.5949,15.9338,9.5532,40.7227,13.2868,14.9745,45.2796,19.7296
[10/10 05:15:46] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 05:15:46] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 05:15:46] d2.evaluation.testing INFO: copypaste: 0.1392
[10/10 05:15:46] d2.utils.events INFO:  eta: 9:07:47  iter: 18999  total_loss: 2.156  loss_sem_seg: 1.131  loss_relation: 0.1177  loss_center: 0.5591  loss_offset: 0.3275  time: 1.0633  data_time: 0.0632  lr: 0.00032519  max_mem: 19293M
[10/10 05:15:46] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.13922, not better than best score 0.16205 @ iteration 11999.
[10/10 05:16:08] d2.utils.events INFO:  eta: 9:07:19  iter: 19019  total_loss: 2.209  loss_sem_seg: 1.138  loss_relation: 0.133  loss_center: 0.5705  loss_offset: 0.3229  time: 1.0633  data_time: 0.0572  lr: 0.000325  max_mem: 19293M
[10/10 05:16:29] d2.utils.events INFO:  eta: 9:07:05  iter: 19039  total_loss: 2.235  loss_sem_seg: 1.242  loss_relation: 0.1267  loss_center: 0.6012  loss_offset: 0.3152  time: 1.0633  data_time: 0.0626  lr: 0.00032481  max_mem: 19293M
[10/10 05:16:50] d2.utils.events INFO:  eta: 9:06:43  iter: 19059  total_loss: 2.238  loss_sem_seg: 1.172  loss_relation: 0.1261  loss_center: 0.5455  loss_offset: 0.3431  time: 1.0633  data_time: 0.0569  lr: 0.00032462  max_mem: 19293M
[10/10 05:17:12] d2.utils.events INFO:  eta: 9:06:23  iter: 19079  total_loss: 2.305  loss_sem_seg: 1.224  loss_relation: 0.1275  loss_center: 0.581  loss_offset: 0.3328  time: 1.0633  data_time: 0.0657  lr: 0.00032443  max_mem: 19293M
[10/10 05:17:33] d2.utils.events INFO:  eta: 9:06:02  iter: 19099  total_loss: 2.268  loss_sem_seg: 1.246  loss_relation: 0.1372  loss_center: 0.5383  loss_offset: 0.3122  time: 1.0633  data_time: 0.0647  lr: 0.00032424  max_mem: 19293M
[10/10 05:17:54] d2.utils.events INFO:  eta: 9:05:52  iter: 19119  total_loss: 2.362  loss_sem_seg: 1.319  loss_relation: 0.1333  loss_center: 0.5786  loss_offset: 0.322  time: 1.0633  data_time: 0.0636  lr: 0.00032406  max_mem: 19293M
[10/10 05:18:16] d2.utils.events INFO:  eta: 9:05:36  iter: 19139  total_loss: 2.32  loss_sem_seg: 1.261  loss_relation: 0.1283  loss_center: 0.5593  loss_offset: 0.3098  time: 1.0633  data_time: 0.0681  lr: 0.00032387  max_mem: 19293M
[10/10 05:18:37] d2.utils.events INFO:  eta: 9:05:16  iter: 19159  total_loss: 2.098  loss_sem_seg: 1.148  loss_relation: 0.1155  loss_center: 0.5178  loss_offset: 0.3183  time: 1.0633  data_time: 0.0630  lr: 0.00032368  max_mem: 19293M
[10/10 05:18:59] d2.utils.events INFO:  eta: 9:04:56  iter: 19179  total_loss: 2.19  loss_sem_seg: 1.212  loss_relation: 0.1196  loss_center: 0.5148  loss_offset: 0.3152  time: 1.0633  data_time: 0.0640  lr: 0.00032349  max_mem: 19293M
[10/10 05:19:20] d2.utils.events INFO:  eta: 9:04:43  iter: 19199  total_loss: 2.185  loss_sem_seg: 1.165  loss_relation: 0.1212  loss_center: 0.5619  loss_offset: 0.3178  time: 1.0633  data_time: 0.0612  lr: 0.0003233  max_mem: 19293M
[10/10 05:19:41] d2.utils.events INFO:  eta: 9:04:22  iter: 19219  total_loss: 2.282  loss_sem_seg: 1.247  loss_relation: 0.1212  loss_center: 0.5469  loss_offset: 0.3067  time: 1.0633  data_time: 0.0584  lr: 0.00032311  max_mem: 19293M
[10/10 05:20:02] d2.utils.events INFO:  eta: 9:04:08  iter: 19239  total_loss: 2.156  loss_sem_seg: 1.147  loss_relation: 0.1267  loss_center: 0.5561  loss_offset: 0.3272  time: 1.0633  data_time: 0.0586  lr: 0.00032292  max_mem: 19293M
[10/10 05:20:24] d2.utils.events INFO:  eta: 9:03:47  iter: 19259  total_loss: 2.128  loss_sem_seg: 1.065  loss_relation: 0.124  loss_center: 0.5716  loss_offset: 0.3087  time: 1.0633  data_time: 0.0684  lr: 0.00032273  max_mem: 19293M
[10/10 05:20:45] d2.utils.events INFO:  eta: 9:03:34  iter: 19279  total_loss: 2.219  loss_sem_seg: 1.23  loss_relation: 0.1201  loss_center: 0.5502  loss_offset: 0.3192  time: 1.0633  data_time: 0.0721  lr: 0.00032254  max_mem: 19293M
[10/10 05:21:06] d2.utils.events INFO:  eta: 9:03:12  iter: 19299  total_loss: 2.143  loss_sem_seg: 1.144  loss_relation: 0.1187  loss_center: 0.5516  loss_offset: 0.3085  time: 1.0633  data_time: 0.0607  lr: 0.00032235  max_mem: 19293M
[10/10 05:21:28] d2.utils.events INFO:  eta: 9:02:52  iter: 19319  total_loss: 2.15  loss_sem_seg: 1.19  loss_relation: 0.1213  loss_center: 0.5184  loss_offset: 0.3636  time: 1.0633  data_time: 0.0633  lr: 0.00032217  max_mem: 19293M
[10/10 05:21:49] d2.utils.events INFO:  eta: 9:02:31  iter: 19339  total_loss: 2.323  loss_sem_seg: 1.266  loss_relation: 0.1271  loss_center: 0.5761  loss_offset: 0.3251  time: 1.0633  data_time: 0.0614  lr: 0.00032198  max_mem: 19293M
[10/10 05:22:10] d2.utils.events INFO:  eta: 9:02:12  iter: 19359  total_loss: 2.132  loss_sem_seg: 1.16  loss_relation: 0.1192  loss_center: 0.5427  loss_offset: 0.3223  time: 1.0633  data_time: 0.0644  lr: 0.00032179  max_mem: 19293M
[10/10 05:22:31] d2.utils.events INFO:  eta: 9:01:41  iter: 19379  total_loss: 2.33  loss_sem_seg: 1.302  loss_relation: 0.1216  loss_center: 0.5723  loss_offset: 0.3409  time: 1.0633  data_time: 0.0656  lr: 0.0003216  max_mem: 19293M
[10/10 05:22:53] d2.utils.events INFO:  eta: 9:01:17  iter: 19399  total_loss: 2.215  loss_sem_seg: 1.189  loss_relation: 0.1288  loss_center: 0.5557  loss_offset: 0.3312  time: 1.0633  data_time: 0.0591  lr: 0.00032141  max_mem: 19293M
[10/10 05:23:14] d2.utils.events INFO:  eta: 9:00:57  iter: 19419  total_loss: 2.215  loss_sem_seg: 1.197  loss_relation: 0.1146  loss_center: 0.571  loss_offset: 0.3217  time: 1.0633  data_time: 0.0589  lr: 0.00032122  max_mem: 19293M
[10/10 05:23:35] d2.utils.events INFO:  eta: 9:00:27  iter: 19439  total_loss: 2.237  loss_sem_seg: 1.237  loss_relation: 0.1167  loss_center: 0.5564  loss_offset: 0.3458  time: 1.0633  data_time: 0.0594  lr: 0.00032103  max_mem: 19293M
[10/10 05:23:56] d2.utils.events INFO:  eta: 9:00:03  iter: 19459  total_loss: 2.062  loss_sem_seg: 1.089  loss_relation: 0.1068  loss_center: 0.5502  loss_offset: 0.3038  time: 1.0633  data_time: 0.0580  lr: 0.00032084  max_mem: 19293M
[10/10 05:24:17] d2.utils.events INFO:  eta: 8:59:31  iter: 19479  total_loss: 2.018  loss_sem_seg: 1.112  loss_relation: 0.1162  loss_center: 0.5084  loss_offset: 0.3107  time: 1.0633  data_time: 0.0582  lr: 0.00032065  max_mem: 19293M
[10/10 05:24:39] d2.utils.events INFO:  eta: 8:59:14  iter: 19499  total_loss: 2.266  loss_sem_seg: 1.257  loss_relation: 0.125  loss_center: 0.5992  loss_offset: 0.3423  time: 1.0633  data_time: 0.0602  lr: 0.00032046  max_mem: 19293M
[10/10 05:25:00] d2.utils.events INFO:  eta: 8:58:49  iter: 19519  total_loss: 2.166  loss_sem_seg: 1.134  loss_relation: 0.12  loss_center: 0.5471  loss_offset: 0.2991  time: 1.0633  data_time: 0.0575  lr: 0.00032028  max_mem: 19293M
[10/10 05:25:21] d2.utils.events INFO:  eta: 8:58:29  iter: 19539  total_loss: 2.115  loss_sem_seg: 1.178  loss_relation: 0.1122  loss_center: 0.5362  loss_offset: 0.3427  time: 1.0633  data_time: 0.0632  lr: 0.00032009  max_mem: 19293M
[10/10 05:25:42] d2.utils.events INFO:  eta: 8:58:07  iter: 19559  total_loss: 2.099  loss_sem_seg: 1.13  loss_relation: 0.1193  loss_center: 0.5687  loss_offset: 0.3036  time: 1.0633  data_time: 0.0586  lr: 0.0003199  max_mem: 19293M
[10/10 05:26:03] d2.utils.events INFO:  eta: 8:57:45  iter: 19579  total_loss: 2.188  loss_sem_seg: 1.142  loss_relation: 0.1246  loss_center: 0.5751  loss_offset: 0.3236  time: 1.0633  data_time: 0.0645  lr: 0.00031971  max_mem: 19293M
[10/10 05:26:25] d2.utils.events INFO:  eta: 8:57:27  iter: 19599  total_loss: 2.127  loss_sem_seg: 1.092  loss_relation: 0.1223  loss_center: 0.5644  loss_offset: 0.3148  time: 1.0633  data_time: 0.0603  lr: 0.00031952  max_mem: 19293M
[10/10 05:26:46] d2.utils.events INFO:  eta: 8:57:03  iter: 19619  total_loss: 2.22  loss_sem_seg: 1.201  loss_relation: 0.1211  loss_center: 0.5917  loss_offset: 0.3297  time: 1.0633  data_time: 0.0555  lr: 0.00031933  max_mem: 19293M
[10/10 05:27:07] d2.utils.events INFO:  eta: 8:56:47  iter: 19639  total_loss: 2.058  loss_sem_seg: 1.066  loss_relation: 0.1117  loss_center: 0.5555  loss_offset: 0.2907  time: 1.0633  data_time: 0.0604  lr: 0.00031914  max_mem: 19293M
[10/10 05:27:28] d2.utils.events INFO:  eta: 8:56:28  iter: 19659  total_loss: 2.157  loss_sem_seg: 1.143  loss_relation: 0.1245  loss_center: 0.5941  loss_offset: 0.3116  time: 1.0633  data_time: 0.0597  lr: 0.00031895  max_mem: 19293M
[10/10 05:27:50] d2.utils.events INFO:  eta: 8:56:05  iter: 19679  total_loss: 2.162  loss_sem_seg: 1.241  loss_relation: 0.124  loss_center: 0.5234  loss_offset: 0.3361  time: 1.0633  data_time: 0.0652  lr: 0.00031876  max_mem: 19293M
[10/10 05:28:11] d2.utils.events INFO:  eta: 8:55:49  iter: 19699  total_loss: 2.124  loss_sem_seg: 1.147  loss_relation: 0.1097  loss_center: 0.526  loss_offset: 0.3207  time: 1.0633  data_time: 0.0637  lr: 0.00031857  max_mem: 19293M
[10/10 05:28:32] d2.utils.events INFO:  eta: 8:55:27  iter: 19719  total_loss: 2.112  loss_sem_seg: 1.099  loss_relation: 0.1014  loss_center: 0.5377  loss_offset: 0.3417  time: 1.0633  data_time: 0.0660  lr: 0.00031838  max_mem: 19293M
[10/10 05:28:53] d2.utils.events INFO:  eta: 8:55:06  iter: 19739  total_loss: 2.077  loss_sem_seg: 1.128  loss_relation: 0.1117  loss_center: 0.5641  loss_offset: 0.3285  time: 1.0633  data_time: 0.0560  lr: 0.00031819  max_mem: 19293M
[10/10 05:29:15] d2.utils.events INFO:  eta: 8:54:46  iter: 19759  total_loss: 2.047  loss_sem_seg: 1.122  loss_relation: 0.1124  loss_center: 0.5229  loss_offset: 0.3219  time: 1.0633  data_time: 0.0648  lr: 0.000318  max_mem: 19293M
[10/10 05:29:36] d2.utils.events INFO:  eta: 8:54:26  iter: 19779  total_loss: 2.222  loss_sem_seg: 1.163  loss_relation: 0.1242  loss_center: 0.6089  loss_offset: 0.2956  time: 1.0633  data_time: 0.0653  lr: 0.00031782  max_mem: 19293M
[10/10 05:29:57] d2.utils.events INFO:  eta: 8:54:04  iter: 19799  total_loss: 2.164  loss_sem_seg: 1.111  loss_relation: 0.1132  loss_center: 0.5872  loss_offset: 0.3278  time: 1.0633  data_time: 0.0612  lr: 0.00031763  max_mem: 19293M
[10/10 05:30:19] d2.utils.events INFO:  eta: 8:53:43  iter: 19819  total_loss: 2.075  loss_sem_seg: 1.104  loss_relation: 0.1119  loss_center: 0.5326  loss_offset: 0.341  time: 1.0633  data_time: 0.0599  lr: 0.00031744  max_mem: 19293M
[10/10 05:30:40] d2.utils.events INFO:  eta: 8:53:24  iter: 19839  total_loss: 2.071  loss_sem_seg: 1.077  loss_relation: 0.1108  loss_center: 0.5511  loss_offset: 0.3294  time: 1.0633  data_time: 0.0641  lr: 0.00031725  max_mem: 19293M
[10/10 05:31:01] d2.utils.events INFO:  eta: 8:52:59  iter: 19859  total_loss: 2.192  loss_sem_seg: 1.134  loss_relation: 0.1218  loss_center: 0.5695  loss_offset: 0.3102  time: 1.0633  data_time: 0.0649  lr: 0.00031706  max_mem: 19293M
[10/10 05:31:22] d2.utils.events INFO:  eta: 8:52:39  iter: 19879  total_loss: 2.116  loss_sem_seg: 1.156  loss_relation: 0.1156  loss_center: 0.5365  loss_offset: 0.3084  time: 1.0633  data_time: 0.0622  lr: 0.00031687  max_mem: 19293M
[10/10 05:31:44] d2.utils.events INFO:  eta: 8:52:20  iter: 19899  total_loss: 2.073  loss_sem_seg: 1.091  loss_relation: 0.1175  loss_center: 0.5104  loss_offset: 0.335  time: 1.0633  data_time: 0.0591  lr: 0.00031668  max_mem: 19293M
[10/10 05:32:05] d2.utils.events INFO:  eta: 8:52:01  iter: 19919  total_loss: 2.063  loss_sem_seg: 1.15  loss_relation: 0.1093  loss_center: 0.5443  loss_offset: 0.318  time: 1.0633  data_time: 0.0616  lr: 0.00031649  max_mem: 19293M
[10/10 05:32:26] d2.utils.events INFO:  eta: 8:51:43  iter: 19939  total_loss: 1.954  loss_sem_seg: 1.091  loss_relation: 0.1117  loss_center: 0.4942  loss_offset: 0.2851  time: 1.0633  data_time: 0.0618  lr: 0.0003163  max_mem: 19293M
[10/10 05:32:47] d2.utils.events INFO:  eta: 8:51:22  iter: 19959  total_loss: 2.26  loss_sem_seg: 1.281  loss_relation: 0.1181  loss_center: 0.621  loss_offset: 0.302  time: 1.0633  data_time: 0.0656  lr: 0.00031611  max_mem: 19293M
[10/10 05:33:09] d2.utils.events INFO:  eta: 8:50:54  iter: 19979  total_loss: 2.048  loss_sem_seg: 1.143  loss_relation: 0.1168  loss_center: 0.5433  loss_offset: 0.3283  time: 1.0633  data_time: 0.0570  lr: 0.00031592  max_mem: 19293M
[10/10 05:33:30] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0019999.pth
[10/10 05:33:31] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 05:33:31] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 05:33:31] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 05:33:31] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 05:33:46] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0017 s/iter. Inference: 0.0701 s/iter. Eval: 0.0283 s/iter. Total: 0.1001 s/iter. ETA=0:00:23
[10/10 05:33:51] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0012 s/iter. Inference: 0.0668 s/iter. Eval: 0.0289 s/iter. Total: 0.0970 s/iter. ETA=0:00:18
[10/10 05:33:56] d2.evaluation.evaluator INFO: Inference done 119/250. Dataloading: 0.0013 s/iter. Inference: 0.0640 s/iter. Eval: 0.0283 s/iter. Total: 0.0938 s/iter. ETA=0:00:12
[10/10 05:34:01] d2.evaluation.evaluator INFO: Inference done 173/250. Dataloading: 0.0014 s/iter. Inference: 0.0637 s/iter. Eval: 0.0283 s/iter. Total: 0.0935 s/iter. ETA=0:00:07
[10/10 05:34:06] d2.evaluation.evaluator INFO: Inference done 231/250. Dataloading: 0.0014 s/iter. Inference: 0.0626 s/iter. Eval: 0.0279 s/iter. Total: 0.0919 s/iter. ETA=0:00:01
[10/10 05:34:08] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.783872 (0.092995 s / iter per device, on 2 devices)
[10/10 05:34:08] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062381 s / iter per device, on 2 devices)
[10/10 05:34:08] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_eval5ejciz6l ...
[10/10 05:34:13] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 14.678733788330334
[10/10 05:34:13] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 11.844 | 45.325 | 15.875 |      130      |
| Things | 9.570  | 43.977 | 13.091 |      77       |
| Stuff  | 15.147 | 47.285 | 19.920 |      53       |
[10/10 05:34:13] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 05:34:13] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 05:34:13] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 05:34:13] d2.evaluation.testing INFO: copypaste: 11.8435,45.3254,15.8747,9.5695,43.9767,13.0905,15.1473,47.2848,19.9196
[10/10 05:34:13] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 05:34:13] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 05:34:13] d2.evaluation.testing INFO: copypaste: 0.1468
[10/10 05:34:13] d2.utils.events INFO:  eta: 8:50:32  iter: 19999  total_loss: 2.065  loss_sem_seg: 1.082  loss_relation: 0.1017  loss_center: 0.532  loss_offset: 0.3041  time: 1.0633  data_time: 0.0600  lr: 0.00031573  max_mem: 19293M
[10/10 05:34:13] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.14679, not better than best score 0.16205 @ iteration 11999.
[10/10 05:34:34] d2.utils.events INFO:  eta: 8:50:10  iter: 20019  total_loss: 2.125  loss_sem_seg: 1.114  loss_relation: 0.1045  loss_center: 0.5477  loss_offset: 0.3377  time: 1.0633  data_time: 0.0686  lr: 0.00031554  max_mem: 19293M
[10/10 05:34:55] d2.utils.events INFO:  eta: 8:49:43  iter: 20039  total_loss: 2.16  loss_sem_seg: 1.174  loss_relation: 0.1111  loss_center: 0.5506  loss_offset: 0.3242  time: 1.0632  data_time: 0.0563  lr: 0.00031535  max_mem: 19293M
[10/10 05:35:17] d2.utils.events INFO:  eta: 8:49:28  iter: 20059  total_loss: 2.115  loss_sem_seg: 1.155  loss_relation: 0.1177  loss_center: 0.5094  loss_offset: 0.3176  time: 1.0632  data_time: 0.0630  lr: 0.00031516  max_mem: 19293M
[10/10 05:35:38] d2.utils.events INFO:  eta: 8:49:04  iter: 20079  total_loss: 2.271  loss_sem_seg: 1.175  loss_relation: 0.1233  loss_center: 0.6083  loss_offset: 0.3229  time: 1.0633  data_time: 0.0614  lr: 0.00031497  max_mem: 19293M
[10/10 05:36:00] d2.utils.events INFO:  eta: 8:48:42  iter: 20099  total_loss: 2.098  loss_sem_seg: 1.135  loss_relation: 0.1176  loss_center: 0.5348  loss_offset: 0.3023  time: 1.0633  data_time: 0.0624  lr: 0.00031479  max_mem: 19293M
[10/10 05:36:21] d2.utils.events INFO:  eta: 8:48:21  iter: 20119  total_loss: 2.23  loss_sem_seg: 1.221  loss_relation: 0.1167  loss_center: 0.5728  loss_offset: 0.3264  time: 1.0633  data_time: 0.0625  lr: 0.0003146  max_mem: 19293M
[10/10 05:36:42] d2.utils.events INFO:  eta: 8:47:55  iter: 20139  total_loss: 2.067  loss_sem_seg: 1.057  loss_relation: 0.1184  loss_center: 0.524  loss_offset: 0.3273  time: 1.0633  data_time: 0.0613  lr: 0.00031441  max_mem: 19293M
[10/10 05:37:04] d2.utils.events INFO:  eta: 8:47:38  iter: 20159  total_loss: 2.174  loss_sem_seg: 1.229  loss_relation: 0.1141  loss_center: 0.5373  loss_offset: 0.3341  time: 1.0633  data_time: 0.0615  lr: 0.00031422  max_mem: 19293M
[10/10 05:37:25] d2.utils.events INFO:  eta: 8:47:17  iter: 20179  total_loss: 2.021  loss_sem_seg: 1.097  loss_relation: 0.1185  loss_center: 0.5039  loss_offset: 0.3111  time: 1.0633  data_time: 0.0672  lr: 0.00031403  max_mem: 19293M
[10/10 05:37:46] d2.utils.events INFO:  eta: 8:46:49  iter: 20199  total_loss: 2.156  loss_sem_seg: 1.143  loss_relation: 0.116  loss_center: 0.5481  loss_offset: 0.3335  time: 1.0633  data_time: 0.0577  lr: 0.00031384  max_mem: 19293M
[10/10 05:38:08] d2.utils.events INFO:  eta: 8:46:25  iter: 20219  total_loss: 2.15  loss_sem_seg: 1.154  loss_relation: 0.1047  loss_center: 0.5415  loss_offset: 0.3266  time: 1.0633  data_time: 0.0625  lr: 0.00031365  max_mem: 19293M
[10/10 05:38:29] d2.utils.events INFO:  eta: 8:46:02  iter: 20239  total_loss: 2.186  loss_sem_seg: 1.12  loss_relation: 0.1241  loss_center: 0.5722  loss_offset: 0.3205  time: 1.0633  data_time: 0.0635  lr: 0.00031346  max_mem: 19293M
[10/10 05:38:50] d2.utils.events INFO:  eta: 8:45:41  iter: 20259  total_loss: 2.055  loss_sem_seg: 1.092  loss_relation: 0.1151  loss_center: 0.5543  loss_offset: 0.2944  time: 1.0633  data_time: 0.0604  lr: 0.00031327  max_mem: 19293M
[10/10 05:39:11] d2.utils.events INFO:  eta: 8:45:16  iter: 20279  total_loss: 2.238  loss_sem_seg: 1.208  loss_relation: 0.1109  loss_center: 0.5877  loss_offset: 0.3264  time: 1.0633  data_time: 0.0573  lr: 0.00031308  max_mem: 19293M
[10/10 05:39:33] d2.utils.events INFO:  eta: 8:44:55  iter: 20299  total_loss: 2.143  loss_sem_seg: 1.171  loss_relation: 0.1266  loss_center: 0.5427  loss_offset: 0.3386  time: 1.0633  data_time: 0.0610  lr: 0.00031289  max_mem: 19293M
[10/10 05:39:54] d2.utils.events INFO:  eta: 8:44:34  iter: 20319  total_loss: 2.16  loss_sem_seg: 1.189  loss_relation: 0.1083  loss_center: 0.5164  loss_offset: 0.3319  time: 1.0633  data_time: 0.0599  lr: 0.0003127  max_mem: 19293M
[10/10 05:40:15] d2.utils.events INFO:  eta: 8:44:14  iter: 20339  total_loss: 2.308  loss_sem_seg: 1.236  loss_relation: 0.1141  loss_center: 0.5887  loss_offset: 0.3015  time: 1.0633  data_time: 0.0598  lr: 0.00031251  max_mem: 19293M
[10/10 05:40:36] d2.utils.events INFO:  eta: 8:43:58  iter: 20359  total_loss: 2.202  loss_sem_seg: 1.215  loss_relation: 0.1087  loss_center: 0.56  loss_offset: 0.3323  time: 1.0633  data_time: 0.0679  lr: 0.00031232  max_mem: 19293M
[10/10 05:40:58] d2.utils.events INFO:  eta: 8:43:36  iter: 20379  total_loss: 2.048  loss_sem_seg: 1.073  loss_relation: 0.1175  loss_center: 0.5317  loss_offset: 0.3092  time: 1.0633  data_time: 0.0608  lr: 0.00031213  max_mem: 19293M
[10/10 05:41:19] d2.utils.events INFO:  eta: 8:43:17  iter: 20399  total_loss: 2.251  loss_sem_seg: 1.219  loss_relation: 0.1128  loss_center: 0.5411  loss_offset: 0.2996  time: 1.0633  data_time: 0.0580  lr: 0.00031194  max_mem: 19293M
[10/10 05:41:40] d2.utils.events INFO:  eta: 8:42:58  iter: 20419  total_loss: 2.11  loss_sem_seg: 1.13  loss_relation: 0.1096  loss_center: 0.5658  loss_offset: 0.3309  time: 1.0633  data_time: 0.0651  lr: 0.00031175  max_mem: 19293M
[10/10 05:42:02] d2.utils.events INFO:  eta: 8:42:39  iter: 20439  total_loss: 2.131  loss_sem_seg: 1.125  loss_relation: 0.1102  loss_center: 0.5598  loss_offset: 0.3103  time: 1.0633  data_time: 0.0614  lr: 0.00031156  max_mem: 19293M
[10/10 05:42:23] d2.utils.events INFO:  eta: 8:42:20  iter: 20459  total_loss: 2.188  loss_sem_seg: 1.239  loss_relation: 0.1183  loss_center: 0.5393  loss_offset: 0.2982  time: 1.0633  data_time: 0.0599  lr: 0.00031137  max_mem: 19293M
[10/10 05:42:44] d2.utils.events INFO:  eta: 8:41:59  iter: 20479  total_loss: 2.101  loss_sem_seg: 1.085  loss_relation: 0.116  loss_center: 0.5193  loss_offset: 0.3215  time: 1.0633  data_time: 0.0614  lr: 0.00031118  max_mem: 19293M
[10/10 05:43:05] d2.utils.events INFO:  eta: 8:41:38  iter: 20499  total_loss: 2.111  loss_sem_seg: 1.103  loss_relation: 0.1166  loss_center: 0.5623  loss_offset: 0.33  time: 1.0633  data_time: 0.0608  lr: 0.00031099  max_mem: 19293M
[10/10 05:43:27] d2.utils.events INFO:  eta: 8:41:18  iter: 20519  total_loss: 2.202  loss_sem_seg: 1.143  loss_relation: 0.1229  loss_center: 0.584  loss_offset: 0.3328  time: 1.0633  data_time: 0.0671  lr: 0.0003108  max_mem: 19293M
[10/10 05:43:48] d2.utils.events INFO:  eta: 8:41:05  iter: 20539  total_loss: 2.092  loss_sem_seg: 1.111  loss_relation: 0.1122  loss_center: 0.5694  loss_offset: 0.3218  time: 1.0633  data_time: 0.0642  lr: 0.00031061  max_mem: 19293M
[10/10 05:44:09] d2.utils.events INFO:  eta: 8:40:50  iter: 20559  total_loss: 2.071  loss_sem_seg: 1.09  loss_relation: 0.108  loss_center: 0.5839  loss_offset: 0.3156  time: 1.0633  data_time: 0.0569  lr: 0.00031042  max_mem: 19293M
[10/10 05:44:30] d2.utils.events INFO:  eta: 8:40:28  iter: 20579  total_loss: 2.06  loss_sem_seg: 1.113  loss_relation: 0.1028  loss_center: 0.5064  loss_offset: 0.2898  time: 1.0633  data_time: 0.0619  lr: 0.00031023  max_mem: 19293M
[10/10 05:44:52] d2.utils.events INFO:  eta: 8:39:57  iter: 20599  total_loss: 2.203  loss_sem_seg: 1.243  loss_relation: 0.1079  loss_center: 0.5303  loss_offset: 0.3266  time: 1.0633  data_time: 0.0620  lr: 0.00031004  max_mem: 19293M
[10/10 05:45:13] d2.utils.events INFO:  eta: 8:39:46  iter: 20619  total_loss: 2.166  loss_sem_seg: 1.202  loss_relation: 0.1177  loss_center: 0.5312  loss_offset: 0.338  time: 1.0633  data_time: 0.0655  lr: 0.00030985  max_mem: 19293M
[10/10 05:45:34] d2.utils.events INFO:  eta: 8:39:25  iter: 20639  total_loss: 2.149  loss_sem_seg: 1.163  loss_relation: 0.1169  loss_center: 0.5303  loss_offset: 0.3461  time: 1.0633  data_time: 0.0661  lr: 0.00030966  max_mem: 19293M
[10/10 05:45:56] d2.utils.events INFO:  eta: 8:39:04  iter: 20659  total_loss: 2.174  loss_sem_seg: 1.181  loss_relation: 0.12  loss_center: 0.5505  loss_offset: 0.3048  time: 1.0633  data_time: 0.0601  lr: 0.00030947  max_mem: 19293M
[10/10 05:46:17] d2.utils.events INFO:  eta: 8:38:43  iter: 20679  total_loss: 2.175  loss_sem_seg: 1.134  loss_relation: 0.1152  loss_center: 0.5859  loss_offset: 0.3123  time: 1.0633  data_time: 0.0562  lr: 0.00030928  max_mem: 19293M
[10/10 05:46:38] d2.utils.events INFO:  eta: 8:38:21  iter: 20699  total_loss: 2.059  loss_sem_seg: 1.071  loss_relation: 0.1113  loss_center: 0.5745  loss_offset: 0.2965  time: 1.0633  data_time: 0.0624  lr: 0.00030909  max_mem: 19293M
[10/10 05:46:59] d2.utils.events INFO:  eta: 8:37:44  iter: 20719  total_loss: 2.033  loss_sem_seg: 1.117  loss_relation: 0.121  loss_center: 0.4842  loss_offset: 0.3087  time: 1.0633  data_time: 0.0597  lr: 0.0003089  max_mem: 19293M
[10/10 05:47:21] d2.utils.events INFO:  eta: 8:37:27  iter: 20739  total_loss: 2.138  loss_sem_seg: 1.164  loss_relation: 0.1116  loss_center: 0.5598  loss_offset: 0.2963  time: 1.0633  data_time: 0.0604  lr: 0.00030871  max_mem: 19293M
[10/10 05:47:42] d2.utils.events INFO:  eta: 8:37:06  iter: 20759  total_loss: 2.149  loss_sem_seg: 1.131  loss_relation: 0.1128  loss_center: 0.5416  loss_offset: 0.3403  time: 1.0633  data_time: 0.0626  lr: 0.00030852  max_mem: 19293M
[10/10 05:48:03] d2.utils.events INFO:  eta: 8:36:45  iter: 20779  total_loss: 2.19  loss_sem_seg: 1.197  loss_relation: 0.116  loss_center: 0.5175  loss_offset: 0.289  time: 1.0633  data_time: 0.0627  lr: 0.00030833  max_mem: 19293M
[10/10 05:48:24] d2.utils.events INFO:  eta: 8:36:29  iter: 20799  total_loss: 2.192  loss_sem_seg: 1.149  loss_relation: 0.1207  loss_center: 0.5255  loss_offset: 0.3337  time: 1.0633  data_time: 0.0628  lr: 0.00030814  max_mem: 19293M
[10/10 05:48:46] d2.utils.events INFO:  eta: 8:36:06  iter: 20819  total_loss: 2.039  loss_sem_seg: 1.139  loss_relation: 0.1093  loss_center: 0.4712  loss_offset: 0.3138  time: 1.0633  data_time: 0.0568  lr: 0.00030795  max_mem: 19293M
[10/10 05:49:07] d2.utils.events INFO:  eta: 8:35:45  iter: 20839  total_loss: 2.101  loss_sem_seg: 1.077  loss_relation: 0.1115  loss_center: 0.5343  loss_offset: 0.3025  time: 1.0633  data_time: 0.0624  lr: 0.00030776  max_mem: 19293M
[10/10 05:49:28] d2.utils.events INFO:  eta: 8:35:29  iter: 20859  total_loss: 2.009  loss_sem_seg: 1.109  loss_relation: 0.1013  loss_center: 0.5228  loss_offset: 0.318  time: 1.0633  data_time: 0.0615  lr: 0.00030757  max_mem: 19293M
[10/10 05:49:49] d2.utils.events INFO:  eta: 8:34:58  iter: 20879  total_loss: 1.901  loss_sem_seg: 1.003  loss_relation: 0.1021  loss_center: 0.4889  loss_offset: 0.3014  time: 1.0633  data_time: 0.0613  lr: 0.00030738  max_mem: 19293M
[10/10 05:50:11] d2.utils.events INFO:  eta: 8:34:43  iter: 20899  total_loss: 2.089  loss_sem_seg: 1.137  loss_relation: 0.1028  loss_center: 0.5456  loss_offset: 0.3132  time: 1.0633  data_time: 0.0602  lr: 0.00030719  max_mem: 19293M
[10/10 05:50:32] d2.utils.events INFO:  eta: 8:34:03  iter: 20919  total_loss: 2.159  loss_sem_seg: 1.159  loss_relation: 0.105  loss_center: 0.5583  loss_offset: 0.326  time: 1.0633  data_time: 0.0591  lr: 0.000307  max_mem: 19293M
[10/10 05:50:53] d2.utils.events INFO:  eta: 8:33:49  iter: 20939  total_loss: 2.096  loss_sem_seg: 1.083  loss_relation: 0.1029  loss_center: 0.57  loss_offset: 0.3399  time: 1.0633  data_time: 0.0628  lr: 0.00030681  max_mem: 19293M
[10/10 05:51:14] d2.utils.events INFO:  eta: 8:33:28  iter: 20959  total_loss: 2.183  loss_sem_seg: 1.195  loss_relation: 0.1116  loss_center: 0.606  loss_offset: 0.3216  time: 1.0633  data_time: 0.0592  lr: 0.00030662  max_mem: 19293M
[10/10 05:51:36] d2.utils.events INFO:  eta: 8:33:16  iter: 20979  total_loss: 2.057  loss_sem_seg: 1.124  loss_relation: 0.1075  loss_center: 0.507  loss_offset: 0.3214  time: 1.0633  data_time: 0.0600  lr: 0.00030643  max_mem: 19293M
[10/10 05:51:57] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0020999.pth
[10/10 05:51:58] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 05:51:58] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 05:51:58] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 05:51:58] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 05:52:13] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0012 s/iter. Inference: 0.0724 s/iter. Eval: 0.0281 s/iter. Total: 0.1017 s/iter. ETA=0:00:24
[10/10 05:52:18] d2.evaluation.evaluator INFO: Inference done 64/250. Dataloading: 0.0012 s/iter. Inference: 0.0660 s/iter. Eval: 0.0285 s/iter. Total: 0.0957 s/iter. ETA=0:00:17
[10/10 05:52:23] d2.evaluation.evaluator INFO: Inference done 120/250. Dataloading: 0.0013 s/iter. Inference: 0.0635 s/iter. Eval: 0.0281 s/iter. Total: 0.0930 s/iter. ETA=0:00:12
[10/10 05:52:28] d2.evaluation.evaluator INFO: Inference done 174/250. Dataloading: 0.0014 s/iter. Inference: 0.0635 s/iter. Eval: 0.0283 s/iter. Total: 0.0932 s/iter. ETA=0:00:07
[10/10 05:52:33] d2.evaluation.evaluator INFO: Inference done 232/250. Dataloading: 0.0014 s/iter. Inference: 0.0626 s/iter. Eval: 0.0278 s/iter. Total: 0.0919 s/iter. ETA=0:00:01
[10/10 05:52:35] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.857442 (0.093296 s / iter per device, on 2 devices)
[10/10 05:52:35] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062644 s / iter per device, on 2 devices)
[10/10 05:52:35] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_eval48chp464 ...
[10/10 05:52:40] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 13.374215849854046
[10/10 05:52:40] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 12.342 | 45.846 | 16.701 |      129      |
| Things | 10.317 | 44.744 | 14.330 |      76       |
| Stuff  | 15.245 | 47.426 | 20.100 |      53       |
[10/10 05:52:40] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 05:52:40] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 05:52:40] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 05:52:40] d2.evaluation.testing INFO: copypaste: 12.3418,45.8459,16.7007,10.3174,44.7440,14.3303,15.2448,47.4260,20.0997
[10/10 05:52:40] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 05:52:40] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 05:52:40] d2.evaluation.testing INFO: copypaste: 0.1337
[10/10 05:52:40] d2.utils.events INFO:  eta: 8:32:55  iter: 20999  total_loss: 2.107  loss_sem_seg: 1.133  loss_relation: 0.1115  loss_center: 0.5218  loss_offset: 0.326  time: 1.0633  data_time: 0.0585  lr: 0.00030624  max_mem: 19293M
[10/10 05:52:40] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.13374, not better than best score 0.16205 @ iteration 11999.
[10/10 05:53:01] d2.utils.events INFO:  eta: 8:32:36  iter: 21019  total_loss: 2.022  loss_sem_seg: 1.128  loss_relation: 0.1022  loss_center: 0.5211  loss_offset: 0.3264  time: 1.0633  data_time: 0.0616  lr: 0.00030605  max_mem: 19293M
[10/10 05:53:23] d2.utils.events INFO:  eta: 8:32:16  iter: 21039  total_loss: 2.169  loss_sem_seg: 1.085  loss_relation: 0.121  loss_center: 0.5986  loss_offset: 0.3304  time: 1.0633  data_time: 0.0621  lr: 0.00030586  max_mem: 19293M
[10/10 05:53:44] d2.utils.events INFO:  eta: 8:31:51  iter: 21059  total_loss: 1.967  loss_sem_seg: 1.05  loss_relation: 0.1095  loss_center: 0.5455  loss_offset: 0.2917  time: 1.0633  data_time: 0.0633  lr: 0.00030567  max_mem: 19293M
[10/10 05:54:05] d2.utils.events INFO:  eta: 8:31:31  iter: 21079  total_loss: 2.062  loss_sem_seg: 1.092  loss_relation: 0.1163  loss_center: 0.5612  loss_offset: 0.3263  time: 1.0633  data_time: 0.0584  lr: 0.00030548  max_mem: 19293M
[10/10 05:54:26] d2.utils.events INFO:  eta: 8:31:09  iter: 21099  total_loss: 2.047  loss_sem_seg: 1.044  loss_relation: 0.1107  loss_center: 0.5656  loss_offset: 0.3034  time: 1.0633  data_time: 0.0604  lr: 0.00030529  max_mem: 19293M
[10/10 05:54:48] d2.utils.events INFO:  eta: 8:30:35  iter: 21119  total_loss: 1.943  loss_sem_seg: 1.063  loss_relation: 0.1001  loss_center: 0.4962  loss_offset: 0.3006  time: 1.0633  data_time: 0.0645  lr: 0.0003051  max_mem: 19293M
[10/10 05:55:09] d2.utils.events INFO:  eta: 8:30:23  iter: 21139  total_loss: 2.114  loss_sem_seg: 1.119  loss_relation: 0.09544  loss_center: 0.5324  loss_offset: 0.3038  time: 1.0633  data_time: 0.0559  lr: 0.00030491  max_mem: 19293M
[10/10 05:55:30] d2.utils.events INFO:  eta: 8:29:50  iter: 21159  total_loss: 2.112  loss_sem_seg: 1.1  loss_relation: 0.1081  loss_center: 0.5793  loss_offset: 0.3254  time: 1.0633  data_time: 0.0615  lr: 0.00030472  max_mem: 19293M
[10/10 05:55:52] d2.utils.events INFO:  eta: 8:29:35  iter: 21179  total_loss: 2.018  loss_sem_seg: 1.035  loss_relation: 0.1002  loss_center: 0.508  loss_offset: 0.3153  time: 1.0633  data_time: 0.0658  lr: 0.00030453  max_mem: 19293M
[10/10 05:56:13] d2.utils.events INFO:  eta: 8:29:10  iter: 21199  total_loss: 2.061  loss_sem_seg: 1.082  loss_relation: 0.1048  loss_center: 0.5467  loss_offset: 0.3121  time: 1.0633  data_time: 0.0548  lr: 0.00030434  max_mem: 19293M
[10/10 05:56:34] d2.utils.events INFO:  eta: 8:29:03  iter: 21219  total_loss: 2.012  loss_sem_seg: 1.054  loss_relation: 0.1043  loss_center: 0.5758  loss_offset: 0.3015  time: 1.0633  data_time: 0.0621  lr: 0.00030415  max_mem: 19293M
[10/10 05:56:55] d2.utils.events INFO:  eta: 8:28:37  iter: 21239  total_loss: 2.056  loss_sem_seg: 1.126  loss_relation: 0.1075  loss_center: 0.5426  loss_offset: 0.3047  time: 1.0633  data_time: 0.0605  lr: 0.00030396  max_mem: 19293M
[10/10 05:57:17] d2.utils.events INFO:  eta: 8:28:20  iter: 21259  total_loss: 2.117  loss_sem_seg: 1.09  loss_relation: 0.1017  loss_center: 0.5384  loss_offset: 0.3005  time: 1.0633  data_time: 0.0620  lr: 0.00030377  max_mem: 19293M
[10/10 05:57:38] d2.utils.events INFO:  eta: 8:28:01  iter: 21279  total_loss: 2.186  loss_sem_seg: 1.124  loss_relation: 0.1146  loss_center: 0.5986  loss_offset: 0.318  time: 1.0633  data_time: 0.0588  lr: 0.00030358  max_mem: 19293M
[10/10 05:57:59] d2.utils.events INFO:  eta: 8:27:38  iter: 21299  total_loss: 2.015  loss_sem_seg: 1.075  loss_relation: 0.1064  loss_center: 0.5278  loss_offset: 0.2841  time: 1.0633  data_time: 0.0598  lr: 0.00030339  max_mem: 19293M
[10/10 05:58:21] d2.utils.events INFO:  eta: 8:27:19  iter: 21319  total_loss: 2.229  loss_sem_seg: 1.122  loss_relation: 0.1195  loss_center: 0.6109  loss_offset: 0.3164  time: 1.0633  data_time: 0.0603  lr: 0.0003032  max_mem: 19293M
[10/10 05:58:42] d2.utils.events INFO:  eta: 8:27:00  iter: 21339  total_loss: 2.054  loss_sem_seg: 1.109  loss_relation: 0.1121  loss_center: 0.5214  loss_offset: 0.3314  time: 1.0633  data_time: 0.0633  lr: 0.00030301  max_mem: 19293M
[10/10 05:59:03] d2.utils.events INFO:  eta: 8:26:33  iter: 21359  total_loss: 1.947  loss_sem_seg: 1.041  loss_relation: 0.1032  loss_center: 0.4963  loss_offset: 0.3003  time: 1.0633  data_time: 0.0624  lr: 0.00030282  max_mem: 19293M
[10/10 05:59:24] d2.utils.events INFO:  eta: 8:26:12  iter: 21379  total_loss: 2.395  loss_sem_seg: 1.265  loss_relation: 0.1283  loss_center: 0.5767  loss_offset: 0.3281  time: 1.0633  data_time: 0.0651  lr: 0.00030263  max_mem: 19293M
[10/10 05:59:46] d2.utils.events INFO:  eta: 8:25:52  iter: 21399  total_loss: 2.213  loss_sem_seg: 1.183  loss_relation: 0.1047  loss_center: 0.5261  loss_offset: 0.3251  time: 1.0633  data_time: 0.0608  lr: 0.00030244  max_mem: 19293M
[10/10 06:00:07] d2.utils.events INFO:  eta: 8:25:32  iter: 21419  total_loss: 2.011  loss_sem_seg: 1.047  loss_relation: 0.1065  loss_center: 0.535  loss_offset: 0.3245  time: 1.0633  data_time: 0.0630  lr: 0.00030225  max_mem: 19293M
[10/10 06:00:28] d2.utils.events INFO:  eta: 8:25:11  iter: 21439  total_loss: 2.055  loss_sem_seg: 1.072  loss_relation: 0.1023  loss_center: 0.5045  loss_offset: 0.3171  time: 1.0633  data_time: 0.0646  lr: 0.00030206  max_mem: 19293M
[10/10 06:00:50] d2.utils.events INFO:  eta: 8:24:53  iter: 21459  total_loss: 2.057  loss_sem_seg: 1.132  loss_relation: 0.1028  loss_center: 0.5377  loss_offset: 0.3197  time: 1.0633  data_time: 0.0622  lr: 0.00030187  max_mem: 19293M
[10/10 06:01:11] d2.utils.events INFO:  eta: 8:24:36  iter: 21479  total_loss: 1.988  loss_sem_seg: 1.036  loss_relation: 0.09949  loss_center: 0.5457  loss_offset: 0.3393  time: 1.0633  data_time: 0.0606  lr: 0.00030168  max_mem: 19293M
[10/10 06:01:32] d2.utils.events INFO:  eta: 8:24:20  iter: 21499  total_loss: 2.05  loss_sem_seg: 1.087  loss_relation: 0.1017  loss_center: 0.5566  loss_offset: 0.3055  time: 1.0633  data_time: 0.0695  lr: 0.00030149  max_mem: 19293M
[10/10 06:01:53] d2.utils.events INFO:  eta: 8:23:57  iter: 21519  total_loss: 2.066  loss_sem_seg: 1.146  loss_relation: 0.1023  loss_center: 0.5225  loss_offset: 0.3256  time: 1.0633  data_time: 0.0552  lr: 0.0003013  max_mem: 19293M
[10/10 06:02:15] d2.utils.events INFO:  eta: 8:23:35  iter: 21539  total_loss: 1.967  loss_sem_seg: 1.057  loss_relation: 0.1026  loss_center: 0.4867  loss_offset: 0.3104  time: 1.0633  data_time: 0.0633  lr: 0.00030111  max_mem: 19293M
[10/10 06:02:36] d2.utils.events INFO:  eta: 8:23:11  iter: 21559  total_loss: 2.165  loss_sem_seg: 1.131  loss_relation: 0.116  loss_center: 0.562  loss_offset: 0.3332  time: 1.0633  data_time: 0.0612  lr: 0.00030092  max_mem: 19293M
[10/10 06:02:57] d2.utils.events INFO:  eta: 8:22:53  iter: 21579  total_loss: 2.17  loss_sem_seg: 1.109  loss_relation: 0.1031  loss_center: 0.6289  loss_offset: 0.317  time: 1.0633  data_time: 0.0604  lr: 0.00030073  max_mem: 19293M
[10/10 06:03:18] d2.utils.events INFO:  eta: 8:22:34  iter: 21599  total_loss: 2.025  loss_sem_seg: 1.084  loss_relation: 0.1072  loss_center: 0.5053  loss_offset: 0.3151  time: 1.0633  data_time: 0.0631  lr: 0.00030054  max_mem: 19293M
[10/10 06:03:40] d2.utils.events INFO:  eta: 8:22:11  iter: 21619  total_loss: 2.023  loss_sem_seg: 1.115  loss_relation: 0.1111  loss_center: 0.4895  loss_offset: 0.3078  time: 1.0633  data_time: 0.0591  lr: 0.00030035  max_mem: 19293M
[10/10 06:04:01] d2.utils.events INFO:  eta: 8:21:49  iter: 21639  total_loss: 2.064  loss_sem_seg: 1.105  loss_relation: 0.1149  loss_center: 0.5615  loss_offset: 0.2932  time: 1.0633  data_time: 0.0616  lr: 0.00030016  max_mem: 19293M
[10/10 06:04:22] d2.utils.events INFO:  eta: 8:21:28  iter: 21659  total_loss: 2.075  loss_sem_seg: 1.093  loss_relation: 0.1019  loss_center: 0.5391  loss_offset: 0.3215  time: 1.0633  data_time: 0.0589  lr: 0.00029997  max_mem: 19293M
[10/10 06:04:43] d2.utils.events INFO:  eta: 8:21:07  iter: 21679  total_loss: 2.071  loss_sem_seg: 1.092  loss_relation: 0.09901  loss_center: 0.531  loss_offset: 0.3272  time: 1.0633  data_time: 0.0593  lr: 0.00029977  max_mem: 19293M
[10/10 06:05:05] d2.utils.events INFO:  eta: 8:20:48  iter: 21699  total_loss: 1.995  loss_sem_seg: 1.07  loss_relation: 0.09882  loss_center: 0.5551  loss_offset: 0.2925  time: 1.0633  data_time: 0.0627  lr: 0.00029958  max_mem: 19293M
[10/10 06:05:26] d2.utils.events INFO:  eta: 8:20:31  iter: 21719  total_loss: 1.952  loss_sem_seg: 1.059  loss_relation: 0.09507  loss_center: 0.5319  loss_offset: 0.299  time: 1.0633  data_time: 0.0631  lr: 0.00029939  max_mem: 19293M
[10/10 06:05:47] d2.utils.events INFO:  eta: 8:20:10  iter: 21739  total_loss: 2.033  loss_sem_seg: 1.032  loss_relation: 0.09797  loss_center: 0.543  loss_offset: 0.295  time: 1.0633  data_time: 0.0583  lr: 0.0002992  max_mem: 19293M
[10/10 06:06:09] d2.utils.events INFO:  eta: 8:19:49  iter: 21759  total_loss: 2.014  loss_sem_seg: 0.9895  loss_relation: 0.1036  loss_center: 0.5366  loss_offset: 0.3031  time: 1.0633  data_time: 0.0589  lr: 0.00029901  max_mem: 19293M
[10/10 06:06:30] d2.utils.events INFO:  eta: 8:19:28  iter: 21779  total_loss: 2.026  loss_sem_seg: 1.069  loss_relation: 0.1016  loss_center: 0.4879  loss_offset: 0.3234  time: 1.0633  data_time: 0.0590  lr: 0.00029882  max_mem: 19293M
[10/10 06:06:51] d2.utils.events INFO:  eta: 8:19:07  iter: 21799  total_loss: 1.975  loss_sem_seg: 1.043  loss_relation: 0.106  loss_center: 0.5021  loss_offset: 0.3019  time: 1.0633  data_time: 0.0648  lr: 0.00029863  max_mem: 19293M
[10/10 06:07:13] d2.utils.events INFO:  eta: 8:18:46  iter: 21819  total_loss: 1.988  loss_sem_seg: 1.036  loss_relation: 0.09927  loss_center: 0.5315  loss_offset: 0.3061  time: 1.0633  data_time: 0.0617  lr: 0.00029844  max_mem: 19293M
[10/10 06:07:34] d2.utils.events INFO:  eta: 8:18:24  iter: 21839  total_loss: 2.054  loss_sem_seg: 1.113  loss_relation: 0.1011  loss_center: 0.559  loss_offset: 0.3355  time: 1.0633  data_time: 0.0600  lr: 0.00029825  max_mem: 19293M
[10/10 06:07:55] d2.utils.events INFO:  eta: 8:18:03  iter: 21859  total_loss: 1.978  loss_sem_seg: 1.023  loss_relation: 0.1087  loss_center: 0.5242  loss_offset: 0.3117  time: 1.0633  data_time: 0.0671  lr: 0.00029806  max_mem: 19293M
[10/10 06:08:16] d2.utils.events INFO:  eta: 8:17:45  iter: 21879  total_loss: 1.922  loss_sem_seg: 1.004  loss_relation: 0.09818  loss_center: 0.5338  loss_offset: 0.3107  time: 1.0633  data_time: 0.0574  lr: 0.00029787  max_mem: 19293M
[10/10 06:08:38] d2.utils.events INFO:  eta: 8:17:31  iter: 21899  total_loss: 2.143  loss_sem_seg: 1.19  loss_relation: 0.1097  loss_center: 0.5344  loss_offset: 0.3152  time: 1.0633  data_time: 0.0651  lr: 0.00029768  max_mem: 19293M
[10/10 06:08:59] d2.utils.events INFO:  eta: 8:17:17  iter: 21919  total_loss: 2.03  loss_sem_seg: 1.111  loss_relation: 0.1068  loss_center: 0.5292  loss_offset: 0.2996  time: 1.0633  data_time: 0.0640  lr: 0.00029749  max_mem: 19293M
[10/10 06:09:20] d2.utils.events INFO:  eta: 8:16:56  iter: 21939  total_loss: 2.007  loss_sem_seg: 1.088  loss_relation: 0.1044  loss_center: 0.5508  loss_offset: 0.3173  time: 1.0633  data_time: 0.0585  lr: 0.0002973  max_mem: 19293M
[10/10 06:09:41] d2.utils.events INFO:  eta: 8:16:33  iter: 21959  total_loss: 1.932  loss_sem_seg: 1.023  loss_relation: 0.09508  loss_center: 0.5194  loss_offset: 0.2888  time: 1.0633  data_time: 0.0548  lr: 0.00029711  max_mem: 19293M
[10/10 06:10:03] d2.utils.events INFO:  eta: 8:16:14  iter: 21979  total_loss: 2.032  loss_sem_seg: 1.087  loss_relation: 0.09435  loss_center: 0.5252  loss_offset: 0.3096  time: 1.0633  data_time: 0.0680  lr: 0.00029692  max_mem: 19293M
[10/10 06:10:24] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0021999.pth
[10/10 06:10:26] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 06:10:26] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 06:10:26] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 06:10:26] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 06:10:40] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0011 s/iter. Inference: 0.0698 s/iter. Eval: 0.0281 s/iter. Total: 0.0990 s/iter. ETA=0:00:23
[10/10 06:10:45] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0012 s/iter. Inference: 0.0670 s/iter. Eval: 0.0288 s/iter. Total: 0.0970 s/iter. ETA=0:00:18
[10/10 06:10:50] d2.evaluation.evaluator INFO: Inference done 118/250. Dataloading: 0.0013 s/iter. Inference: 0.0645 s/iter. Eval: 0.0284 s/iter. Total: 0.0943 s/iter. ETA=0:00:12
[10/10 06:10:55] d2.evaluation.evaluator INFO: Inference done 172/250. Dataloading: 0.0014 s/iter. Inference: 0.0640 s/iter. Eval: 0.0284 s/iter. Total: 0.0939 s/iter. ETA=0:00:07
[10/10 06:11:00] d2.evaluation.evaluator INFO: Inference done 229/250. Dataloading: 0.0014 s/iter. Inference: 0.0631 s/iter. Eval: 0.0279 s/iter. Total: 0.0926 s/iter. ETA=0:00:01
[10/10 06:11:03] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.996782 (0.093864 s / iter per device, on 2 devices)
[10/10 06:11:03] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.063041 s / iter per device, on 2 devices)
[10/10 06:11:03] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evald34ze35h ...
[10/10 06:11:07] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 13.324331044665794
[10/10 06:11:07] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 12.419 | 44.082 | 16.677 |      130      |
| Things | 10.476 | 42.587 | 14.442 |      77       |
| Stuff  | 15.242 | 46.254 | 19.925 |      53       |
[10/10 06:11:07] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 06:11:07] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 06:11:07] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 06:11:07] d2.evaluation.testing INFO: copypaste: 12.4189,44.0820,16.6773,10.4758,42.5868,14.4419,15.2419,46.2544,19.9248
[10/10 06:11:07] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 06:11:07] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 06:11:07] d2.evaluation.testing INFO: copypaste: 0.1332
[10/10 06:11:07] d2.utils.events INFO:  eta: 8:15:52  iter: 21999  total_loss: 2.04  loss_sem_seg: 1.083  loss_relation: 0.08978  loss_center: 0.5213  loss_offset: 0.2943  time: 1.0633  data_time: 0.0593  lr: 0.00029672  max_mem: 19293M
[10/10 06:11:07] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.13324, not better than best score 0.16205 @ iteration 11999.
[10/10 06:11:29] d2.utils.events INFO:  eta: 8:15:28  iter: 22019  total_loss: 2.061  loss_sem_seg: 1.089  loss_relation: 0.1098  loss_center: 0.5069  loss_offset: 0.3056  time: 1.0633  data_time: 0.0576  lr: 0.00029653  max_mem: 19293M
[10/10 06:11:50] d2.utils.events INFO:  eta: 8:15:12  iter: 22039  total_loss: 1.847  loss_sem_seg: 0.969  loss_relation: 0.09694  loss_center: 0.5377  loss_offset: 0.285  time: 1.0633  data_time: 0.0623  lr: 0.00029634  max_mem: 19293M
[10/10 06:12:11] d2.utils.events INFO:  eta: 8:14:45  iter: 22059  total_loss: 1.912  loss_sem_seg: 0.9787  loss_relation: 0.09422  loss_center: 0.512  loss_offset: 0.2845  time: 1.0633  data_time: 0.0645  lr: 0.00029615  max_mem: 19293M
[10/10 06:12:32] d2.utils.events INFO:  eta: 8:14:24  iter: 22079  total_loss: 1.935  loss_sem_seg: 1.036  loss_relation: 0.09417  loss_center: 0.4994  loss_offset: 0.2894  time: 1.0633  data_time: 0.0588  lr: 0.00029596  max_mem: 19293M
[10/10 06:12:54] d2.utils.events INFO:  eta: 8:13:59  iter: 22099  total_loss: 2.025  loss_sem_seg: 1.099  loss_relation: 0.09574  loss_center: 0.5039  loss_offset: 0.3194  time: 1.0633  data_time: 0.0586  lr: 0.00029577  max_mem: 19293M
[10/10 06:13:15] d2.utils.events INFO:  eta: 8:13:35  iter: 22119  total_loss: 1.994  loss_sem_seg: 1.032  loss_relation: 0.0963  loss_center: 0.5055  loss_offset: 0.2819  time: 1.0633  data_time: 0.0599  lr: 0.00029558  max_mem: 19293M
[10/10 06:13:36] d2.utils.events INFO:  eta: 8:13:11  iter: 22139  total_loss: 1.989  loss_sem_seg: 1.017  loss_relation: 0.09633  loss_center: 0.5038  loss_offset: 0.3236  time: 1.0633  data_time: 0.0598  lr: 0.00029539  max_mem: 19293M
[10/10 06:13:57] d2.utils.events INFO:  eta: 8:12:55  iter: 22159  total_loss: 1.996  loss_sem_seg: 1.036  loss_relation: 0.09448  loss_center: 0.4985  loss_offset: 0.3172  time: 1.0633  data_time: 0.0612  lr: 0.0002952  max_mem: 19293M
[10/10 06:14:19] d2.utils.events INFO:  eta: 8:12:24  iter: 22179  total_loss: 2.024  loss_sem_seg: 1.057  loss_relation: 0.1024  loss_center: 0.5536  loss_offset: 0.2836  time: 1.0633  data_time: 0.0622  lr: 0.00029501  max_mem: 19293M
[10/10 06:14:40] d2.utils.events INFO:  eta: 8:12:12  iter: 22199  total_loss: 1.939  loss_sem_seg: 1.027  loss_relation: 0.09692  loss_center: 0.486  loss_offset: 0.2807  time: 1.0633  data_time: 0.0631  lr: 0.00029482  max_mem: 19293M
[10/10 06:15:01] d2.utils.events INFO:  eta: 8:11:46  iter: 22219  total_loss: 2.007  loss_sem_seg: 1.091  loss_relation: 0.1063  loss_center: 0.5266  loss_offset: 0.3088  time: 1.0633  data_time: 0.0586  lr: 0.00029463  max_mem: 19293M
[10/10 06:15:22] d2.utils.events INFO:  eta: 8:11:28  iter: 22239  total_loss: 1.917  loss_sem_seg: 0.9866  loss_relation: 0.08668  loss_center: 0.5133  loss_offset: 0.2965  time: 1.0633  data_time: 0.0614  lr: 0.00029443  max_mem: 19293M
[10/10 06:15:44] d2.utils.events INFO:  eta: 8:11:04  iter: 22259  total_loss: 2.031  loss_sem_seg: 1.047  loss_relation: 0.094  loss_center: 0.5066  loss_offset: 0.3035  time: 1.0633  data_time: 0.0600  lr: 0.00029424  max_mem: 19293M
[10/10 06:16:05] d2.utils.events INFO:  eta: 8:10:40  iter: 22279  total_loss: 2.077  loss_sem_seg: 1.068  loss_relation: 0.09308  loss_center: 0.4752  loss_offset: 0.2911  time: 1.0633  data_time: 0.0621  lr: 0.00029405  max_mem: 19293M
[10/10 06:16:26] d2.utils.events INFO:  eta: 8:10:32  iter: 22299  total_loss: 1.803  loss_sem_seg: 0.9724  loss_relation: 0.08788  loss_center: 0.5182  loss_offset: 0.2838  time: 1.0633  data_time: 0.0688  lr: 0.00029386  max_mem: 19293M
[10/10 06:16:48] d2.utils.events INFO:  eta: 8:10:07  iter: 22319  total_loss: 2.004  loss_sem_seg: 1.077  loss_relation: 0.09163  loss_center: 0.509  loss_offset: 0.3068  time: 1.0633  data_time: 0.0620  lr: 0.00029367  max_mem: 19293M
[10/10 06:17:09] d2.utils.events INFO:  eta: 8:09:46  iter: 22339  total_loss: 1.966  loss_sem_seg: 1.043  loss_relation: 0.09399  loss_center: 0.5033  loss_offset: 0.2983  time: 1.0633  data_time: 0.0634  lr: 0.00029348  max_mem: 19293M
[10/10 06:17:30] d2.utils.events INFO:  eta: 8:09:18  iter: 22359  total_loss: 1.977  loss_sem_seg: 1.049  loss_relation: 0.09828  loss_center: 0.5498  loss_offset: 0.3005  time: 1.0633  data_time: 0.0573  lr: 0.00029329  max_mem: 19293M
[10/10 06:17:51] d2.utils.events INFO:  eta: 8:08:54  iter: 22379  total_loss: 2.093  loss_sem_seg: 1.1  loss_relation: 0.1028  loss_center: 0.5416  loss_offset: 0.3245  time: 1.0633  data_time: 0.0593  lr: 0.0002931  max_mem: 19293M
[10/10 06:18:13] d2.utils.events INFO:  eta: 8:08:30  iter: 22399  total_loss: 1.923  loss_sem_seg: 1.019  loss_relation: 0.09794  loss_center: 0.5122  loss_offset: 0.3121  time: 1.0633  data_time: 0.0578  lr: 0.00029291  max_mem: 19293M
[10/10 06:18:34] d2.utils.events INFO:  eta: 8:08:08  iter: 22419  total_loss: 1.934  loss_sem_seg: 1.007  loss_relation: 0.1015  loss_center: 0.501  loss_offset: 0.3221  time: 1.0633  data_time: 0.0631  lr: 0.00029272  max_mem: 19293M
[10/10 06:18:55] d2.utils.events INFO:  eta: 8:07:47  iter: 22439  total_loss: 1.985  loss_sem_seg: 1.074  loss_relation: 0.1054  loss_center: 0.5331  loss_offset: 0.2806  time: 1.0633  data_time: 0.0593  lr: 0.00029252  max_mem: 19293M
[10/10 06:19:17] d2.utils.events INFO:  eta: 8:07:26  iter: 22459  total_loss: 1.907  loss_sem_seg: 1.015  loss_relation: 0.09954  loss_center: 0.5221  loss_offset: 0.2889  time: 1.0633  data_time: 0.0599  lr: 0.00029233  max_mem: 19293M
[10/10 06:19:38] d2.utils.events INFO:  eta: 8:07:04  iter: 22479  total_loss: 2.073  loss_sem_seg: 1.041  loss_relation: 0.1035  loss_center: 0.554  loss_offset: 0.3024  time: 1.0633  data_time: 0.0588  lr: 0.00029214  max_mem: 19293M
[10/10 06:19:59] d2.utils.events INFO:  eta: 8:06:38  iter: 22499  total_loss: 2.011  loss_sem_seg: 1.058  loss_relation: 0.09923  loss_center: 0.5229  loss_offset: 0.3177  time: 1.0633  data_time: 0.0581  lr: 0.00029195  max_mem: 19293M
[10/10 06:20:20] d2.utils.events INFO:  eta: 8:06:22  iter: 22519  total_loss: 1.926  loss_sem_seg: 1.01  loss_relation: 0.09279  loss_center: 0.5389  loss_offset: 0.2779  time: 1.0633  data_time: 0.0639  lr: 0.00029176  max_mem: 19293M
[10/10 06:20:41] d2.utils.events INFO:  eta: 8:05:57  iter: 22539  total_loss: 1.929  loss_sem_seg: 0.9988  loss_relation: 0.09279  loss_center: 0.5453  loss_offset: 0.3054  time: 1.0633  data_time: 0.0589  lr: 0.00029157  max_mem: 19293M
[10/10 06:21:03] d2.utils.events INFO:  eta: 8:05:40  iter: 22559  total_loss: 1.878  loss_sem_seg: 0.9948  loss_relation: 0.09263  loss_center: 0.4956  loss_offset: 0.3008  time: 1.0633  data_time: 0.0617  lr: 0.00029138  max_mem: 19293M
[10/10 06:21:24] d2.utils.events INFO:  eta: 8:05:19  iter: 22579  total_loss: 1.889  loss_sem_seg: 0.9726  loss_relation: 0.08668  loss_center: 0.4636  loss_offset: 0.3067  time: 1.0633  data_time: 0.0678  lr: 0.00029119  max_mem: 19293M
[10/10 06:21:45] d2.utils.events INFO:  eta: 8:04:58  iter: 22599  total_loss: 1.945  loss_sem_seg: 1.027  loss_relation: 0.08817  loss_center: 0.534  loss_offset: 0.2873  time: 1.0633  data_time: 0.0643  lr: 0.000291  max_mem: 19293M
[10/10 06:22:07] d2.utils.events INFO:  eta: 8:04:36  iter: 22619  total_loss: 1.823  loss_sem_seg: 0.9977  loss_relation: 0.09163  loss_center: 0.4783  loss_offset: 0.2654  time: 1.0633  data_time: 0.0596  lr: 0.0002908  max_mem: 19293M
[10/10 06:22:28] d2.utils.events INFO:  eta: 8:04:13  iter: 22639  total_loss: 1.906  loss_sem_seg: 1.033  loss_relation: 0.09643  loss_center: 0.468  loss_offset: 0.2938  time: 1.0633  data_time: 0.0575  lr: 0.00029061  max_mem: 19293M
[10/10 06:22:49] d2.utils.events INFO:  eta: 8:03:50  iter: 22659  total_loss: 1.944  loss_sem_seg: 1.035  loss_relation: 0.09482  loss_center: 0.542  loss_offset: 0.3204  time: 1.0633  data_time: 0.0573  lr: 0.00029042  max_mem: 19293M
[10/10 06:23:10] d2.utils.events INFO:  eta: 8:03:31  iter: 22679  total_loss: 1.999  loss_sem_seg: 1.07  loss_relation: 0.09072  loss_center: 0.5084  loss_offset: 0.3027  time: 1.0633  data_time: 0.0588  lr: 0.00029023  max_mem: 19293M
[10/10 06:23:32] d2.utils.events INFO:  eta: 8:03:07  iter: 22699  total_loss: 1.985  loss_sem_seg: 1.045  loss_relation: 0.09849  loss_center: 0.5267  loss_offset: 0.3287  time: 1.0633  data_time: 0.0633  lr: 0.00029004  max_mem: 19293M
[10/10 06:23:53] d2.utils.events INFO:  eta: 8:02:42  iter: 22719  total_loss: 1.988  loss_sem_seg: 1.065  loss_relation: 0.09805  loss_center: 0.5285  loss_offset: 0.308  time: 1.0633  data_time: 0.0592  lr: 0.00028985  max_mem: 19293M
[10/10 06:24:14] d2.utils.events INFO:  eta: 8:02:16  iter: 22739  total_loss: 2.075  loss_sem_seg: 1.071  loss_relation: 0.1021  loss_center: 0.5852  loss_offset: 0.3229  time: 1.0633  data_time: 0.0584  lr: 0.00028966  max_mem: 19293M
[10/10 06:24:35] d2.utils.events INFO:  eta: 8:01:55  iter: 22759  total_loss: 1.948  loss_sem_seg: 1.01  loss_relation: 0.09947  loss_center: 0.537  loss_offset: 0.3049  time: 1.0633  data_time: 0.0598  lr: 0.00028947  max_mem: 19293M
[10/10 06:24:57] d2.utils.events INFO:  eta: 8:01:43  iter: 22779  total_loss: 2.04  loss_sem_seg: 1.077  loss_relation: 0.1045  loss_center: 0.528  loss_offset: 0.2952  time: 1.0633  data_time: 0.0583  lr: 0.00028927  max_mem: 19293M
[10/10 06:25:18] d2.utils.events INFO:  eta: 8:01:24  iter: 22799  total_loss: 1.952  loss_sem_seg: 1.037  loss_relation: 0.07887  loss_center: 0.5607  loss_offset: 0.2893  time: 1.0633  data_time: 0.0635  lr: 0.00028908  max_mem: 19293M
[10/10 06:25:39] d2.utils.events INFO:  eta: 8:01:04  iter: 22819  total_loss: 1.836  loss_sem_seg: 1.001  loss_relation: 0.08849  loss_center: 0.5054  loss_offset: 0.2652  time: 1.0633  data_time: 0.0642  lr: 0.00028889  max_mem: 19293M
[10/10 06:26:01] d2.utils.events INFO:  eta: 8:00:48  iter: 22839  total_loss: 1.977  loss_sem_seg: 0.9939  loss_relation: 0.09134  loss_center: 0.5483  loss_offset: 0.2927  time: 1.0633  data_time: 0.0648  lr: 0.0002887  max_mem: 19293M
[10/10 06:26:22] d2.utils.events INFO:  eta: 8:00:29  iter: 22859  total_loss: 2.015  loss_sem_seg: 1.039  loss_relation: 0.09292  loss_center: 0.5447  loss_offset: 0.3061  time: 1.0633  data_time: 0.0632  lr: 0.00028851  max_mem: 19293M
[10/10 06:26:43] d2.utils.events INFO:  eta: 8:00:01  iter: 22879  total_loss: 1.834  loss_sem_seg: 0.9707  loss_relation: 0.0899  loss_center: 0.4909  loss_offset: 0.2865  time: 1.0633  data_time: 0.0558  lr: 0.00028832  max_mem: 19293M
[10/10 06:27:04] d2.utils.events INFO:  eta: 7:59:37  iter: 22899  total_loss: 1.917  loss_sem_seg: 0.9752  loss_relation: 0.09574  loss_center: 0.5123  loss_offset: 0.3003  time: 1.0633  data_time: 0.0610  lr: 0.00028813  max_mem: 19293M
[10/10 06:27:26] d2.utils.events INFO:  eta: 7:59:14  iter: 22919  total_loss: 1.81  loss_sem_seg: 0.9159  loss_relation: 0.09075  loss_center: 0.4902  loss_offset: 0.3011  time: 1.0633  data_time: 0.0614  lr: 0.00028794  max_mem: 19293M
[10/10 06:27:47] d2.utils.events INFO:  eta: 7:58:44  iter: 22939  total_loss: 1.938  loss_sem_seg: 1.039  loss_relation: 0.09499  loss_center: 0.4803  loss_offset: 0.2915  time: 1.0633  data_time: 0.0595  lr: 0.00028774  max_mem: 19293M
[10/10 06:28:08] d2.utils.events INFO:  eta: 7:58:24  iter: 22959  total_loss: 1.981  loss_sem_seg: 1.04  loss_relation: 0.09968  loss_center: 0.5112  loss_offset: 0.2986  time: 1.0633  data_time: 0.0587  lr: 0.00028755  max_mem: 19293M
[10/10 06:28:29] d2.utils.events INFO:  eta: 7:58:01  iter: 22979  total_loss: 1.938  loss_sem_seg: 1.047  loss_relation: 0.1045  loss_center: 0.5193  loss_offset: 0.3079  time: 1.0632  data_time: 0.0597  lr: 0.00028736  max_mem: 19293M
[10/10 06:28:50] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0022999.pth
[10/10 06:28:52] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 06:28:52] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 06:28:52] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 06:28:52] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 06:29:06] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0021 s/iter. Inference: 0.0699 s/iter. Eval: 0.0307 s/iter. Total: 0.1027 s/iter. ETA=0:00:24
[10/10 06:29:11] d2.evaluation.evaluator INFO: Inference done 65/250. Dataloading: 0.0012 s/iter. Inference: 0.0649 s/iter. Eval: 0.0285 s/iter. Total: 0.0947 s/iter. ETA=0:00:17
[10/10 06:29:16] d2.evaluation.evaluator INFO: Inference done 121/250. Dataloading: 0.0014 s/iter. Inference: 0.0628 s/iter. Eval: 0.0284 s/iter. Total: 0.0927 s/iter. ETA=0:00:11
[10/10 06:29:21] d2.evaluation.evaluator INFO: Inference done 176/250. Dataloading: 0.0014 s/iter. Inference: 0.0628 s/iter. Eval: 0.0284 s/iter. Total: 0.0926 s/iter. ETA=0:00:06
[10/10 06:29:26] d2.evaluation.evaluator INFO: Inference done 232/250. Dataloading: 0.0015 s/iter. Inference: 0.0624 s/iter. Eval: 0.0280 s/iter. Total: 0.0919 s/iter. ETA=0:00:01
[10/10 06:29:29] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.959985 (0.093714 s / iter per device, on 2 devices)
[10/10 06:29:29] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062198 s / iter per device, on 2 devices)
[10/10 06:29:29] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalzii4e0i3 ...
[10/10 06:29:34] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 12.793093899135604
[10/10 06:29:34] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 12.046 | 44.402 | 16.273 |      129      |
| Things | 10.063 | 43.630 | 13.936 |      76       |
| Stuff  | 14.890 | 45.508 | 19.623 |      53       |
[10/10 06:29:34] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 06:29:34] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 06:29:34] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 06:29:34] d2.evaluation.testing INFO: copypaste: 12.0461,44.4018,16.2727,10.0628,43.6304,13.9361,14.8901,45.5080,19.6234
[10/10 06:29:34] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 06:29:34] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 06:29:34] d2.evaluation.testing INFO: copypaste: 0.1279
[10/10 06:29:34] d2.utils.events INFO:  eta: 7:57:41  iter: 22999  total_loss: 2.087  loss_sem_seg: 1.087  loss_relation: 0.0999  loss_center: 0.5453  loss_offset: 0.3269  time: 1.0632  data_time: 0.0598  lr: 0.00028717  max_mem: 19293M
[10/10 06:29:34] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.12793, not better than best score 0.16205 @ iteration 11999.
[10/10 06:29:55] d2.utils.events INFO:  eta: 7:57:19  iter: 23019  total_loss: 1.978  loss_sem_seg: 1.028  loss_relation: 0.104  loss_center: 0.5247  loss_offset: 0.3078  time: 1.0632  data_time: 0.0584  lr: 0.00028698  max_mem: 19293M
[10/10 06:30:16] d2.utils.events INFO:  eta: 7:56:59  iter: 23039  total_loss: 1.95  loss_sem_seg: 0.9962  loss_relation: 0.09889  loss_center: 0.4987  loss_offset: 0.292  time: 1.0632  data_time: 0.0609  lr: 0.00028679  max_mem: 19293M
[10/10 06:30:37] d2.utils.events INFO:  eta: 7:56:37  iter: 23059  total_loss: 2.007  loss_sem_seg: 1.033  loss_relation: 0.1018  loss_center: 0.5806  loss_offset: 0.2883  time: 1.0632  data_time: 0.0589  lr: 0.0002866  max_mem: 19293M
[10/10 06:30:58] d2.utils.events INFO:  eta: 7:56:15  iter: 23079  total_loss: 1.846  loss_sem_seg: 0.9695  loss_relation: 0.08413  loss_center: 0.4582  loss_offset: 0.2721  time: 1.0632  data_time: 0.0566  lr: 0.0002864  max_mem: 19293M
[10/10 06:31:20] d2.utils.events INFO:  eta: 7:55:56  iter: 23099  total_loss: 1.905  loss_sem_seg: 0.9848  loss_relation: 0.07792  loss_center: 0.4952  loss_offset: 0.2934  time: 1.0632  data_time: 0.0606  lr: 0.00028621  max_mem: 19293M
[10/10 06:31:41] d2.utils.events INFO:  eta: 7:55:41  iter: 23119  total_loss: 1.856  loss_sem_seg: 1.003  loss_relation: 0.08989  loss_center: 0.4916  loss_offset: 0.3007  time: 1.0632  data_time: 0.0662  lr: 0.00028602  max_mem: 19293M
[10/10 06:32:03] d2.utils.events INFO:  eta: 7:55:22  iter: 23139  total_loss: 2.078  loss_sem_seg: 1.134  loss_relation: 0.08736  loss_center: 0.5515  loss_offset: 0.2815  time: 1.0632  data_time: 0.0705  lr: 0.00028583  max_mem: 19293M
[10/10 06:32:24] d2.utils.events INFO:  eta: 7:54:58  iter: 23159  total_loss: 1.874  loss_sem_seg: 0.9504  loss_relation: 0.0912  loss_center: 0.4623  loss_offset: 0.2819  time: 1.0632  data_time: 0.0603  lr: 0.00028564  max_mem: 19293M
[10/10 06:32:45] d2.utils.events INFO:  eta: 7:54:33  iter: 23179  total_loss: 1.977  loss_sem_seg: 1.037  loss_relation: 0.09561  loss_center: 0.512  loss_offset: 0.3105  time: 1.0632  data_time: 0.0576  lr: 0.00028545  max_mem: 19293M
[10/10 06:33:06] d2.utils.events INFO:  eta: 7:54:14  iter: 23199  total_loss: 1.976  loss_sem_seg: 1.088  loss_relation: 0.09391  loss_center: 0.5038  loss_offset: 0.3094  time: 1.0632  data_time: 0.0616  lr: 0.00028525  max_mem: 19293M
[10/10 06:33:28] d2.utils.events INFO:  eta: 7:53:54  iter: 23219  total_loss: 1.948  loss_sem_seg: 1.048  loss_relation: 0.08903  loss_center: 0.473  loss_offset: 0.2951  time: 1.0632  data_time: 0.0641  lr: 0.00028506  max_mem: 19293M
[10/10 06:33:49] d2.utils.events INFO:  eta: 7:53:38  iter: 23239  total_loss: 1.867  loss_sem_seg: 1.022  loss_relation: 0.08438  loss_center: 0.5109  loss_offset: 0.3007  time: 1.0632  data_time: 0.0662  lr: 0.00028487  max_mem: 19293M
[10/10 06:34:10] d2.utils.events INFO:  eta: 7:53:17  iter: 23259  total_loss: 1.948  loss_sem_seg: 1.05  loss_relation: 0.09233  loss_center: 0.4958  loss_offset: 0.299  time: 1.0632  data_time: 0.0603  lr: 0.00028468  max_mem: 19293M
[10/10 06:34:32] d2.utils.events INFO:  eta: 7:52:55  iter: 23279  total_loss: 1.997  loss_sem_seg: 1.062  loss_relation: 0.1053  loss_center: 0.5502  loss_offset: 0.302  time: 1.0632  data_time: 0.0603  lr: 0.00028449  max_mem: 19293M
[10/10 06:34:53] d2.utils.events INFO:  eta: 7:52:33  iter: 23299  total_loss: 2.044  loss_sem_seg: 1.033  loss_relation: 0.1027  loss_center: 0.5747  loss_offset: 0.3178  time: 1.0632  data_time: 0.0648  lr: 0.0002843  max_mem: 19293M
[10/10 06:35:14] d2.utils.events INFO:  eta: 7:52:12  iter: 23319  total_loss: 2.017  loss_sem_seg: 1.073  loss_relation: 0.09728  loss_center: 0.547  loss_offset: 0.2815  time: 1.0633  data_time: 0.0618  lr: 0.00028411  max_mem: 19293M
[10/10 06:35:35] d2.utils.events INFO:  eta: 7:51:49  iter: 23339  total_loss: 1.863  loss_sem_seg: 0.9911  loss_relation: 0.09254  loss_center: 0.4912  loss_offset: 0.305  time: 1.0633  data_time: 0.0607  lr: 0.00028391  max_mem: 19293M
[10/10 06:35:57] d2.utils.events INFO:  eta: 7:51:30  iter: 23359  total_loss: 1.893  loss_sem_seg: 0.9907  loss_relation: 0.08795  loss_center: 0.5272  loss_offset: 0.3063  time: 1.0633  data_time: 0.0630  lr: 0.00028372  max_mem: 19293M
[10/10 06:36:18] d2.utils.events INFO:  eta: 7:51:09  iter: 23379  total_loss: 1.942  loss_sem_seg: 0.9721  loss_relation: 0.08721  loss_center: 0.5076  loss_offset: 0.31  time: 1.0632  data_time: 0.0582  lr: 0.00028353  max_mem: 19293M
[10/10 06:36:39] d2.utils.events INFO:  eta: 7:50:47  iter: 23399  total_loss: 1.952  loss_sem_seg: 0.9985  loss_relation: 0.08502  loss_center: 0.5112  loss_offset: 0.3094  time: 1.0632  data_time: 0.0572  lr: 0.00028334  max_mem: 19293M
[10/10 06:37:01] d2.utils.events INFO:  eta: 7:50:23  iter: 23419  total_loss: 1.896  loss_sem_seg: 1.002  loss_relation: 0.09112  loss_center: 0.4936  loss_offset: 0.2818  time: 1.0632  data_time: 0.0626  lr: 0.00028315  max_mem: 19293M
[10/10 06:37:22] d2.utils.events INFO:  eta: 7:49:55  iter: 23439  total_loss: 1.884  loss_sem_seg: 1.057  loss_relation: 0.0816  loss_center: 0.4951  loss_offset: 0.2847  time: 1.0632  data_time: 0.0585  lr: 0.00028295  max_mem: 19293M
[10/10 06:37:43] d2.utils.events INFO:  eta: 7:49:33  iter: 23459  total_loss: 1.918  loss_sem_seg: 0.9498  loss_relation: 0.08949  loss_center: 0.5006  loss_offset: 0.304  time: 1.0632  data_time: 0.0611  lr: 0.00028276  max_mem: 19293M
[10/10 06:38:04] d2.utils.events INFO:  eta: 7:49:12  iter: 23479  total_loss: 2.154  loss_sem_seg: 1.103  loss_relation: 0.1018  loss_center: 0.5482  loss_offset: 0.305  time: 1.0632  data_time: 0.0624  lr: 0.00028257  max_mem: 19293M
[10/10 06:38:25] d2.utils.events INFO:  eta: 7:48:51  iter: 23499  total_loss: 2.098  loss_sem_seg: 1.131  loss_relation: 0.1019  loss_center: 0.5653  loss_offset: 0.3014  time: 1.0632  data_time: 0.0553  lr: 0.00028238  max_mem: 19293M
[10/10 06:38:47] d2.utils.events INFO:  eta: 7:48:27  iter: 23519  total_loss: 1.968  loss_sem_seg: 1.033  loss_relation: 0.09312  loss_center: 0.5161  loss_offset: 0.3105  time: 1.0632  data_time: 0.0605  lr: 0.00028219  max_mem: 19293M
[10/10 06:39:08] d2.utils.events INFO:  eta: 7:48:08  iter: 23539  total_loss: 1.945  loss_sem_seg: 1.012  loss_relation: 0.0948  loss_center: 0.5098  loss_offset: 0.2945  time: 1.0632  data_time: 0.0628  lr: 0.000282  max_mem: 19293M
[10/10 06:39:29] d2.utils.events INFO:  eta: 7:47:47  iter: 23559  total_loss: 1.935  loss_sem_seg: 1.006  loss_relation: 0.09697  loss_center: 0.5336  loss_offset: 0.2822  time: 1.0632  data_time: 0.0595  lr: 0.0002818  max_mem: 19293M
[10/10 06:39:50] d2.utils.events INFO:  eta: 7:47:24  iter: 23579  total_loss: 1.965  loss_sem_seg: 1.022  loss_relation: 0.09581  loss_center: 0.5084  loss_offset: 0.3189  time: 1.0632  data_time: 0.0600  lr: 0.00028161  max_mem: 19293M
[10/10 06:40:12] d2.utils.events INFO:  eta: 7:47:03  iter: 23599  total_loss: 1.936  loss_sem_seg: 1.076  loss_relation: 0.1008  loss_center: 0.5344  loss_offset: 0.3044  time: 1.0632  data_time: 0.0615  lr: 0.00028142  max_mem: 19293M
[10/10 06:40:33] d2.utils.events INFO:  eta: 7:46:43  iter: 23619  total_loss: 2.016  loss_sem_seg: 1.081  loss_relation: 0.1004  loss_center: 0.5353  loss_offset: 0.3062  time: 1.0632  data_time: 0.0573  lr: 0.00028123  max_mem: 19293M
[10/10 06:40:54] d2.utils.events INFO:  eta: 7:46:21  iter: 23639  total_loss: 1.967  loss_sem_seg: 1.064  loss_relation: 0.09035  loss_center: 0.4834  loss_offset: 0.2895  time: 1.0632  data_time: 0.0575  lr: 0.00028104  max_mem: 19293M
[10/10 06:41:15] d2.utils.events INFO:  eta: 7:46:02  iter: 23659  total_loss: 1.94  loss_sem_seg: 1.022  loss_relation: 0.08698  loss_center: 0.5441  loss_offset: 0.308  time: 1.0632  data_time: 0.0657  lr: 0.00028084  max_mem: 19293M
[10/10 06:41:37] d2.utils.events INFO:  eta: 7:45:40  iter: 23679  total_loss: 1.921  loss_sem_seg: 1.033  loss_relation: 0.08485  loss_center: 0.4868  loss_offset: 0.3032  time: 1.0632  data_time: 0.0616  lr: 0.00028065  max_mem: 19293M
[10/10 06:41:58] d2.utils.events INFO:  eta: 7:45:21  iter: 23699  total_loss: 1.948  loss_sem_seg: 1.045  loss_relation: 0.0895  loss_center: 0.5172  loss_offset: 0.2854  time: 1.0632  data_time: 0.0648  lr: 0.00028046  max_mem: 19293M
[10/10 06:42:19] d2.utils.events INFO:  eta: 7:45:00  iter: 23719  total_loss: 1.914  loss_sem_seg: 1.004  loss_relation: 0.09208  loss_center: 0.4952  loss_offset: 0.3006  time: 1.0632  data_time: 0.0583  lr: 0.00028027  max_mem: 19293M
[10/10 06:42:40] d2.utils.events INFO:  eta: 7:44:44  iter: 23739  total_loss: 1.981  loss_sem_seg: 1.013  loss_relation: 0.08095  loss_center: 0.5166  loss_offset: 0.3319  time: 1.0632  data_time: 0.0669  lr: 0.00028008  max_mem: 19293M
[10/10 06:43:02] d2.utils.events INFO:  eta: 7:44:18  iter: 23759  total_loss: 1.966  loss_sem_seg: 1.055  loss_relation: 0.09004  loss_center: 0.5154  loss_offset: 0.3105  time: 1.0632  data_time: 0.0586  lr: 0.00027988  max_mem: 19293M
[10/10 06:43:23] d2.utils.events INFO:  eta: 7:43:52  iter: 23779  total_loss: 2.048  loss_sem_seg: 1.055  loss_relation: 0.09502  loss_center: 0.5279  loss_offset: 0.2945  time: 1.0632  data_time: 0.0584  lr: 0.00027969  max_mem: 19293M
[10/10 06:43:44] d2.utils.events INFO:  eta: 7:43:31  iter: 23799  total_loss: 1.971  loss_sem_seg: 1.035  loss_relation: 0.09347  loss_center: 0.4908  loss_offset: 0.3079  time: 1.0632  data_time: 0.0644  lr: 0.0002795  max_mem: 19293M
[10/10 06:44:05] d2.utils.events INFO:  eta: 7:43:11  iter: 23819  total_loss: 2.057  loss_sem_seg: 1.092  loss_relation: 0.09967  loss_center: 0.5412  loss_offset: 0.3264  time: 1.0632  data_time: 0.0631  lr: 0.00027931  max_mem: 19293M
[10/10 06:44:27] d2.utils.events INFO:  eta: 7:42:50  iter: 23839  total_loss: 2.113  loss_sem_seg: 1.143  loss_relation: 0.09748  loss_center: 0.5076  loss_offset: 0.3311  time: 1.0632  data_time: 0.0588  lr: 0.00027912  max_mem: 19293M
[10/10 06:44:48] d2.utils.events INFO:  eta: 7:42:26  iter: 23859  total_loss: 2.126  loss_sem_seg: 1.109  loss_relation: 0.1043  loss_center: 0.4963  loss_offset: 0.3458  time: 1.0632  data_time: 0.0595  lr: 0.00027892  max_mem: 19293M
[10/10 06:45:09] d2.utils.events INFO:  eta: 7:42:08  iter: 23879  total_loss: 2.001  loss_sem_seg: 1.077  loss_relation: 0.09872  loss_center: 0.5139  loss_offset: 0.2859  time: 1.0632  data_time: 0.0605  lr: 0.00027873  max_mem: 19293M
[10/10 06:45:30] d2.utils.events INFO:  eta: 7:41:44  iter: 23899  total_loss: 1.873  loss_sem_seg: 0.9849  loss_relation: 0.09481  loss_center: 0.4902  loss_offset: 0.3003  time: 1.0632  data_time: 0.0571  lr: 0.00027854  max_mem: 19293M
[10/10 06:45:52] d2.utils.events INFO:  eta: 7:41:23  iter: 23919  total_loss: 1.946  loss_sem_seg: 1.081  loss_relation: 0.08735  loss_center: 0.4819  loss_offset: 0.2974  time: 1.0632  data_time: 0.0649  lr: 0.00027835  max_mem: 19293M
[10/10 06:46:13] d2.utils.events INFO:  eta: 7:41:05  iter: 23939  total_loss: 1.959  loss_sem_seg: 1.03  loss_relation: 0.08281  loss_center: 0.508  loss_offset: 0.2925  time: 1.0632  data_time: 0.0609  lr: 0.00027816  max_mem: 19293M
[10/10 06:46:34] d2.utils.events INFO:  eta: 7:40:48  iter: 23959  total_loss: 1.852  loss_sem_seg: 0.9802  loss_relation: 0.08474  loss_center: 0.4896  loss_offset: 0.2749  time: 1.0632  data_time: 0.0618  lr: 0.00027796  max_mem: 19293M
[10/10 06:46:56] d2.utils.events INFO:  eta: 7:40:27  iter: 23979  total_loss: 1.887  loss_sem_seg: 1.004  loss_relation: 0.08498  loss_center: 0.4594  loss_offset: 0.2949  time: 1.0632  data_time: 0.0637  lr: 0.00027777  max_mem: 19293M
[10/10 06:47:17] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0023999.pth
[10/10 06:47:18] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 06:47:18] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 06:47:18] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 06:47:18] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 06:47:33] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0015 s/iter. Inference: 0.0685 s/iter. Eval: 0.0282 s/iter. Total: 0.0982 s/iter. ETA=0:00:23
[10/10 06:47:38] d2.evaluation.evaluator INFO: Inference done 64/250. Dataloading: 0.0014 s/iter. Inference: 0.0653 s/iter. Eval: 0.0285 s/iter. Total: 0.0953 s/iter. ETA=0:00:17
[10/10 06:47:43] d2.evaluation.evaluator INFO: Inference done 120/250. Dataloading: 0.0014 s/iter. Inference: 0.0631 s/iter. Eval: 0.0282 s/iter. Total: 0.0927 s/iter. ETA=0:00:12
[10/10 06:47:48] d2.evaluation.evaluator INFO: Inference done 173/250. Dataloading: 0.0014 s/iter. Inference: 0.0637 s/iter. Eval: 0.0283 s/iter. Total: 0.0934 s/iter. ETA=0:00:07
[10/10 06:47:53] d2.evaluation.evaluator INFO: Inference done 231/250. Dataloading: 0.0014 s/iter. Inference: 0.0625 s/iter. Eval: 0.0278 s/iter. Total: 0.0917 s/iter. ETA=0:00:01
[10/10 06:47:55] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.773150 (0.092952 s / iter per device, on 2 devices)
[10/10 06:47:55] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062376 s / iter per device, on 2 devices)
[10/10 06:47:55] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalyz6o_68s ...
[10/10 06:48:00] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 14.562449459488708
[10/10 06:48:00] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 12.509 | 44.783 | 16.717 |      129      |
| Things | 10.566 | 44.310 | 14.586 |      76       |
| Stuff  | 15.296 | 45.460 | 19.772 |      53       |
[10/10 06:48:00] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 06:48:00] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 06:48:00] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 06:48:00] d2.evaluation.testing INFO: copypaste: 12.5093,44.7826,16.7165,10.5660,44.3102,14.5855,15.2960,45.4599,19.7723
[10/10 06:48:00] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 06:48:00] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 06:48:00] d2.evaluation.testing INFO: copypaste: 0.1456
[10/10 06:48:00] d2.utils.events INFO:  eta: 7:40:03  iter: 23999  total_loss: 1.898  loss_sem_seg: 1.073  loss_relation: 0.08113  loss_center: 0.5011  loss_offset: 0.3018  time: 1.0632  data_time: 0.0570  lr: 0.00027758  max_mem: 19293M
[10/10 06:48:00] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.14562, not better than best score 0.16205 @ iteration 11999.
[10/10 06:48:21] d2.utils.events INFO:  eta: 7:39:44  iter: 24019  total_loss: 1.872  loss_sem_seg: 0.9985  loss_relation: 0.09148  loss_center: 0.5158  loss_offset: 0.286  time: 1.0632  data_time: 0.0570  lr: 0.00027739  max_mem: 19293M
[10/10 06:48:42] d2.utils.events INFO:  eta: 7:39:21  iter: 24039  total_loss: 1.845  loss_sem_seg: 0.9645  loss_relation: 0.08747  loss_center: 0.5154  loss_offset: 0.3044  time: 1.0632  data_time: 0.0590  lr: 0.0002772  max_mem: 19293M
[10/10 06:49:04] d2.utils.events INFO:  eta: 7:39:01  iter: 24059  total_loss: 1.99  loss_sem_seg: 1.01  loss_relation: 0.08747  loss_center: 0.4955  loss_offset: 0.2841  time: 1.0632  data_time: 0.0598  lr: 0.000277  max_mem: 19293M
[10/10 06:49:25] d2.utils.events INFO:  eta: 7:38:40  iter: 24079  total_loss: 1.934  loss_sem_seg: 0.9959  loss_relation: 0.08592  loss_center: 0.5054  loss_offset: 0.2893  time: 1.0632  data_time: 0.0592  lr: 0.00027681  max_mem: 19293M
[10/10 06:49:46] d2.utils.events INFO:  eta: 7:38:19  iter: 24099  total_loss: 1.917  loss_sem_seg: 0.9927  loss_relation: 0.09811  loss_center: 0.4908  loss_offset: 0.2699  time: 1.0632  data_time: 0.0633  lr: 0.00027662  max_mem: 19293M
[10/10 06:50:07] d2.utils.events INFO:  eta: 7:37:53  iter: 24119  total_loss: 1.943  loss_sem_seg: 0.9947  loss_relation: 0.08474  loss_center: 0.4991  loss_offset: 0.2952  time: 1.0632  data_time: 0.0639  lr: 0.00027643  max_mem: 19293M
[10/10 06:50:29] d2.utils.events INFO:  eta: 7:37:30  iter: 24139  total_loss: 1.838  loss_sem_seg: 0.9651  loss_relation: 0.09134  loss_center: 0.5185  loss_offset: 0.2847  time: 1.0632  data_time: 0.0582  lr: 0.00027623  max_mem: 19293M
[10/10 06:50:50] d2.utils.events INFO:  eta: 7:37:05  iter: 24159  total_loss: 1.828  loss_sem_seg: 0.9642  loss_relation: 0.08083  loss_center: 0.4841  loss_offset: 0.2996  time: 1.0632  data_time: 0.0540  lr: 0.00027604  max_mem: 19293M
[10/10 06:51:11] d2.utils.events INFO:  eta: 7:36:45  iter: 24179  total_loss: 1.929  loss_sem_seg: 1.018  loss_relation: 0.09391  loss_center: 0.537  loss_offset: 0.2808  time: 1.0632  data_time: 0.0598  lr: 0.00027585  max_mem: 19293M
[10/10 06:51:32] d2.utils.events INFO:  eta: 7:36:23  iter: 24199  total_loss: 1.773  loss_sem_seg: 0.9132  loss_relation: 0.08095  loss_center: 0.4809  loss_offset: 0.3004  time: 1.0632  data_time: 0.0582  lr: 0.00027566  max_mem: 19293M
[10/10 06:51:54] d2.utils.events INFO:  eta: 7:35:58  iter: 24219  total_loss: 1.795  loss_sem_seg: 0.8824  loss_relation: 0.07476  loss_center: 0.4422  loss_offset: 0.2964  time: 1.0632  data_time: 0.0585  lr: 0.00027547  max_mem: 19293M
[10/10 06:52:15] d2.utils.events INFO:  eta: 7:35:33  iter: 24239  total_loss: 1.911  loss_sem_seg: 1.002  loss_relation: 0.08157  loss_center: 0.5255  loss_offset: 0.2902  time: 1.0632  data_time: 0.0616  lr: 0.00027527  max_mem: 19293M
[10/10 06:52:36] d2.utils.events INFO:  eta: 7:34:58  iter: 24259  total_loss: 1.802  loss_sem_seg: 0.9285  loss_relation: 0.08129  loss_center: 0.4964  loss_offset: 0.2891  time: 1.0632  data_time: 0.0603  lr: 0.00027508  max_mem: 19293M
[10/10 06:52:57] d2.utils.events INFO:  eta: 7:34:35  iter: 24279  total_loss: 1.816  loss_sem_seg: 0.9737  loss_relation: 0.07685  loss_center: 0.5163  loss_offset: 0.2996  time: 1.0632  data_time: 0.0607  lr: 0.00027489  max_mem: 19293M
[10/10 06:53:18] d2.utils.events INFO:  eta: 7:34:11  iter: 24299  total_loss: 1.849  loss_sem_seg: 0.9345  loss_relation: 0.08484  loss_center: 0.5022  loss_offset: 0.2814  time: 1.0632  data_time: 0.0572  lr: 0.0002747  max_mem: 19293M
[10/10 06:53:40] d2.utils.events INFO:  eta: 7:33:47  iter: 24319  total_loss: 1.79  loss_sem_seg: 0.9716  loss_relation: 0.07333  loss_center: 0.4854  loss_offset: 0.2922  time: 1.0632  data_time: 0.0582  lr: 0.0002745  max_mem: 19293M
[10/10 06:54:01] d2.utils.events INFO:  eta: 7:33:28  iter: 24339  total_loss: 1.892  loss_sem_seg: 0.9884  loss_relation: 0.0816  loss_center: 0.5211  loss_offset: 0.2997  time: 1.0632  data_time: 0.0650  lr: 0.00027431  max_mem: 19293M
[10/10 06:54:22] d2.utils.events INFO:  eta: 7:33:06  iter: 24359  total_loss: 1.782  loss_sem_seg: 0.9748  loss_relation: 0.08723  loss_center: 0.4794  loss_offset: 0.2795  time: 1.0632  data_time: 0.0646  lr: 0.00027412  max_mem: 19293M
[10/10 06:54:44] d2.utils.events INFO:  eta: 7:32:46  iter: 24379  total_loss: 1.893  loss_sem_seg: 0.9966  loss_relation: 0.08581  loss_center: 0.5312  loss_offset: 0.2738  time: 1.0632  data_time: 0.0614  lr: 0.00027393  max_mem: 19293M
[10/10 06:55:05] d2.utils.events INFO:  eta: 7:32:28  iter: 24399  total_loss: 2.036  loss_sem_seg: 1.041  loss_relation: 0.08597  loss_center: 0.5551  loss_offset: 0.292  time: 1.0632  data_time: 0.0615  lr: 0.00027373  max_mem: 19293M
[10/10 06:55:26] d2.utils.events INFO:  eta: 7:32:08  iter: 24419  total_loss: 1.882  loss_sem_seg: 0.955  loss_relation: 0.09578  loss_center: 0.5355  loss_offset: 0.2702  time: 1.0632  data_time: 0.0605  lr: 0.00027354  max_mem: 19293M
[10/10 06:55:47] d2.utils.events INFO:  eta: 7:31:47  iter: 24439  total_loss: 1.95  loss_sem_seg: 1.014  loss_relation: 0.08183  loss_center: 0.5228  loss_offset: 0.3093  time: 1.0632  data_time: 0.0617  lr: 0.00027335  max_mem: 19293M
[10/10 06:56:09] d2.utils.events INFO:  eta: 7:31:34  iter: 24459  total_loss: 1.792  loss_sem_seg: 0.9734  loss_relation: 0.08108  loss_center: 0.4489  loss_offset: 0.2842  time: 1.0632  data_time: 0.0677  lr: 0.00027316  max_mem: 19293M
[10/10 06:56:30] d2.utils.events INFO:  eta: 7:31:12  iter: 24479  total_loss: 1.738  loss_sem_seg: 0.8753  loss_relation: 0.07824  loss_center: 0.4647  loss_offset: 0.2833  time: 1.0632  data_time: 0.0689  lr: 0.00027296  max_mem: 19293M
[10/10 06:56:51] d2.utils.events INFO:  eta: 7:31:03  iter: 24499  total_loss: 1.754  loss_sem_seg: 0.9044  loss_relation: 0.07593  loss_center: 0.5426  loss_offset: 0.2839  time: 1.0632  data_time: 0.0652  lr: 0.00027277  max_mem: 19293M
[10/10 06:57:13] d2.utils.events INFO:  eta: 7:30:41  iter: 24519  total_loss: 1.818  loss_sem_seg: 0.9509  loss_relation: 0.07471  loss_center: 0.4738  loss_offset: 0.2793  time: 1.0632  data_time: 0.0589  lr: 0.00027258  max_mem: 19293M
[10/10 06:57:34] d2.utils.events INFO:  eta: 7:30:10  iter: 24539  total_loss: 1.854  loss_sem_seg: 0.9556  loss_relation: 0.08191  loss_center: 0.5244  loss_offset: 0.3004  time: 1.0632  data_time: 0.0617  lr: 0.00027239  max_mem: 19293M
[10/10 06:57:55] d2.utils.events INFO:  eta: 7:29:48  iter: 24559  total_loss: 1.841  loss_sem_seg: 0.9541  loss_relation: 0.08093  loss_center: 0.5083  loss_offset: 0.2923  time: 1.0632  data_time: 0.0635  lr: 0.00027219  max_mem: 19293M
[10/10 06:58:16] d2.utils.events INFO:  eta: 7:29:27  iter: 24579  total_loss: 1.85  loss_sem_seg: 0.9526  loss_relation: 0.07988  loss_center: 0.5181  loss_offset: 0.3033  time: 1.0632  data_time: 0.0597  lr: 0.000272  max_mem: 19293M
[10/10 06:58:38] d2.utils.events INFO:  eta: 7:29:00  iter: 24599  total_loss: 1.997  loss_sem_seg: 1.045  loss_relation: 0.09008  loss_center: 0.5349  loss_offset: 0.2968  time: 1.0632  data_time: 0.0590  lr: 0.00027181  max_mem: 19293M
[10/10 06:58:59] d2.utils.events INFO:  eta: 7:28:36  iter: 24619  total_loss: 1.777  loss_sem_seg: 0.9613  loss_relation: 0.07764  loss_center: 0.4964  loss_offset: 0.2851  time: 1.0632  data_time: 0.0584  lr: 0.00027162  max_mem: 19293M
[10/10 06:59:20] d2.utils.events INFO:  eta: 7:28:18  iter: 24639  total_loss: 1.897  loss_sem_seg: 0.9932  loss_relation: 0.08377  loss_center: 0.4976  loss_offset: 0.2814  time: 1.0632  data_time: 0.0579  lr: 0.00027142  max_mem: 19293M
[10/10 06:59:41] d2.utils.events INFO:  eta: 7:27:59  iter: 24659  total_loss: 1.848  loss_sem_seg: 0.9384  loss_relation: 0.08613  loss_center: 0.4528  loss_offset: 0.3118  time: 1.0632  data_time: 0.0637  lr: 0.00027123  max_mem: 19293M
[10/10 07:00:02] d2.utils.events INFO:  eta: 7:27:32  iter: 24679  total_loss: 1.863  loss_sem_seg: 1.024  loss_relation: 0.0852  loss_center: 0.4777  loss_offset: 0.2896  time: 1.0632  data_time: 0.0606  lr: 0.00027104  max_mem: 19293M
[10/10 07:00:24] d2.utils.events INFO:  eta: 7:27:11  iter: 24699  total_loss: 1.853  loss_sem_seg: 0.9934  loss_relation: 0.08975  loss_center: 0.4808  loss_offset: 0.2856  time: 1.0632  data_time: 0.0597  lr: 0.00027085  max_mem: 19293M
[10/10 07:00:45] d2.utils.events INFO:  eta: 7:26:49  iter: 24719  total_loss: 1.922  loss_sem_seg: 0.9506  loss_relation: 0.08713  loss_center: 0.5301  loss_offset: 0.3049  time: 1.0632  data_time: 0.0531  lr: 0.00027065  max_mem: 19293M
[10/10 07:01:06] d2.utils.events INFO:  eta: 7:26:27  iter: 24739  total_loss: 1.885  loss_sem_seg: 0.9824  loss_relation: 0.08848  loss_center: 0.4984  loss_offset: 0.3116  time: 1.0632  data_time: 0.0599  lr: 0.00027046  max_mem: 19293M
[10/10 07:01:27] d2.utils.events INFO:  eta: 7:26:06  iter: 24759  total_loss: 1.853  loss_sem_seg: 0.9612  loss_relation: 0.07832  loss_center: 0.4946  loss_offset: 0.2908  time: 1.0632  data_time: 0.0588  lr: 0.00027027  max_mem: 19293M
[10/10 07:01:49] d2.utils.events INFO:  eta: 7:25:45  iter: 24779  total_loss: 1.797  loss_sem_seg: 0.9366  loss_relation: 0.06785  loss_center: 0.4666  loss_offset: 0.288  time: 1.0632  data_time: 0.0564  lr: 0.00027007  max_mem: 19293M
[10/10 07:02:10] d2.utils.events INFO:  eta: 7:25:21  iter: 24799  total_loss: 1.79  loss_sem_seg: 0.9361  loss_relation: 0.07625  loss_center: 0.4664  loss_offset: 0.2883  time: 1.0632  data_time: 0.0553  lr: 0.00026988  max_mem: 19293M
[10/10 07:02:31] d2.utils.events INFO:  eta: 7:24:59  iter: 24819  total_loss: 1.792  loss_sem_seg: 0.9267  loss_relation: 0.0779  loss_center: 0.5136  loss_offset: 0.2864  time: 1.0632  data_time: 0.0559  lr: 0.00026969  max_mem: 19293M
[10/10 07:02:52] d2.utils.events INFO:  eta: 7:24:33  iter: 24839  total_loss: 1.83  loss_sem_seg: 0.9546  loss_relation: 0.08263  loss_center: 0.5063  loss_offset: 0.2826  time: 1.0632  data_time: 0.0581  lr: 0.0002695  max_mem: 19293M
[10/10 07:03:13] d2.utils.events INFO:  eta: 7:24:16  iter: 24859  total_loss: 1.792  loss_sem_seg: 0.9248  loss_relation: 0.07724  loss_center: 0.4842  loss_offset: 0.2835  time: 1.0632  data_time: 0.0621  lr: 0.0002693  max_mem: 19293M
[10/10 07:03:35] d2.utils.events INFO:  eta: 7:23:53  iter: 24879  total_loss: 1.839  loss_sem_seg: 0.9576  loss_relation: 0.08352  loss_center: 0.4912  loss_offset: 0.2876  time: 1.0632  data_time: 0.0623  lr: 0.00026911  max_mem: 19293M
[10/10 07:03:56] d2.utils.events INFO:  eta: 7:23:34  iter: 24899  total_loss: 1.778  loss_sem_seg: 0.9364  loss_relation: 0.07475  loss_center: 0.4841  loss_offset: 0.2953  time: 1.0632  data_time: 0.0622  lr: 0.00026892  max_mem: 19293M
[10/10 07:04:17] d2.utils.events INFO:  eta: 7:23:12  iter: 24919  total_loss: 1.769  loss_sem_seg: 0.9784  loss_relation: 0.08059  loss_center: 0.4894  loss_offset: 0.2896  time: 1.0631  data_time: 0.0597  lr: 0.00026872  max_mem: 19293M
[10/10 07:04:38] d2.utils.events INFO:  eta: 7:22:45  iter: 24939  total_loss: 1.774  loss_sem_seg: 0.9281  loss_relation: 0.06803  loss_center: 0.4916  loss_offset: 0.2932  time: 1.0631  data_time: 0.0607  lr: 0.00026853  max_mem: 19293M
[10/10 07:05:00] d2.utils.events INFO:  eta: 7:22:22  iter: 24959  total_loss: 1.808  loss_sem_seg: 0.9351  loss_relation: 0.08425  loss_center: 0.5032  loss_offset: 0.2948  time: 1.0631  data_time: 0.0622  lr: 0.00026834  max_mem: 19293M
[10/10 07:05:21] d2.utils.events INFO:  eta: 7:22:01  iter: 24979  total_loss: 1.871  loss_sem_seg: 0.9921  loss_relation: 0.08491  loss_center: 0.5253  loss_offset: 0.3103  time: 1.0632  data_time: 0.0656  lr: 0.00026815  max_mem: 19293M
[10/10 07:05:42] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0024999.pth
[10/10 07:05:44] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 07:05:44] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 07:05:44] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 07:05:44] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 07:05:58] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0001 s/iter. Inference: 0.0698 s/iter. Eval: 0.0278 s/iter. Total: 0.0977 s/iter. ETA=0:00:23
[10/10 07:06:03] d2.evaluation.evaluator INFO: Inference done 64/250. Dataloading: 0.0013 s/iter. Inference: 0.0655 s/iter. Eval: 0.0284 s/iter. Total: 0.0953 s/iter. ETA=0:00:17
[10/10 07:06:08] d2.evaluation.evaluator INFO: Inference done 121/250. Dataloading: 0.0013 s/iter. Inference: 0.0630 s/iter. Eval: 0.0279 s/iter. Total: 0.0924 s/iter. ETA=0:00:11
[10/10 07:06:13] d2.evaluation.evaluator INFO: Inference done 175/250. Dataloading: 0.0014 s/iter. Inference: 0.0630 s/iter. Eval: 0.0281 s/iter. Total: 0.0926 s/iter. ETA=0:00:06
[10/10 07:06:18] d2.evaluation.evaluator INFO: Inference done 233/250. Dataloading: 0.0014 s/iter. Inference: 0.0620 s/iter. Eval: 0.0276 s/iter. Total: 0.0911 s/iter. ETA=0:00:01
[10/10 07:06:20] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.622129 (0.092335 s / iter per device, on 2 devices)
[10/10 07:06:20] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.061855 s / iter per device, on 2 devices)
[10/10 07:06:20] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_eval_8nrenb6 ...
[10/10 07:06:25] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 12.834086109778987
[10/10 07:06:25] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 12.443 | 44.449 | 16.700 |      129      |
| Things | 10.311 | 41.289 | 14.252 |      76       |
| Stuff  | 15.499 | 48.979 | 20.210 |      53       |
[10/10 07:06:25] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 07:06:25] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 07:06:25] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 07:06:25] d2.evaluation.testing INFO: copypaste: 12.4425,44.4486,16.6998,10.3114,41.2894,14.2521,15.4986,48.9789,20.2097
[10/10 07:06:25] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 07:06:25] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 07:06:25] d2.evaluation.testing INFO: copypaste: 0.1283
[10/10 07:06:25] d2.utils.events INFO:  eta: 7:21:42  iter: 24999  total_loss: 1.902  loss_sem_seg: 0.9194  loss_relation: 0.08708  loss_center: 0.5328  loss_offset: 0.2842  time: 1.0632  data_time: 0.0633  lr: 0.00026795  max_mem: 19293M
[10/10 07:06:25] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.12834, not better than best score 0.16205 @ iteration 11999.
[10/10 07:06:46] d2.utils.events INFO:  eta: 7:21:21  iter: 25019  total_loss: 1.752  loss_sem_seg: 0.9454  loss_relation: 0.0768  loss_center: 0.4746  loss_offset: 0.2751  time: 1.0631  data_time: 0.0608  lr: 0.00026776  max_mem: 19293M
[10/10 07:07:07] d2.utils.events INFO:  eta: 7:20:58  iter: 25039  total_loss: 1.764  loss_sem_seg: 0.9307  loss_relation: 0.07654  loss_center: 0.4876  loss_offset: 0.2875  time: 1.0631  data_time: 0.0604  lr: 0.00026757  max_mem: 19293M
[10/10 07:07:28] d2.utils.events INFO:  eta: 7:20:39  iter: 25059  total_loss: 1.794  loss_sem_seg: 0.9091  loss_relation: 0.06874  loss_center: 0.4722  loss_offset: 0.3005  time: 1.0631  data_time: 0.0623  lr: 0.00026737  max_mem: 19293M
[10/10 07:07:50] d2.utils.events INFO:  eta: 7:20:21  iter: 25079  total_loss: 1.804  loss_sem_seg: 0.9918  loss_relation: 0.06923  loss_center: 0.5195  loss_offset: 0.3018  time: 1.0632  data_time: 0.0632  lr: 0.00026718  max_mem: 19293M
[10/10 07:08:11] d2.utils.events INFO:  eta: 7:19:58  iter: 25099  total_loss: 1.705  loss_sem_seg: 0.8698  loss_relation: 0.0746  loss_center: 0.4916  loss_offset: 0.2798  time: 1.0631  data_time: 0.0615  lr: 0.00026699  max_mem: 19293M
[10/10 07:08:32] d2.utils.events INFO:  eta: 7:19:32  iter: 25119  total_loss: 1.779  loss_sem_seg: 0.919  loss_relation: 0.07429  loss_center: 0.4795  loss_offset: 0.2816  time: 1.0631  data_time: 0.0628  lr: 0.0002668  max_mem: 19293M
[10/10 07:08:53] d2.utils.events INFO:  eta: 7:19:10  iter: 25139  total_loss: 1.81  loss_sem_seg: 0.9567  loss_relation: 0.08459  loss_center: 0.5081  loss_offset: 0.2765  time: 1.0631  data_time: 0.0595  lr: 0.0002666  max_mem: 19293M
[10/10 07:09:15] d2.utils.events INFO:  eta: 7:18:50  iter: 25159  total_loss: 1.824  loss_sem_seg: 0.9397  loss_relation: 0.08315  loss_center: 0.4662  loss_offset: 0.2661  time: 1.0631  data_time: 0.0559  lr: 0.00026641  max_mem: 19293M
[10/10 07:09:36] d2.utils.events INFO:  eta: 7:18:30  iter: 25179  total_loss: 1.7  loss_sem_seg: 0.8815  loss_relation: 0.07284  loss_center: 0.4599  loss_offset: 0.2809  time: 1.0631  data_time: 0.0643  lr: 0.00026622  max_mem: 19293M
[10/10 07:09:57] d2.utils.events INFO:  eta: 7:18:09  iter: 25199  total_loss: 1.808  loss_sem_seg: 0.97  loss_relation: 0.08486  loss_center: 0.477  loss_offset: 0.2815  time: 1.0631  data_time: 0.0605  lr: 0.00026602  max_mem: 19293M
[10/10 07:10:18] d2.utils.events INFO:  eta: 7:17:50  iter: 25219  total_loss: 1.89  loss_sem_seg: 0.9332  loss_relation: 0.07462  loss_center: 0.5158  loss_offset: 0.2973  time: 1.0631  data_time: 0.0610  lr: 0.00026583  max_mem: 19293M
[10/10 07:10:40] d2.utils.events INFO:  eta: 7:17:29  iter: 25239  total_loss: 1.784  loss_sem_seg: 0.9513  loss_relation: 0.08411  loss_center: 0.4912  loss_offset: 0.2821  time: 1.0631  data_time: 0.0596  lr: 0.00026564  max_mem: 19293M
[10/10 07:11:01] d2.utils.events INFO:  eta: 7:17:08  iter: 25259  total_loss: 1.859  loss_sem_seg: 0.9319  loss_relation: 0.08173  loss_center: 0.4866  loss_offset: 0.2969  time: 1.0631  data_time: 0.0611  lr: 0.00026544  max_mem: 19293M
[10/10 07:11:22] d2.utils.events INFO:  eta: 7:16:48  iter: 25279  total_loss: 1.826  loss_sem_seg: 0.9336  loss_relation: 0.08212  loss_center: 0.5059  loss_offset: 0.2847  time: 1.0631  data_time: 0.0606  lr: 0.00026525  max_mem: 19293M
[10/10 07:11:44] d2.utils.events INFO:  eta: 7:16:29  iter: 25299  total_loss: 1.851  loss_sem_seg: 0.9551  loss_relation: 0.0811  loss_center: 0.4738  loss_offset: 0.2908  time: 1.0631  data_time: 0.0590  lr: 0.00026506  max_mem: 19293M
[10/10 07:12:05] d2.utils.events INFO:  eta: 7:16:05  iter: 25319  total_loss: 1.793  loss_sem_seg: 0.9474  loss_relation: 0.07653  loss_center: 0.4666  loss_offset: 0.2999  time: 1.0631  data_time: 0.0578  lr: 0.00026486  max_mem: 19293M
[10/10 07:12:26] d2.utils.events INFO:  eta: 7:15:42  iter: 25339  total_loss: 1.869  loss_sem_seg: 0.9652  loss_relation: 0.06836  loss_center: 0.5047  loss_offset: 0.2809  time: 1.0631  data_time: 0.0628  lr: 0.00026467  max_mem: 19293M
[10/10 07:12:47] d2.utils.events INFO:  eta: 7:15:25  iter: 25359  total_loss: 1.82  loss_sem_seg: 0.9255  loss_relation: 0.0774  loss_center: 0.4888  loss_offset: 0.2741  time: 1.0631  data_time: 0.0597  lr: 0.00026448  max_mem: 19293M
[10/10 07:13:08] d2.utils.events INFO:  eta: 7:14:57  iter: 25379  total_loss: 1.781  loss_sem_seg: 0.8962  loss_relation: 0.06787  loss_center: 0.4579  loss_offset: 0.3029  time: 1.0631  data_time: 0.0587  lr: 0.00026428  max_mem: 19293M
[10/10 07:13:29] d2.utils.events INFO:  eta: 7:14:28  iter: 25399  total_loss: 1.814  loss_sem_seg: 0.9504  loss_relation: 0.07471  loss_center: 0.5044  loss_offset: 0.2668  time: 1.0631  data_time: 0.0574  lr: 0.00026409  max_mem: 19293M
[10/10 07:13:51] d2.utils.events INFO:  eta: 7:14:02  iter: 25419  total_loss: 1.721  loss_sem_seg: 0.9109  loss_relation: 0.08147  loss_center: 0.4872  loss_offset: 0.2844  time: 1.0631  data_time: 0.0595  lr: 0.0002639  max_mem: 19293M
[10/10 07:14:12] d2.utils.events INFO:  eta: 7:13:44  iter: 25439  total_loss: 1.743  loss_sem_seg: 0.922  loss_relation: 0.07678  loss_center: 0.4601  loss_offset: 0.2946  time: 1.0631  data_time: 0.0614  lr: 0.00026371  max_mem: 19293M
[10/10 07:14:33] d2.utils.events INFO:  eta: 7:13:20  iter: 25459  total_loss: 1.803  loss_sem_seg: 0.929  loss_relation: 0.07534  loss_center: 0.505  loss_offset: 0.2633  time: 1.0631  data_time: 0.0590  lr: 0.00026351  max_mem: 19293M
[10/10 07:14:54] d2.utils.events INFO:  eta: 7:13:01  iter: 25479  total_loss: 1.92  loss_sem_seg: 0.9706  loss_relation: 0.08118  loss_center: 0.5087  loss_offset: 0.2817  time: 1.0631  data_time: 0.0600  lr: 0.00026332  max_mem: 19293M
[10/10 07:15:16] d2.utils.events INFO:  eta: 7:12:35  iter: 25499  total_loss: 1.774  loss_sem_seg: 0.8989  loss_relation: 0.0785  loss_center: 0.5068  loss_offset: 0.2774  time: 1.0631  data_time: 0.0615  lr: 0.00026313  max_mem: 19293M
[10/10 07:15:37] d2.utils.events INFO:  eta: 7:12:21  iter: 25519  total_loss: 1.779  loss_sem_seg: 0.9191  loss_relation: 0.07917  loss_center: 0.4858  loss_offset: 0.2963  time: 1.0631  data_time: 0.0624  lr: 0.00026293  max_mem: 19293M
[10/10 07:15:58] d2.utils.events INFO:  eta: 7:12:04  iter: 25539  total_loss: 1.867  loss_sem_seg: 1.005  loss_relation: 0.08644  loss_center: 0.4867  loss_offset: 0.3072  time: 1.0631  data_time: 0.0599  lr: 0.00026274  max_mem: 19293M
[10/10 07:16:20] d2.utils.events INFO:  eta: 7:11:40  iter: 25559  total_loss: 1.766  loss_sem_seg: 0.9197  loss_relation: 0.07868  loss_center: 0.465  loss_offset: 0.2722  time: 1.0631  data_time: 0.0589  lr: 0.00026255  max_mem: 19293M
[10/10 07:16:41] d2.utils.events INFO:  eta: 7:11:17  iter: 25579  total_loss: 1.911  loss_sem_seg: 1.002  loss_relation: 0.07453  loss_center: 0.5299  loss_offset: 0.2876  time: 1.0631  data_time: 0.0570  lr: 0.00026235  max_mem: 19293M
[10/10 07:17:02] d2.utils.events INFO:  eta: 7:11:00  iter: 25599  total_loss: 1.927  loss_sem_seg: 0.9464  loss_relation: 0.08349  loss_center: 0.5326  loss_offset: 0.308  time: 1.0631  data_time: 0.0603  lr: 0.00026216  max_mem: 19293M
[10/10 07:17:23] d2.utils.events INFO:  eta: 7:10:39  iter: 25619  total_loss: 1.803  loss_sem_seg: 0.926  loss_relation: 0.06588  loss_center: 0.4928  loss_offset: 0.2916  time: 1.0631  data_time: 0.0591  lr: 0.00026197  max_mem: 19293M
[10/10 07:17:44] d2.utils.events INFO:  eta: 7:10:14  iter: 25639  total_loss: 1.679  loss_sem_seg: 0.8626  loss_relation: 0.0755  loss_center: 0.4137  loss_offset: 0.2919  time: 1.0631  data_time: 0.0558  lr: 0.00026177  max_mem: 19293M
[10/10 07:18:06] d2.utils.events INFO:  eta: 7:09:50  iter: 25659  total_loss: 1.706  loss_sem_seg: 0.8652  loss_relation: 0.0714  loss_center: 0.4706  loss_offset: 0.2971  time: 1.0631  data_time: 0.0595  lr: 0.00026158  max_mem: 19293M
[10/10 07:18:27] d2.utils.events INFO:  eta: 7:09:23  iter: 25679  total_loss: 1.75  loss_sem_seg: 0.9222  loss_relation: 0.06916  loss_center: 0.438  loss_offset: 0.2728  time: 1.0631  data_time: 0.0601  lr: 0.00026138  max_mem: 19293M
[10/10 07:18:48] d2.utils.events INFO:  eta: 7:09:08  iter: 25699  total_loss: 1.674  loss_sem_seg: 0.897  loss_relation: 0.07419  loss_center: 0.4805  loss_offset: 0.2887  time: 1.0631  data_time: 0.0627  lr: 0.00026119  max_mem: 19293M
[10/10 07:19:09] d2.utils.events INFO:  eta: 7:08:42  iter: 25719  total_loss: 1.759  loss_sem_seg: 0.9005  loss_relation: 0.07603  loss_center: 0.4443  loss_offset: 0.2933  time: 1.0631  data_time: 0.0571  lr: 0.000261  max_mem: 19293M
[10/10 07:19:31] d2.utils.events INFO:  eta: 7:08:21  iter: 25739  total_loss: 1.788  loss_sem_seg: 0.9589  loss_relation: 0.06922  loss_center: 0.4631  loss_offset: 0.2925  time: 1.0631  data_time: 0.0628  lr: 0.0002608  max_mem: 19293M
[10/10 07:19:52] d2.utils.events INFO:  eta: 7:08:07  iter: 25759  total_loss: 1.73  loss_sem_seg: 0.9258  loss_relation: 0.07692  loss_center: 0.4593  loss_offset: 0.2639  time: 1.0631  data_time: 0.0655  lr: 0.00026061  max_mem: 19293M
[10/10 07:20:13] d2.utils.events INFO:  eta: 7:07:47  iter: 25779  total_loss: 1.864  loss_sem_seg: 0.9619  loss_relation: 0.07523  loss_center: 0.4892  loss_offset: 0.2829  time: 1.0631  data_time: 0.0644  lr: 0.00026042  max_mem: 19293M
[10/10 07:20:35] d2.utils.events INFO:  eta: 7:07:35  iter: 25799  total_loss: 1.818  loss_sem_seg: 0.9155  loss_relation: 0.07768  loss_center: 0.4728  loss_offset: 0.2748  time: 1.0631  data_time: 0.0622  lr: 0.00026022  max_mem: 19293M
[10/10 07:20:56] d2.utils.events INFO:  eta: 7:07:16  iter: 25819  total_loss: 1.844  loss_sem_seg: 0.979  loss_relation: 0.0761  loss_center: 0.5048  loss_offset: 0.2762  time: 1.0631  data_time: 0.0588  lr: 0.00026003  max_mem: 19293M
[10/10 07:21:17] d2.utils.events INFO:  eta: 7:06:57  iter: 25839  total_loss: 1.746  loss_sem_seg: 0.9312  loss_relation: 0.07557  loss_center: 0.4641  loss_offset: 0.3034  time: 1.0631  data_time: 0.0621  lr: 0.00025984  max_mem: 19293M
[10/10 07:21:39] d2.utils.events INFO:  eta: 7:06:36  iter: 25859  total_loss: 1.778  loss_sem_seg: 0.9049  loss_relation: 0.08553  loss_center: 0.4897  loss_offset: 0.2879  time: 1.0631  data_time: 0.0674  lr: 0.00025964  max_mem: 19293M
[10/10 07:22:00] d2.utils.events INFO:  eta: 7:06:11  iter: 25879  total_loss: 1.709  loss_sem_seg: 0.8717  loss_relation: 0.07372  loss_center: 0.4739  loss_offset: 0.2748  time: 1.0631  data_time: 0.0602  lr: 0.00025945  max_mem: 19293M
[10/10 07:22:21] d2.utils.events INFO:  eta: 7:05:50  iter: 25899  total_loss: 1.828  loss_sem_seg: 0.9448  loss_relation: 0.07146  loss_center: 0.537  loss_offset: 0.2771  time: 1.0631  data_time: 0.0586  lr: 0.00025926  max_mem: 19293M
[10/10 07:22:42] d2.utils.events INFO:  eta: 7:05:37  iter: 25919  total_loss: 1.758  loss_sem_seg: 0.9472  loss_relation: 0.07195  loss_center: 0.4743  loss_offset: 0.2777  time: 1.0631  data_time: 0.0615  lr: 0.00025906  max_mem: 19293M
[10/10 07:23:04] d2.utils.events INFO:  eta: 7:05:16  iter: 25939  total_loss: 1.742  loss_sem_seg: 0.8844  loss_relation: 0.06981  loss_center: 0.4605  loss_offset: 0.276  time: 1.0631  data_time: 0.0595  lr: 0.00025887  max_mem: 19293M
[10/10 07:23:25] d2.utils.events INFO:  eta: 7:04:50  iter: 25959  total_loss: 1.755  loss_sem_seg: 0.9334  loss_relation: 0.07176  loss_center: 0.472  loss_offset: 0.2751  time: 1.0631  data_time: 0.0615  lr: 0.00025867  max_mem: 19293M
[10/10 07:23:46] d2.utils.events INFO:  eta: 7:04:27  iter: 25979  total_loss: 1.849  loss_sem_seg: 0.9571  loss_relation: 0.08164  loss_center: 0.4935  loss_offset: 0.2901  time: 1.0631  data_time: 0.0623  lr: 0.00025848  max_mem: 19293M
[10/10 07:24:07] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0025999.pth
[10/10 07:24:09] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 07:24:09] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 07:24:09] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 07:24:09] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 07:24:23] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0018 s/iter. Inference: 0.0686 s/iter. Eval: 0.0281 s/iter. Total: 0.0986 s/iter. ETA=0:00:23
[10/10 07:24:28] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0013 s/iter. Inference: 0.0668 s/iter. Eval: 0.0291 s/iter. Total: 0.0973 s/iter. ETA=0:00:18
[10/10 07:24:33] d2.evaluation.evaluator INFO: Inference done 119/250. Dataloading: 0.0013 s/iter. Inference: 0.0639 s/iter. Eval: 0.0285 s/iter. Total: 0.0938 s/iter. ETA=0:00:12
[10/10 07:24:38] d2.evaluation.evaluator INFO: Inference done 174/250. Dataloading: 0.0014 s/iter. Inference: 0.0634 s/iter. Eval: 0.0285 s/iter. Total: 0.0933 s/iter. ETA=0:00:07
[10/10 07:24:44] d2.evaluation.evaluator INFO: Inference done 231/250. Dataloading: 0.0014 s/iter. Inference: 0.0625 s/iter. Eval: 0.0280 s/iter. Total: 0.0920 s/iter. ETA=0:00:01
[10/10 07:24:46] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.842388 (0.093234 s / iter per device, on 2 devices)
[10/10 07:24:46] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062312 s / iter per device, on 2 devices)
[10/10 07:24:46] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalobq5yht4 ...
[10/10 07:24:51] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 13.56500209093381
[10/10 07:24:51] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 12.469 | 46.506 | 16.660 |      129      |
| Things | 10.867 | 45.690 | 14.972 |      76       |
| Stuff  | 14.767 | 47.675 | 19.081 |      53       |
[10/10 07:24:51] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 07:24:51] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 07:24:51] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 07:24:51] d2.evaluation.testing INFO: copypaste: 12.4695,46.5059,16.6603,10.8671,45.6905,14.9718,14.7673,47.6751,19.0815
[10/10 07:24:51] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 07:24:51] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 07:24:51] d2.evaluation.testing INFO: copypaste: 0.1357
[10/10 07:24:51] d2.utils.events INFO:  eta: 7:04:09  iter: 25999  total_loss: 1.655  loss_sem_seg: 0.8249  loss_relation: 0.07464  loss_center: 0.4618  loss_offset: 0.2801  time: 1.0631  data_time: 0.0659  lr: 0.00025829  max_mem: 19293M
[10/10 07:24:51] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.13565, not better than best score 0.16205 @ iteration 11999.
[10/10 07:25:12] d2.utils.events INFO:  eta: 7:03:46  iter: 26019  total_loss: 1.761  loss_sem_seg: 0.9003  loss_relation: 0.06531  loss_center: 0.5035  loss_offset: 0.2678  time: 1.0631  data_time: 0.0610  lr: 0.00025809  max_mem: 19293M
[10/10 07:25:33] d2.utils.events INFO:  eta: 7:03:26  iter: 26039  total_loss: 1.72  loss_sem_seg: 0.9057  loss_relation: 0.06956  loss_center: 0.4393  loss_offset: 0.2726  time: 1.0631  data_time: 0.0589  lr: 0.0002579  max_mem: 19293M
[10/10 07:25:54] d2.utils.events INFO:  eta: 7:03:08  iter: 26059  total_loss: 1.681  loss_sem_seg: 0.8998  loss_relation: 0.07457  loss_center: 0.4415  loss_offset: 0.2719  time: 1.0631  data_time: 0.0598  lr: 0.00025771  max_mem: 19293M
[10/10 07:26:15] d2.utils.events INFO:  eta: 7:02:45  iter: 26079  total_loss: 1.755  loss_sem_seg: 0.899  loss_relation: 0.07362  loss_center: 0.5086  loss_offset: 0.2971  time: 1.0631  data_time: 0.0598  lr: 0.00025751  max_mem: 19293M
[10/10 07:26:37] d2.utils.events INFO:  eta: 7:02:31  iter: 26099  total_loss: 1.816  loss_sem_seg: 0.9725  loss_relation: 0.07746  loss_center: 0.5231  loss_offset: 0.2774  time: 1.0631  data_time: 0.0638  lr: 0.00025732  max_mem: 19293M
[10/10 07:26:58] d2.utils.events INFO:  eta: 7:02:09  iter: 26119  total_loss: 1.805  loss_sem_seg: 0.9372  loss_relation: 0.0783  loss_center: 0.5168  loss_offset: 0.2908  time: 1.0631  data_time: 0.0594  lr: 0.00025712  max_mem: 19293M
[10/10 07:27:19] d2.utils.events INFO:  eta: 7:01:49  iter: 26139  total_loss: 1.701  loss_sem_seg: 0.9175  loss_relation: 0.06804  loss_center: 0.461  loss_offset: 0.2891  time: 1.0631  data_time: 0.0609  lr: 0.00025693  max_mem: 19293M
[10/10 07:27:40] d2.utils.events INFO:  eta: 7:01:30  iter: 26159  total_loss: 1.701  loss_sem_seg: 0.8689  loss_relation: 0.06906  loss_center: 0.4561  loss_offset: 0.2722  time: 1.0631  data_time: 0.0582  lr: 0.00025674  max_mem: 19293M
[10/10 07:28:02] d2.utils.events INFO:  eta: 7:01:05  iter: 26179  total_loss: 1.814  loss_sem_seg: 0.9354  loss_relation: 0.07225  loss_center: 0.4979  loss_offset: 0.3068  time: 1.0631  data_time: 0.0631  lr: 0.00025654  max_mem: 19293M
[10/10 07:28:23] d2.utils.events INFO:  eta: 7:00:47  iter: 26199  total_loss: 1.693  loss_sem_seg: 0.8878  loss_relation: 0.06268  loss_center: 0.4578  loss_offset: 0.2994  time: 1.0631  data_time: 0.0640  lr: 0.00025635  max_mem: 19293M
[10/10 07:28:44] d2.utils.events INFO:  eta: 7:00:23  iter: 26219  total_loss: 1.801  loss_sem_seg: 0.9278  loss_relation: 0.06438  loss_center: 0.4696  loss_offset: 0.2657  time: 1.0631  data_time: 0.0582  lr: 0.00025616  max_mem: 19293M
[10/10 07:29:05] d2.utils.events INFO:  eta: 7:00:02  iter: 26239  total_loss: 1.76  loss_sem_seg: 0.9228  loss_relation: 0.07078  loss_center: 0.4596  loss_offset: 0.2873  time: 1.0631  data_time: 0.0612  lr: 0.00025596  max_mem: 19293M
[10/10 07:29:27] d2.utils.events INFO:  eta: 6:59:43  iter: 26259  total_loss: 1.735  loss_sem_seg: 0.873  loss_relation: 0.06467  loss_center: 0.4701  loss_offset: 0.2999  time: 1.0631  data_time: 0.0615  lr: 0.00025577  max_mem: 19293M
[10/10 07:29:48] d2.utils.events INFO:  eta: 6:59:23  iter: 26279  total_loss: 1.712  loss_sem_seg: 0.8821  loss_relation: 0.07098  loss_center: 0.4356  loss_offset: 0.2656  time: 1.0631  data_time: 0.0747  lr: 0.00025557  max_mem: 19293M
[10/10 07:30:09] d2.utils.events INFO:  eta: 6:59:02  iter: 26299  total_loss: 1.744  loss_sem_seg: 0.9072  loss_relation: 0.06826  loss_center: 0.4489  loss_offset: 0.2655  time: 1.0631  data_time: 0.0590  lr: 0.00025538  max_mem: 19293M
[10/10 07:30:31] d2.utils.events INFO:  eta: 6:58:47  iter: 26319  total_loss: 1.722  loss_sem_seg: 0.9217  loss_relation: 0.06781  loss_center: 0.4945  loss_offset: 0.2759  time: 1.0631  data_time: 0.0638  lr: 0.00025519  max_mem: 19293M
[10/10 07:30:52] d2.utils.events INFO:  eta: 6:58:24  iter: 26339  total_loss: 1.753  loss_sem_seg: 0.8852  loss_relation: 0.07059  loss_center: 0.5074  loss_offset: 0.2926  time: 1.0631  data_time: 0.0667  lr: 0.00025499  max_mem: 19293M
[10/10 07:31:13] d2.utils.events INFO:  eta: 6:58:03  iter: 26359  total_loss: 1.811  loss_sem_seg: 0.9347  loss_relation: 0.07195  loss_center: 0.5011  loss_offset: 0.301  time: 1.0631  data_time: 0.0602  lr: 0.0002548  max_mem: 19293M
[10/10 07:31:34] d2.utils.events INFO:  eta: 6:57:44  iter: 26379  total_loss: 1.839  loss_sem_seg: 0.9252  loss_relation: 0.07489  loss_center: 0.5098  loss_offset: 0.2793  time: 1.0631  data_time: 0.0566  lr: 0.0002546  max_mem: 19293M
[10/10 07:31:56] d2.utils.events INFO:  eta: 6:57:21  iter: 26399  total_loss: 1.674  loss_sem_seg: 0.9484  loss_relation: 0.07491  loss_center: 0.4464  loss_offset: 0.2662  time: 1.0631  data_time: 0.0641  lr: 0.00025441  max_mem: 19293M
[10/10 07:32:17] d2.utils.events INFO:  eta: 6:57:02  iter: 26419  total_loss: 1.767  loss_sem_seg: 0.875  loss_relation: 0.06799  loss_center: 0.467  loss_offset: 0.2744  time: 1.0631  data_time: 0.0607  lr: 0.00025422  max_mem: 19293M
[10/10 07:32:38] d2.utils.events INFO:  eta: 6:56:41  iter: 26439  total_loss: 1.909  loss_sem_seg: 0.9887  loss_relation: 0.07362  loss_center: 0.5097  loss_offset: 0.2924  time: 1.0631  data_time: 0.0584  lr: 0.00025402  max_mem: 19293M
[10/10 07:32:59] d2.utils.events INFO:  eta: 6:56:21  iter: 26459  total_loss: 1.726  loss_sem_seg: 0.8984  loss_relation: 0.07326  loss_center: 0.4671  loss_offset: 0.2899  time: 1.0631  data_time: 0.0627  lr: 0.00025383  max_mem: 19293M
[10/10 07:33:20] d2.utils.events INFO:  eta: 6:55:58  iter: 26479  total_loss: 1.695  loss_sem_seg: 0.8529  loss_relation: 0.07174  loss_center: 0.4659  loss_offset: 0.276  time: 1.0631  data_time: 0.0604  lr: 0.00025363  max_mem: 19293M
[10/10 07:33:42] d2.utils.events INFO:  eta: 6:55:37  iter: 26499  total_loss: 1.701  loss_sem_seg: 0.8719  loss_relation: 0.06481  loss_center: 0.4476  loss_offset: 0.3037  time: 1.0631  data_time: 0.0589  lr: 0.00025344  max_mem: 19293M
[10/10 07:34:03] d2.utils.events INFO:  eta: 6:55:10  iter: 26519  total_loss: 1.685  loss_sem_seg: 0.8952  loss_relation: 0.0643  loss_center: 0.4297  loss_offset: 0.2767  time: 1.0631  data_time: 0.0627  lr: 0.00025325  max_mem: 19293M
[10/10 07:34:24] d2.utils.events INFO:  eta: 6:54:48  iter: 26539  total_loss: 1.667  loss_sem_seg: 0.908  loss_relation: 0.06859  loss_center: 0.45  loss_offset: 0.2891  time: 1.0631  data_time: 0.0611  lr: 0.00025305  max_mem: 19293M
[10/10 07:34:45] d2.utils.events INFO:  eta: 6:54:29  iter: 26559  total_loss: 1.869  loss_sem_seg: 0.9648  loss_relation: 0.06758  loss_center: 0.5073  loss_offset: 0.2854  time: 1.0631  data_time: 0.0609  lr: 0.00025286  max_mem: 19293M
[10/10 07:35:07] d2.utils.events INFO:  eta: 6:54:07  iter: 26579  total_loss: 1.821  loss_sem_seg: 0.9426  loss_relation: 0.07367  loss_center: 0.493  loss_offset: 0.2834  time: 1.0631  data_time: 0.0586  lr: 0.00025266  max_mem: 19293M
[10/10 07:35:28] d2.utils.events INFO:  eta: 6:53:44  iter: 26599  total_loss: 1.775  loss_sem_seg: 0.9363  loss_relation: 0.06118  loss_center: 0.4514  loss_offset: 0.2777  time: 1.0631  data_time: 0.0597  lr: 0.00025247  max_mem: 19293M
[10/10 07:35:49] d2.utils.events INFO:  eta: 6:53:23  iter: 26619  total_loss: 1.741  loss_sem_seg: 0.9323  loss_relation: 0.07612  loss_center: 0.4339  loss_offset: 0.2915  time: 1.0631  data_time: 0.0653  lr: 0.00025227  max_mem: 19293M
[10/10 07:36:10] d2.utils.events INFO:  eta: 6:53:04  iter: 26639  total_loss: 1.761  loss_sem_seg: 0.9221  loss_relation: 0.07295  loss_center: 0.4635  loss_offset: 0.2949  time: 1.0631  data_time: 0.0691  lr: 0.00025208  max_mem: 19293M
[10/10 07:36:32] d2.utils.events INFO:  eta: 6:52:42  iter: 26659  total_loss: 1.672  loss_sem_seg: 0.8525  loss_relation: 0.06795  loss_center: 0.4724  loss_offset: 0.268  time: 1.0631  data_time: 0.0583  lr: 0.00025189  max_mem: 19293M
[10/10 07:36:53] d2.utils.events INFO:  eta: 6:52:21  iter: 26679  total_loss: 1.789  loss_sem_seg: 0.9747  loss_relation: 0.07285  loss_center: 0.4953  loss_offset: 0.285  time: 1.0631  data_time: 0.0570  lr: 0.00025169  max_mem: 19293M
[10/10 07:37:14] d2.utils.events INFO:  eta: 6:51:59  iter: 26699  total_loss: 1.771  loss_sem_seg: 0.9072  loss_relation: 0.07284  loss_center: 0.4791  loss_offset: 0.2867  time: 1.0631  data_time: 0.0588  lr: 0.0002515  max_mem: 19293M
[10/10 07:37:35] d2.utils.events INFO:  eta: 6:51:39  iter: 26719  total_loss: 1.781  loss_sem_seg: 0.9436  loss_relation: 0.07351  loss_center: 0.4867  loss_offset: 0.2797  time: 1.0631  data_time: 0.0572  lr: 0.0002513  max_mem: 19293M
[10/10 07:37:56] d2.utils.events INFO:  eta: 6:51:18  iter: 26739  total_loss: 1.741  loss_sem_seg: 0.9386  loss_relation: 0.0734  loss_center: 0.4456  loss_offset: 0.267  time: 1.0631  data_time: 0.0645  lr: 0.00025111  max_mem: 19293M
[10/10 07:38:18] d2.utils.events INFO:  eta: 6:50:54  iter: 26759  total_loss: 1.77  loss_sem_seg: 0.9316  loss_relation: 0.06163  loss_center: 0.4571  loss_offset: 0.2691  time: 1.0631  data_time: 0.0612  lr: 0.00025091  max_mem: 19293M
[10/10 07:38:39] d2.utils.events INFO:  eta: 6:50:30  iter: 26779  total_loss: 1.852  loss_sem_seg: 0.9911  loss_relation: 0.07716  loss_center: 0.4935  loss_offset: 0.2702  time: 1.0631  data_time: 0.0578  lr: 0.00025072  max_mem: 19293M
[10/10 07:39:00] d2.utils.events INFO:  eta: 6:50:00  iter: 26799  total_loss: 1.726  loss_sem_seg: 0.9047  loss_relation: 0.05972  loss_center: 0.4331  loss_offset: 0.277  time: 1.0631  data_time: 0.0580  lr: 0.00025053  max_mem: 19293M
[10/10 07:39:21] d2.utils.events INFO:  eta: 6:49:38  iter: 26819  total_loss: 1.773  loss_sem_seg: 0.9279  loss_relation: 0.06427  loss_center: 0.4325  loss_offset: 0.2757  time: 1.0631  data_time: 0.0620  lr: 0.00025033  max_mem: 19293M
[10/10 07:39:43] d2.utils.events INFO:  eta: 6:49:17  iter: 26839  total_loss: 1.719  loss_sem_seg: 0.8657  loss_relation: 0.06397  loss_center: 0.491  loss_offset: 0.2882  time: 1.0631  data_time: 0.0616  lr: 0.00025014  max_mem: 19293M
[10/10 07:40:04] d2.utils.events INFO:  eta: 6:48:55  iter: 26859  total_loss: 1.745  loss_sem_seg: 0.8704  loss_relation: 0.06914  loss_center: 0.4856  loss_offset: 0.2903  time: 1.0631  data_time: 0.0667  lr: 0.00024994  max_mem: 19293M
[10/10 07:40:25] d2.utils.events INFO:  eta: 6:48:35  iter: 26879  total_loss: 1.767  loss_sem_seg: 0.8642  loss_relation: 0.06757  loss_center: 0.5229  loss_offset: 0.2829  time: 1.0631  data_time: 0.0637  lr: 0.00024975  max_mem: 19293M
[10/10 07:40:47] d2.utils.events INFO:  eta: 6:48:16  iter: 26899  total_loss: 1.781  loss_sem_seg: 0.8878  loss_relation: 0.07728  loss_center: 0.4655  loss_offset: 0.2909  time: 1.0631  data_time: 0.0637  lr: 0.00024955  max_mem: 19293M
[10/10 07:41:08] d2.utils.events INFO:  eta: 6:47:49  iter: 26919  total_loss: 1.757  loss_sem_seg: 0.9282  loss_relation: 0.06893  loss_center: 0.4891  loss_offset: 0.2754  time: 1.0631  data_time: 0.0617  lr: 0.00024936  max_mem: 19293M
[10/10 07:41:29] d2.utils.events INFO:  eta: 6:47:30  iter: 26939  total_loss: 1.942  loss_sem_seg: 0.9435  loss_relation: 0.07985  loss_center: 0.5543  loss_offset: 0.2856  time: 1.0631  data_time: 0.0598  lr: 0.00024917  max_mem: 19293M
[10/10 07:41:50] d2.utils.events INFO:  eta: 6:47:10  iter: 26959  total_loss: 1.793  loss_sem_seg: 0.9667  loss_relation: 0.07248  loss_center: 0.4923  loss_offset: 0.273  time: 1.0631  data_time: 0.0653  lr: 0.00024897  max_mem: 19293M
[10/10 07:42:12] d2.utils.events INFO:  eta: 6:46:56  iter: 26979  total_loss: 1.756  loss_sem_seg: 0.9119  loss_relation: 0.07335  loss_center: 0.4432  loss_offset: 0.2891  time: 1.0631  data_time: 0.0627  lr: 0.00024878  max_mem: 19293M
[10/10 07:42:33] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0026999.pth
[10/10 07:42:35] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 07:42:35] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 07:42:35] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 07:42:35] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 07:42:49] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0021 s/iter. Inference: 0.0668 s/iter. Eval: 0.0290 s/iter. Total: 0.0978 s/iter. ETA=0:00:23
[10/10 07:42:54] d2.evaluation.evaluator INFO: Inference done 64/250. Dataloading: 0.0013 s/iter. Inference: 0.0652 s/iter. Eval: 0.0289 s/iter. Total: 0.0955 s/iter. ETA=0:00:17
[10/10 07:42:59] d2.evaluation.evaluator INFO: Inference done 118/250. Dataloading: 0.0014 s/iter. Inference: 0.0642 s/iter. Eval: 0.0287 s/iter. Total: 0.0944 s/iter. ETA=0:00:12
[10/10 07:43:04] d2.evaluation.evaluator INFO: Inference done 173/250. Dataloading: 0.0014 s/iter. Inference: 0.0635 s/iter. Eval: 0.0286 s/iter. Total: 0.0935 s/iter. ETA=0:00:07
[10/10 07:43:09] d2.evaluation.evaluator INFO: Inference done 230/250. Dataloading: 0.0014 s/iter. Inference: 0.0628 s/iter. Eval: 0.0281 s/iter. Total: 0.0924 s/iter. ETA=0:00:01
[10/10 07:43:11] d2.evaluation.evaluator INFO: Total inference time: 0:00:23.009220 (0.093915 s / iter per device, on 2 devices)
[10/10 07:43:11] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062892 s / iter per device, on 2 devices)
[10/10 07:43:11] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalc7awej42 ...
[10/10 07:43:16] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 13.827389096278415
[10/10 07:43:16] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 12.404 | 45.943 | 16.652 |      129      |
| Things | 10.615 | 45.649 | 14.656 |      76       |
| Stuff  | 14.970 | 46.364 | 19.515 |      53       |
[10/10 07:43:16] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 07:43:16] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 07:43:16] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 07:43:16] d2.evaluation.testing INFO: copypaste: 12.4043,45.9429,16.6523,10.6152,45.6492,14.6558,14.9699,46.3641,19.5153
[10/10 07:43:16] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 07:43:16] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 07:43:16] d2.evaluation.testing INFO: copypaste: 0.1383
[10/10 07:43:16] d2.utils.events INFO:  eta: 6:46:33  iter: 26999  total_loss: 1.738  loss_sem_seg: 0.8815  loss_relation: 0.07708  loss_center: 0.481  loss_offset: 0.2719  time: 1.0631  data_time: 0.0648  lr: 0.00024858  max_mem: 19293M
[10/10 07:43:16] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.13827, not better than best score 0.16205 @ iteration 11999.
[10/10 07:43:37] d2.utils.events INFO:  eta: 6:46:14  iter: 27019  total_loss: 1.693  loss_sem_seg: 0.8729  loss_relation: 0.06507  loss_center: 0.455  loss_offset: 0.268  time: 1.0631  data_time: 0.0610  lr: 0.00024839  max_mem: 19293M
[10/10 07:43:58] d2.utils.events INFO:  eta: 6:45:50  iter: 27039  total_loss: 1.757  loss_sem_seg: 0.8943  loss_relation: 0.06612  loss_center: 0.4506  loss_offset: 0.3006  time: 1.0631  data_time: 0.0582  lr: 0.00024819  max_mem: 19293M
[10/10 07:44:20] d2.utils.events INFO:  eta: 6:45:33  iter: 27059  total_loss: 1.628  loss_sem_seg: 0.8221  loss_relation: 0.06277  loss_center: 0.4882  loss_offset: 0.2747  time: 1.0631  data_time: 0.0644  lr: 0.000248  max_mem: 19293M
[10/10 07:44:41] d2.utils.events INFO:  eta: 6:45:11  iter: 27079  total_loss: 1.732  loss_sem_seg: 0.8649  loss_relation: 0.06607  loss_center: 0.4764  loss_offset: 0.3143  time: 1.0631  data_time: 0.0570  lr: 0.0002478  max_mem: 19293M
[10/10 07:45:02] d2.utils.events INFO:  eta: 6:44:44  iter: 27099  total_loss: 1.725  loss_sem_seg: 0.8756  loss_relation: 0.06441  loss_center: 0.4187  loss_offset: 0.2903  time: 1.0631  data_time: 0.0577  lr: 0.00024761  max_mem: 19293M
[10/10 07:45:23] d2.utils.events INFO:  eta: 6:44:25  iter: 27119  total_loss: 1.722  loss_sem_seg: 0.9027  loss_relation: 0.06655  loss_center: 0.4738  loss_offset: 0.2743  time: 1.0631  data_time: 0.0579  lr: 0.00024741  max_mem: 19293M
[10/10 07:45:44] d2.utils.events INFO:  eta: 6:43:59  iter: 27139  total_loss: 1.718  loss_sem_seg: 0.9269  loss_relation: 0.07533  loss_center: 0.4495  loss_offset: 0.3119  time: 1.0631  data_time: 0.0569  lr: 0.00024722  max_mem: 19293M
[10/10 07:46:06] d2.utils.events INFO:  eta: 6:43:35  iter: 27159  total_loss: 1.757  loss_sem_seg: 0.9537  loss_relation: 0.06878  loss_center: 0.5002  loss_offset: 0.2829  time: 1.0631  data_time: 0.0640  lr: 0.00024702  max_mem: 19293M
[10/10 07:46:27] d2.utils.events INFO:  eta: 6:43:17  iter: 27179  total_loss: 1.771  loss_sem_seg: 0.9428  loss_relation: 0.06612  loss_center: 0.515  loss_offset: 0.2733  time: 1.0631  data_time: 0.0633  lr: 0.00024683  max_mem: 19293M
[10/10 07:46:48] d2.utils.events INFO:  eta: 6:42:50  iter: 27199  total_loss: 1.627  loss_sem_seg: 0.8515  loss_relation: 0.0681  loss_center: 0.461  loss_offset: 0.2514  time: 1.0631  data_time: 0.0624  lr: 0.00024664  max_mem: 19293M
[10/10 07:47:10] d2.utils.events INFO:  eta: 6:42:33  iter: 27219  total_loss: 1.748  loss_sem_seg: 0.9336  loss_relation: 0.07043  loss_center: 0.4914  loss_offset: 0.2781  time: 1.0631  data_time: 0.0646  lr: 0.00024644  max_mem: 19293M
[10/10 07:47:31] d2.utils.events INFO:  eta: 6:42:07  iter: 27239  total_loss: 1.707  loss_sem_seg: 0.9259  loss_relation: 0.07402  loss_center: 0.4895  loss_offset: 0.2672  time: 1.0631  data_time: 0.0546  lr: 0.00024625  max_mem: 19293M
[10/10 07:47:52] d2.utils.events INFO:  eta: 6:41:44  iter: 27259  total_loss: 1.711  loss_sem_seg: 0.9086  loss_relation: 0.07566  loss_center: 0.4457  loss_offset: 0.2795  time: 1.0631  data_time: 0.0619  lr: 0.00024605  max_mem: 19293M
[10/10 07:48:14] d2.utils.events INFO:  eta: 6:41:24  iter: 27279  total_loss: 1.707  loss_sem_seg: 0.9396  loss_relation: 0.06916  loss_center: 0.4784  loss_offset: 0.2938  time: 1.0631  data_time: 0.0610  lr: 0.00024586  max_mem: 19293M
[10/10 07:48:35] d2.utils.events INFO:  eta: 6:41:03  iter: 27299  total_loss: 1.769  loss_sem_seg: 0.8806  loss_relation: 0.06358  loss_center: 0.4944  loss_offset: 0.2971  time: 1.0631  data_time: 0.0650  lr: 0.00024566  max_mem: 19293M
[10/10 07:48:56] d2.utils.events INFO:  eta: 6:40:41  iter: 27319  total_loss: 1.688  loss_sem_seg: 0.8927  loss_relation: 0.06217  loss_center: 0.434  loss_offset: 0.2614  time: 1.0631  data_time: 0.0616  lr: 0.00024547  max_mem: 19293M
[10/10 07:49:17] d2.utils.events INFO:  eta: 6:40:17  iter: 27339  total_loss: 1.693  loss_sem_seg: 0.8712  loss_relation: 0.06659  loss_center: 0.4939  loss_offset: 0.2731  time: 1.0631  data_time: 0.0594  lr: 0.00024527  max_mem: 19293M
[10/10 07:49:39] d2.utils.events INFO:  eta: 6:39:54  iter: 27359  total_loss: 1.716  loss_sem_seg: 0.8915  loss_relation: 0.06044  loss_center: 0.4491  loss_offset: 0.2861  time: 1.0631  data_time: 0.0585  lr: 0.00024508  max_mem: 19293M
[10/10 07:50:00] d2.utils.events INFO:  eta: 6:39:37  iter: 27379  total_loss: 1.678  loss_sem_seg: 0.8828  loss_relation: 0.06107  loss_center: 0.4418  loss_offset: 0.2772  time: 1.0631  data_time: 0.0630  lr: 0.00024488  max_mem: 19293M
[10/10 07:50:21] d2.utils.events INFO:  eta: 6:39:19  iter: 27399  total_loss: 1.665  loss_sem_seg: 0.896  loss_relation: 0.06848  loss_center: 0.4493  loss_offset: 0.2749  time: 1.0631  data_time: 0.0595  lr: 0.00024469  max_mem: 19293M
[10/10 07:50:43] d2.utils.events INFO:  eta: 6:38:57  iter: 27419  total_loss: 1.75  loss_sem_seg: 0.91  loss_relation: 0.06908  loss_center: 0.5003  loss_offset: 0.2663  time: 1.0631  data_time: 0.0600  lr: 0.00024449  max_mem: 19293M
[10/10 07:51:04] d2.utils.events INFO:  eta: 6:38:38  iter: 27439  total_loss: 1.705  loss_sem_seg: 0.8612  loss_relation: 0.06313  loss_center: 0.4463  loss_offset: 0.2924  time: 1.0631  data_time: 0.0626  lr: 0.0002443  max_mem: 19293M
[10/10 07:51:25] d2.utils.events INFO:  eta: 6:38:17  iter: 27459  total_loss: 1.808  loss_sem_seg: 0.9533  loss_relation: 0.07029  loss_center: 0.4861  loss_offset: 0.2994  time: 1.0631  data_time: 0.0640  lr: 0.0002441  max_mem: 19293M
[10/10 07:51:46] d2.utils.events INFO:  eta: 6:37:55  iter: 27479  total_loss: 1.701  loss_sem_seg: 0.9187  loss_relation: 0.07048  loss_center: 0.4507  loss_offset: 0.2593  time: 1.0631  data_time: 0.0581  lr: 0.00024391  max_mem: 19293M
[10/10 07:52:08] d2.utils.events INFO:  eta: 6:37:31  iter: 27499  total_loss: 1.759  loss_sem_seg: 0.8795  loss_relation: 0.07153  loss_center: 0.5031  loss_offset: 0.2914  time: 1.0631  data_time: 0.0581  lr: 0.00024371  max_mem: 19293M
[10/10 07:52:29] d2.utils.events INFO:  eta: 6:37:11  iter: 27519  total_loss: 1.642  loss_sem_seg: 0.8607  loss_relation: 0.07759  loss_center: 0.4678  loss_offset: 0.2774  time: 1.0631  data_time: 0.0628  lr: 0.00024352  max_mem: 19293M
[10/10 07:52:50] d2.utils.events INFO:  eta: 6:36:49  iter: 27539  total_loss: 1.735  loss_sem_seg: 0.8895  loss_relation: 0.06743  loss_center: 0.4655  loss_offset: 0.2749  time: 1.0631  data_time: 0.0593  lr: 0.00024332  max_mem: 19293M
[10/10 07:53:11] d2.utils.events INFO:  eta: 6:36:28  iter: 27559  total_loss: 1.732  loss_sem_seg: 0.9044  loss_relation: 0.06838  loss_center: 0.4331  loss_offset: 0.2883  time: 1.0631  data_time: 0.0599  lr: 0.00024313  max_mem: 19293M
[10/10 07:53:33] d2.utils.events INFO:  eta: 6:36:09  iter: 27579  total_loss: 1.717  loss_sem_seg: 0.8606  loss_relation: 0.06346  loss_center: 0.455  loss_offset: 0.2772  time: 1.0631  data_time: 0.0603  lr: 0.00024293  max_mem: 19293M
[10/10 07:53:54] d2.utils.events INFO:  eta: 6:35:53  iter: 27599  total_loss: 1.723  loss_sem_seg: 0.9262  loss_relation: 0.0654  loss_center: 0.4664  loss_offset: 0.2826  time: 1.0631  data_time: 0.0599  lr: 0.00024274  max_mem: 19293M
[10/10 07:54:15] d2.utils.events INFO:  eta: 6:35:25  iter: 27619  total_loss: 1.665  loss_sem_seg: 0.8315  loss_relation: 0.05878  loss_center: 0.4485  loss_offset: 0.2867  time: 1.0631  data_time: 0.0590  lr: 0.00024254  max_mem: 19293M
[10/10 07:54:36] d2.utils.events INFO:  eta: 6:35:06  iter: 27639  total_loss: 1.617  loss_sem_seg: 0.8398  loss_relation: 0.06196  loss_center: 0.4183  loss_offset: 0.2552  time: 1.0631  data_time: 0.0595  lr: 0.00024235  max_mem: 19293M
[10/10 07:54:57] d2.utils.events INFO:  eta: 6:34:43  iter: 27659  total_loss: 1.622  loss_sem_seg: 0.8308  loss_relation: 0.06173  loss_center: 0.4646  loss_offset: 0.2881  time: 1.0631  data_time: 0.0579  lr: 0.00024215  max_mem: 19293M
[10/10 07:55:19] d2.utils.events INFO:  eta: 6:34:25  iter: 27679  total_loss: 1.717  loss_sem_seg: 0.8745  loss_relation: 0.06594  loss_center: 0.4968  loss_offset: 0.2637  time: 1.0631  data_time: 0.0623  lr: 0.00024196  max_mem: 19293M
[10/10 07:55:40] d2.utils.events INFO:  eta: 6:34:08  iter: 27699  total_loss: 1.704  loss_sem_seg: 0.8745  loss_relation: 0.06798  loss_center: 0.4676  loss_offset: 0.2723  time: 1.0631  data_time: 0.0645  lr: 0.00024176  max_mem: 19293M
[10/10 07:56:01] d2.utils.events INFO:  eta: 6:33:47  iter: 27719  total_loss: 1.695  loss_sem_seg: 0.8967  loss_relation: 0.05711  loss_center: 0.4442  loss_offset: 0.299  time: 1.0631  data_time: 0.0622  lr: 0.00024157  max_mem: 19293M
[10/10 07:56:23] d2.utils.events INFO:  eta: 6:33:26  iter: 27739  total_loss: 1.685  loss_sem_seg: 0.8733  loss_relation: 0.06601  loss_center: 0.4488  loss_offset: 0.2775  time: 1.0631  data_time: 0.0589  lr: 0.00024137  max_mem: 19293M
[10/10 07:56:44] d2.utils.events INFO:  eta: 6:33:05  iter: 27759  total_loss: 1.66  loss_sem_seg: 0.8754  loss_relation: 0.06491  loss_center: 0.5011  loss_offset: 0.2841  time: 1.0631  data_time: 0.0601  lr: 0.00024118  max_mem: 19293M
[10/10 07:57:05] d2.utils.events INFO:  eta: 6:32:51  iter: 27779  total_loss: 1.701  loss_sem_seg: 0.8899  loss_relation: 0.06016  loss_center: 0.495  loss_offset: 0.2677  time: 1.0631  data_time: 0.0595  lr: 0.00024098  max_mem: 19293M
[10/10 07:57:26] d2.utils.events INFO:  eta: 6:32:36  iter: 27799  total_loss: 1.746  loss_sem_seg: 0.9147  loss_relation: 0.06561  loss_center: 0.4622  loss_offset: 0.2767  time: 1.0631  data_time: 0.0630  lr: 0.00024079  max_mem: 19293M
[10/10 07:57:48] d2.utils.events INFO:  eta: 6:32:16  iter: 27819  total_loss: 1.783  loss_sem_seg: 0.9602  loss_relation: 0.07149  loss_center: 0.4776  loss_offset: 0.2665  time: 1.0631  data_time: 0.0601  lr: 0.00024059  max_mem: 19293M
[10/10 07:58:09] d2.utils.events INFO:  eta: 6:31:54  iter: 27839  total_loss: 1.774  loss_sem_seg: 0.9106  loss_relation: 0.07664  loss_center: 0.4737  loss_offset: 0.2958  time: 1.0631  data_time: 0.0638  lr: 0.0002404  max_mem: 19293M
[10/10 07:58:30] d2.utils.events INFO:  eta: 6:31:36  iter: 27859  total_loss: 1.586  loss_sem_seg: 0.8239  loss_relation: 0.05668  loss_center: 0.4098  loss_offset: 0.2579  time: 1.0631  data_time: 0.0597  lr: 0.0002402  max_mem: 19293M
[10/10 07:58:52] d2.utils.events INFO:  eta: 6:31:19  iter: 27879  total_loss: 1.649  loss_sem_seg: 0.8595  loss_relation: 0.05556  loss_center: 0.4668  loss_offset: 0.2764  time: 1.0631  data_time: 0.0657  lr: 0.00024001  max_mem: 19293M
[10/10 07:59:13] d2.utils.events INFO:  eta: 6:30:59  iter: 27899  total_loss: 1.584  loss_sem_seg: 0.8167  loss_relation: 0.06393  loss_center: 0.4544  loss_offset: 0.2804  time: 1.0631  data_time: 0.0636  lr: 0.00023981  max_mem: 19293M
[10/10 07:59:34] d2.utils.events INFO:  eta: 6:30:41  iter: 27919  total_loss: 1.628  loss_sem_seg: 0.8526  loss_relation: 0.05939  loss_center: 0.4702  loss_offset: 0.2708  time: 1.0631  data_time: 0.0657  lr: 0.00023961  max_mem: 19293M
[10/10 07:59:56] d2.utils.events INFO:  eta: 6:30:19  iter: 27939  total_loss: 1.644  loss_sem_seg: 0.8274  loss_relation: 0.06209  loss_center: 0.4808  loss_offset: 0.2737  time: 1.0631  data_time: 0.0588  lr: 0.00023942  max_mem: 19293M
[10/10 08:00:17] d2.utils.events INFO:  eta: 6:30:00  iter: 27959  total_loss: 1.801  loss_sem_seg: 0.9813  loss_relation: 0.0679  loss_center: 0.4778  loss_offset: 0.2698  time: 1.0631  data_time: 0.0583  lr: 0.00023922  max_mem: 19293M
[10/10 08:00:38] d2.utils.events INFO:  eta: 6:29:36  iter: 27979  total_loss: 1.745  loss_sem_seg: 0.9511  loss_relation: 0.0585  loss_center: 0.4794  loss_offset: 0.2758  time: 1.0631  data_time: 0.0610  lr: 0.00023903  max_mem: 19293M
[10/10 08:00:59] fvcore.common.checkpoint INFO: Saving checkpoint to ./relations_output_seg_transformer_resnet101/model_0027999.pth
[10/10 08:01:01] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[10/10 08:01:01] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 08:01:01] d2.data.common INFO: Serialized dataset takes 0.86 MiB
[10/10 08:01:01] d2.evaluation.evaluator INFO: Start inference on 250 batches
[10/10 08:01:15] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0017 s/iter. Inference: 0.0699 s/iter. Eval: 0.0294 s/iter. Total: 0.1011 s/iter. ETA=0:00:24
[10/10 08:01:20] d2.evaluation.evaluator INFO: Inference done 64/250. Dataloading: 0.0013 s/iter. Inference: 0.0661 s/iter. Eval: 0.0287 s/iter. Total: 0.0963 s/iter. ETA=0:00:17
[10/10 08:01:25] d2.evaluation.evaluator INFO: Inference done 120/250. Dataloading: 0.0013 s/iter. Inference: 0.0637 s/iter. Eval: 0.0284 s/iter. Total: 0.0935 s/iter. ETA=0:00:12
[10/10 08:01:30] d2.evaluation.evaluator INFO: Inference done 174/250. Dataloading: 0.0014 s/iter. Inference: 0.0635 s/iter. Eval: 0.0285 s/iter. Total: 0.0935 s/iter. ETA=0:00:07
[10/10 08:01:35] d2.evaluation.evaluator INFO: Inference done 232/250. Dataloading: 0.0014 s/iter. Inference: 0.0623 s/iter. Eval: 0.0281 s/iter. Total: 0.0919 s/iter. ETA=0:00:01
[10/10 08:01:37] d2.evaluation.evaluator INFO: Total inference time: 0:00:22.972538 (0.093765 s / iter per device, on 2 devices)
[10/10 08:01:37] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:15 (0.062548 s / iter per device, on 2 devices)
[10/10 08:01:37] d2.projects.panoptic_deeplab.evaluator INFO: Writing all panoptic predictions to /tmp/panoptic_evalzoz5v2p9 ...
[10/10 08:01:42] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Relations Evaluation Results: 12.848172266150183
[10/10 08:01:42] d2.projects.panoptic_deeplab.evaluator INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 12.263 | 45.090 | 16.522 |      130      |
| Things | 10.016 | 41.779 | 13.816 |      77       |
| Stuff  | 15.526 | 49.900 | 20.454 |      53       |
[10/10 08:01:42] d2.engine.defaults INFO: Evaluation results for psg_val in csv format:
[10/10 08:01:42] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 08:01:42] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[10/10 08:01:42] d2.evaluation.testing INFO: copypaste: 12.2625,45.0895,16.5224,10.0165,41.7786,13.8162,15.5257,49.8998,20.4541
[10/10 08:01:42] d2.evaluation.testing INFO: copypaste: Task: relation_mean_recall
[10/10 08:01:42] d2.evaluation.testing INFO: copypaste: mean_recall
[10/10 08:01:42] d2.evaluation.testing INFO: copypaste: 0.1285
[10/10 08:01:42] d2.utils.events INFO:  eta: 6:29:16  iter: 27999  total_loss: 1.667  loss_sem_seg: 0.878  loss_relation: 0.06566  loss_center: 0.4443  loss_offset: 0.2672  time: 1.0631  data_time: 0.0640  lr: 0.00023883  max_mem: 19293M
[10/10 08:01:42] d2.engine.hooks INFO: Not saving as latest eval score for relation_mean_recall/mean_recall is 0.12848, not better than best score 0.16205 @ iteration 11999.
[10/10 08:02:04] d2.utils.events INFO:  eta: 6:28:56  iter: 28019  total_loss: 1.662  loss_sem_seg: 0.8501  loss_relation: 0.07125  loss_center: 0.4693  loss_offset: 0.2807  time: 1.0631  data_time: 0.0645  lr: 0.00023864  max_mem: 19293M
[10/10 08:02:25] d2.utils.events INFO:  eta: 6:28:35  iter: 28039  total_loss: 1.655  loss_sem_seg: 0.8388  loss_relation: 0.06544  loss_center: 0.4609  loss_offset: 0.2859  time: 1.0631  data_time: 0.0599  lr: 0.00023844  max_mem: 19293M
[10/10 08:02:46] d2.utils.events INFO:  eta: 6:28:18  iter: 28059  total_loss: 1.65  loss_sem_seg: 0.8448  loss_relation: 0.07031  loss_center: 0.4556  loss_offset: 0.2914  time: 1.0631  data_time: 0.0718  lr: 0.00023825  max_mem: 19293M
[10/10 08:03:08] d2.utils.events INFO:  eta: 6:27:58  iter: 28079  total_loss: 1.739  loss_sem_seg: 0.9214  loss_relation: 0.06189  loss_center: 0.4541  loss_offset: 0.2838  time: 1.0631  data_time: 0.0618  lr: 0.00023805  max_mem: 19293M
[10/10 08:03:29] d2.utils.events INFO:  eta: 6:27:40  iter: 28099  total_loss: 1.768  loss_sem_seg: 0.8886  loss_relation: 0.06712  loss_center: 0.4994  loss_offset: 0.2916  time: 1.0631  data_time: 0.0627  lr: 0.00023786  max_mem: 19293M
[10/10 08:03:50] d2.utils.events INFO:  eta: 6:27:21  iter: 28119  total_loss: 1.672  loss_sem_seg: 0.8999  loss_relation: 0.07223  loss_center: 0.4354  loss_offset: 0.278  time: 1.0631  data_time: 0.0594  lr: 0.00023766  max_mem: 19293M
[10/10 08:04:11] d2.utils.events INFO:  eta: 6:26:56  iter: 28139  total_loss: 1.696  loss_sem_seg: 0.8436  loss_relation: 0.05985  loss_center: 0.4611  loss_offset: 0.2839  time: 1.0631  data_time: 0.0505  lr: 0.00023747  max_mem: 19293M
[10/10 08:04:33] d2.utils.events INFO:  eta: 6:26:37  iter: 28159  total_loss: 1.684  loss_sem_seg: 0.9077  loss_relation: 0.05891  loss_center: 0.4498  loss_offset: 0.2501  time: 1.0631  data_time: 0.0651  lr: 0.00023727  max_mem: 19293M
[10/10 08:04:54] d2.utils.events INFO:  eta: 6:26:08  iter: 28179  total_loss: 1.66  loss_sem_seg: 0.9118  loss_relation: 0.05691  loss_center: 0.4159  loss_offset: 0.2703  time: 1.0631  data_time: 0.0555  lr: 0.00023707  max_mem: 19293M
[10/10 08:05:15] d2.utils.events INFO:  eta: 6:25:51  iter: 28199  total_loss: 1.566  loss_sem_seg: 0.7972  loss_relation: 0.05833  loss_center: 0.4225  loss_offset: 0.2594  time: 1.0631  data_time: 0.0625  lr: 0.00023688  max_mem: 19293M
[10/10 08:05:36] d2.utils.events INFO:  eta: 6:25:23  iter: 28219  total_loss: 1.743  loss_sem_seg: 0.8853  loss_relation: 0.06582  loss_center: 0.5031  loss_offset: 0.3015  time: 1.0631  data_time: 0.0567  lr: 0.00023668  max_mem: 19293M
[10/10 08:05:58] d2.utils.events INFO:  eta: 6:25:07  iter: 28239  total_loss: 1.686  loss_sem_seg: 0.8674  loss_relation: 0.05716  loss_center: 0.4585  loss_offset: 0.2589  time: 1.0631  data_time: 0.0657  lr: 0.00023649  max_mem: 19293M
[10/10 08:06:19] d2.utils.events INFO:  eta: 6:24:41  iter: 28259  total_loss: 1.665  loss_sem_seg: 0.8621  loss_relation: 0.06671  loss_center: 0.4404  loss_offset: 0.2918  time: 1.0631  data_time: 0.0604  lr: 0.00023629  max_mem: 19293M
[10/10 08:06:40] d2.utils.events INFO:  eta: 6:24:20  iter: 28279  total_loss: 1.708  loss_sem_seg: 0.8798  loss_relation: 0.06015  loss_center: 0.4835  loss_offset: 0.2679  time: 1.0631  data_time: 0.0646  lr: 0.0002361  max_mem: 19293M
[10/10 08:07:01] d2.utils.events INFO:  eta: 6:24:00  iter: 28299  total_loss: 1.59  loss_sem_seg: 0.8409  loss_relation: 0.06352  loss_center: 0.4423  loss_offset: 0.256  time: 1.0631  data_time: 0.0631  lr: 0.0002359  max_mem: 19293M
[10/10 08:07:23] d2.utils.events INFO:  eta: 6:23:38  iter: 28319  total_loss: 1.737  loss_sem_seg: 0.9267  loss_relation: 0.06625  loss_center: 0.4689  loss_offset: 0.2812  time: 1.0631  data_time: 0.0624  lr: 0.0002357  max_mem: 19293M
[10/10 08:07:44] d2.utils.events INFO:  eta: 6:23:17  iter: 28339  total_loss: 1.684  loss_sem_seg: 0.8212  loss_relation: 0.06567  loss_center: 0.4796  loss_offset: 0.2923  time: 1.0631  data_time: 0.0577  lr: 0.00023551  max_mem: 19293M
[10/10 08:08:05] d2.utils.events INFO:  eta: 6:23:03  iter: 28359  total_loss: 1.688  loss_sem_seg: 0.865  loss_relation: 0.06362  loss_center: 0.4547  loss_offset: 0.2542  time: 1.0631  data_time: 0.0695  lr: 0.00023531  max_mem: 19293M
[10/10 08:08:27] d2.utils.events INFO:  eta: 6:22:34  iter: 28379  total_loss: 1.619  loss_sem_seg: 0.8352  loss_relation: 0.05824  loss_center: 0.4493  loss_offset: 0.276  time: 1.0631  data_time: 0.0600  lr: 0.00023512  max_mem: 19293M
[10/10 08:08:48] d2.utils.events INFO:  eta: 6:22:10  iter: 28399  total_loss: 1.617  loss_sem_seg: 0.8382  loss_relation: 0.07352  loss_center: 0.4535  loss_offset: 0.2664  time: 1.0631  data_time: 0.0642  lr: 0.00023492  max_mem: 19293M
[10/10 08:09:09] d2.utils.events INFO:  eta: 6:21:50  iter: 28419  total_loss: 1.748  loss_sem_seg: 0.8692  loss_relation: 0.0584  loss_center: 0.4611  loss_offset: 0.2978  time: 1.0631  data_time: 0.0583  lr: 0.00023473  max_mem: 19293M
[10/10 08:09:30] d2.utils.events INFO:  eta: 6:21:29  iter: 28439  total_loss: 1.644  loss_sem_seg: 0.8674  loss_relation: 0.05999  loss_center: 0.4171  loss_offset: 0.2605  time: 1.0631  data_time: 0.0629  lr: 0.00023453  max_mem: 19293M
[10/10 08:09:52] d2.utils.events INFO:  eta: 6:21:08  iter: 28459  total_loss: 1.609  loss_sem_seg: 0.7939  loss_relation: 0.05116  loss_center: 0.4642  loss_offset: 0.2758  time: 1.0631  data_time: 0.0593  lr: 0.00023433  max_mem: 19293M
[10/10 08:10:13] d2.utils.events INFO:  eta: 6:20:47  iter: 28479  total_loss: 1.67  loss_sem_seg: 0.8302  loss_relation: 0.05202  loss_center: 0.4731  loss_offset: 0.2563  time: 1.0631  data_time: 0.0562  lr: 0.00023414  max_mem: 19293M
[10/10 08:10:34] d2.utils.events INFO:  eta: 6:20:29  iter: 28499  total_loss: 1.615  loss_sem_seg: 0.8621  loss_relation: 0.06454  loss_center: 0.4266  loss_offset: 0.2529  time: 1.0631  data_time: 0.0602  lr: 0.00023394  max_mem: 19293M
[10/10 08:10:55] d2.utils.events INFO:  eta: 6:20:07  iter: 28519  total_loss: 1.611  loss_sem_seg: 0.8468  loss_relation: 0.05909  loss_center: 0.4746  loss_offset: 0.2698  time: 1.0631  data_time: 0.0619  lr: 0.00023375  max_mem: 19293M
[10/10 08:11:16] d2.utils.events INFO:  eta: 6:19:51  iter: 28539  total_loss: 1.672  loss_sem_seg: 0.8482  loss_relation: 0.06376  loss_center: 0.4474  loss_offset: 0.2704  time: 1.0631  data_time: 0.0590  lr: 0.00023355  max_mem: 19293M
[10/10 08:11:38] d2.utils.events INFO:  eta: 6:19:26  iter: 28559  total_loss: 1.811  loss_sem_seg: 0.9078  loss_relation: 0.0549  loss_center: 0.4866  loss_offset: 0.2896  time: 1.0631  data_time: 0.0610  lr: 0.00023336  max_mem: 19293M
[10/10 08:11:59] d2.utils.events INFO:  eta: 6:19:01  iter: 28579  total_loss: 1.75  loss_sem_seg: 0.9062  loss_relation: 0.07078  loss_center: 0.4794  loss_offset: 0.2909  time: 1.0631  data_time: 0.0597  lr: 0.00023316  max_mem: 19293M
[10/10 08:12:20] d2.utils.events INFO:  eta: 6:18:40  iter: 28599  total_loss: 1.628  loss_sem_seg: 0.8709  loss_relation: 0.05681  loss_center: 0.4459  loss_offset: 0.2552  time: 1.0631  data_time: 0.0587  lr: 0.00023296  max_mem: 19293M
[10/10 08:12:41] d2.utils.events INFO:  eta: 6:18:22  iter: 28619  total_loss: 1.604  loss_sem_seg: 0.8118  loss_relation: 0.06184  loss_center: 0.4209  loss_offset: 0.277  time: 1.0631  data_time: 0.0622  lr: 0.00023277  max_mem: 19293M
[10/10 08:12:46] d2.engine.hooks INFO: Overall training speed: 28622 iterations in 8:27:08 (1.0631 s / it)
[10/10 08:12:46] d2.engine.hooks INFO: Total training time: 8:49:00 (0:21:52 on hooks)
[10/10 08:12:46] d2.utils.events INFO:  eta: 6:18:20  iter: 28624  total_loss: 1.607  loss_sem_seg: 0.8481  loss_relation: 0.06047  loss_center: 0.4131  loss_offset: 0.2735  time: 1.0631  data_time: 0.0629  lr: 0.00023273  max_mem: 19293M
